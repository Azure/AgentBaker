variant: flatcar
version: 1.0.0
storage:
  files:
  - path: {{GetCSEHelpersScriptFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionSource"}}

  {{if IsMariner}}
  - path: {{GetCSEHelpersScriptDistroFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionSourceMariner"}}
  {{- else}}
  - path: {{GetCSEHelpersScriptDistroFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionSourceUbuntu"}}
  {{end}}

  {{ if not IsCustomImage -}}
  - path: /opt/azure/containers/provision_start.sh
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionStartScript"}}
  {{- end }}

  - path: /opt/azure/containers/provision.sh
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionScript"}}

  - path: {{GetCSEInstallScriptFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionInstalls"}}

  - path: /opt/azure/containers/provision_redact_cloud_config.py
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionRedactCloudConfig"}}

  - path: /opt/azure/containers/provision_send_logs.py
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionSendLogs"}}

  {{if IsMariner}}
  - path: {{GetCSEInstallScriptDistroFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionInstallsMariner"}}
  {{- else}}
  - path: {{GetCSEInstallScriptDistroFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionInstallsUbuntu"}}
  {{end}}

  - path: {{GetCSEConfigScriptFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "provisionConfigs"}}

  - path: /opt/azure/manifest.json
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "componentManifestFile"}}

{{- if IsAKSCustomCloud }}
  - path: {{GetInitAKSCustomCloudFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "initAKSCustomCloud"}}
{{- end }}

  - path: /opt/azure/containers/reconcilePrivateHosts.sh
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "reconcilePrivateHostsScript"}}

  - path: /etc/systemd/system/reconcile-private-hosts.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "reconcilePrivateHostsService"}}

  - path: /etc/systemd/system/kubelet.service
    mode: 0600
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "kubeletSystemdService"}}

  - path: /etc/systemd/system/mig-partition.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "migPartitionSystemdService"}}

  - path: /opt/azure/containers/mig-partition.sh
    mode: 0544
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "migPartitionScript"}}

  {{if IsMariner}}
  - path: /opt/azure/containers/mariner-package-update.sh
    mode: 0544
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "packageUpdateScriptMariner"}}

  - path: /etc/systemd/system/snapshot-update.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "packageUpdateServiceMariner"}}

  - path: /etc/systemd/system/snapshot-update.timer
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "packageUpdateTimerMariner"}}
  {{- else}}
  - path: /opt/azure/containers/ubuntu-snapshot-update.sh
    mode: 0544
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "snapshotUpdateScript"}}

  - path: /etc/systemd/system/snapshot-update.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "snapshotUpdateService"}}

  - path: /etc/systemd/system/snapshot-update.timer
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "snapshotUpdateTimer"}}
  {{end}}

  - path: /opt/azure/containers/bind-mount.sh
    mode: 0544
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "bindMountScript"}}

  - path: /etc/systemd/system/bind-mount.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "bindMountSystemdService"}}

  - path: {{GetDHCPv6ServiceCSEScriptFilepath}}
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "dhcpv6SystemdService"}}

  - path: /opt/azure/containers/enable-dhcpv6.sh
    mode: 0544
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "dhcpv6ConfigurationScript"}}

  - path: /etc/systemd/system/docker.service.d/exec_start.conf
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        [Service]
        ExecStart=
        ExecStart=/usr/bin/dockerd -H fd:// --storage-driver=overlay2 --bip={{GetParameter "dockerBridgeCidr"}}
        ExecStartPost=/sbin/iptables -P FORWARD ACCEPT
        #EOF

  - path: /etc/docker/daemon.json
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        {
          "live-restore": true,
          "log-driver": "json-file",
          "log-opts":  {
             "max-size": "50m",
             "max-file": "5"
          }{{if IsNSeriesSKU}}
          ,"default-runtime": "nvidia",
          "runtimes": {
             "nvidia": {
                 "path": "/usr/bin/nvidia-container-runtime",
                 "runtimeArgs": []
            }
          }{{end}}{{if HasDataDir}},
          "data-root": "{{GetDataDir}}"{{- end}}
        }

  - path: /etc/systemd/system/containerd.service.d/exec_start.conf
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        [Service]
        ExecStartPost=/sbin/iptables -P FORWARD ACCEPT
        #EOF

  - path: /etc/crictl.yaml
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        runtime-endpoint: unix:///run/containerd/containerd.sock
        #EOF

  - path: /etc/systemd/system/ensure-no-dup.service
    mode: 0644
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "ensureNoDupEbtablesService"}}

  - path: /opt/azure/containers/ensure-no-dup.sh
    mode: 0755
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "ensureNoDupEbtablesScript"}}

  - path: /etc/systemd/system/teleportd.service
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        [Unit]
        Description=teleportd teleport runtime
        After=network.target
        [Service]
        ExecStart=/usr/local/bin/teleportd --metrics --aksConfig /etc/kubernetes/azure.json
        Delegate=yes
        KillMode=process
        Restart=always
        LimitNPROC=infinity
        LimitCORE=infinity
        LimitNOFILE=1048576
        TasksMax=infinity
        [Install]
        WantedBy=multi-user.target
        #EOF

  - path: /etc/systemd/system/nvidia-modprobe.service
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        [Unit]
        Description=Installs and loads Nvidia GPU kernel module
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStartPre=/bin/sh -c "dkms autoinstall --verbose"
        ExecStart=/bin/sh -c "nvidia-modprobe -u -c0"
        [Install]
        WantedBy=multi-user.target kubelet.service

  - path: /etc/default/kubelet
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        KUBELET_FLAGS={{GetKubeletConfigKeyVals}}
        KUBELET_REGISTER_SCHEDULABLE=true
        NETWORK_POLICY={{GetParameter "networkPolicy"}}
  {{- if not (IsKubernetesVersionGe "1.17.0")}}
        KUBELET_IMAGE={{GetHyperkubeImageReference}}
  {{- end}}
  {{- if IsKubernetesVersionGe "1.16.0"}}
        KUBELET_NODE_LABELS={{GetAgentKubernetesLabels . }}
  {{- else}}
        KUBELET_NODE_LABELS={{GetAgentKubernetesLabelsDeprecated . }}
  {{- end}}
  {{- if IsAKSCustomCloud}}
        AZURE_ENVIRONMENT_FILEPATH=/etc/kubernetes/{{GetTargetEnvironment}}.json
  {{- end}}

  {{ if (or EnableSecureTLSBootstrapping EnableTLSBootstrapping) -}}
  - path: /var/lib/kubelet/bootstrap-kubeconfig
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: localcluster
          cluster:
            certificate-authority: /etc/kubernetes/certs/ca.crt
            server: https://{{GetKubernetesEndpoint}}:443
        users:
        - name: kubelet-bootstrap
          user:
  {{- if EnableSecureTLSBootstrapping }}
            exec:
              apiVersion: client.authentication.k8s.io/v1
              command: /opt/azure/tlsbootstrap/tls-bootstrap-client
              args:
              - bootstrap
              - --next-proto=aks-tls-bootstrap
  {{- if GetCustomSecureTLSBootstrapAADServerAppID}}
              - --aad-resource={{GetCustomSecureTLSBootstrapAADServerAppID}}
  {{- else}}
              - --aad-resource=6dae42f8-4368-4678-94ff-3960e28e3630
  {{- end}}
              interactiveMode: Never
              provideClusterInfo: true
  {{- else }}
            token: "{{GetTLSBootstrapTokenForKubeConfig}}"
  {{- end }}
        contexts:
        - context:
            cluster: localcluster
            user: kubelet-bootstrap
          name: bootstrap-context
        current-context: bootstrap-context
  {{else -}}
  - path: /var/lib/kubelet/kubeconfig
    mode: 0644
    user:
      name: root
    contents:
      inline: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: localcluster
          cluster:
            certificate-authority: /etc/kubernetes/certs/ca.crt
            server: https://{{GetKubernetesEndpoint}}:443
        users:
        - name: client
          user:
            client-certificate: /etc/kubernetes/certs/client.crt
            client-key: /etc/kubernetes/certs/client.key
        contexts:
        - context:
            cluster: localcluster
            user: client
          name: localclustercontext
        current-context: localclustercontext
  {{- end}}

  - path: /opt/azure/containers/kubelet.sh
    mode: 0755
    user:
      name: root
    contents:
      inline: |
        #!/bin/bash
        # Disallow container from reaching out to the special IP address 168.63.129.16
        # for TCP protocol (which http uses)
        #
        # 168.63.129.16 contains protected settings that have priviledged info.
        # HostGAPlugin (Host-GuestAgent-Plugin) is a web server process that runs on the physical host that serves the operational and diagnostic needs of the in-VM Guest Agent.  
        # IT listens on both port 80 and 32526 hence access is only needed for agent but not the containers.
        #
        # The host can still reach 168.63.129.16 because it goes through the OUTPUT chain, not FORWARD.
        #
        # Note: we should not block all traffic to 168.63.129.16. For example UDP traffic is still needed
        # for DNS.
        iptables -I FORWARD -d 168.63.129.16 -p tcp --dport 80 -j DROP
        iptables -I FORWARD -d 168.63.129.16 -p tcp --dport 32526 -j DROP

  - path: /opt/azure/containers/ensure_imds_restriction.sh
    mode: 0755
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "ensureIMDSRestrictionScript"}}

  - path: /etc/kubernetes/certs/ca.crt
    mode: 0600
    user:
      name: root
    contents:
      inline: !!binary |
        {{GetParameter "caCertificate"}}

  - path: {{GetCustomSearchDomainsCSEScriptFilepath}}
    mode: 0744
    user:
      name: root
    contents:
      compression: gzip
      inline: !!binary |
        {{GetVariableProperty "cloudInitData" "customSearchDomainsScript"}}
