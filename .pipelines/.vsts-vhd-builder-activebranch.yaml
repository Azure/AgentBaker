name: Release_$(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)_$(BuildID)
trigger: none

pool:
  name: $(AZURE_POOL_NAME)

# variables can be viewed/updated under Pipeline then Library Tab
# Use variable group "ab-windows-ame-tenant" and link it to the pipeline "AKS Windows VHD Build"
# Use variable group "ab-windows-ame-tenant" and link it to the pipeline "AKS Windows VHD Build - PR check-in gate"
# Use variable group "ab-windows-ms-tenant" and link it to the pipeline "[TEST All VHDs] AKS Windows VHD Build - Msft Tenant"

# Some templates use POOL_NAME instead of AZURE_POOL_NAME, so set POOL_NAME here just in case.
variables:
  - name: VHD_BUILD_ID
    value: $(Build.BuildId)
  - name: LOCATION
    value: $(PACKER_BUILD_LOCATION)
  - name: POOL_NAME
    value: $(AZURE_POOL_NAME)
  - name: SUBSCRIPTION_ID
    value: $(AZURE_BUILD_SUBSCRIPTION_ID)
    # if SIG_FOR_PRODUCTION is true, then the VHDs are deleted from the gallery before the e2e tests are run.
  - name: SIG_FOR_PRODUCTION
    value: False
    # These next vars are used for the e2e tests
  - name: AZURE_RESOURCE_GROUP_NAME
    value: $(AZURE_BUILD_RESOURCE_GROUP_NAME)
  - name: GALLERY_RESOURCE_GROUP
    value: $(AZURE_BUILD_RESOURCE_GROUP_NAME)
  - name: GALLERY_SUBSCRIPTION_ID
    value: $(AZURE_BUILD_SUBSCRIPTION_ID)
  - name: GALLERY_NAME
    value: $(SIG_GALLERY_NAME)

parameters:
- name: sourceVHDName
  displayName: source VHD name to work on 
  type: string
  default: latest
- name: dryrun
  displayName: Dry run
  type: boolean
  default: False
- name: vhddebug
  displayName: VHD Debug
  type: boolean
  default: False
- name: skipExtensionCheck
  displayName: Skip Extension Check
  type: boolean
  default: True
- name: installOpenSshServer
  displayName: Install Open SSH Server
  type: boolean
  default: True
- name: buildVmSize
  displayName: Build VM Size
  type: string
  default: Standard_D4s_v3
- name: useOverrides
  displayName: Use component overrides
  type: boolean
  default: false
- name: overrideBranch
  displayName: Branch in aks-rp to use for overrides
  type: string
  default: master

stages:
  - stage: get_build_info
    dependsOn: []
    pool:
      name: wcct-agentbaker-test-win-pool
    jobs:
    - job: build
      timeoutInMinutes: 1440
      steps:
        - template: ./templates/.get-build-info.yaml
          parameters:
            vhdName: ${{ parameters.sourceVHDName }}

  - stage: build_vhd
    dependsOn: get_build_info
    condition: and(succeeded('get_build_info'),
      eq(stageDependencies.get_build_info.outputs['build.GetInfoAndSetVariable.imageBuilt'], 'No'))
    variables:
      ServerCoreUrl: $[ stageDependencies.get_build_info.build.outputs['GetInfoAndSetVariable.ServerCoreUrl'] ]
      NanoServerUrl: $[ stageDependencies.get_build_info.build.outputs['GetInfoAndSetVariable.NanoServerUrl'] ]
    jobs:
    - job: build
      pool:
          name:  $(AZURE_POOL_NAME)
      timeoutInMinutes: 180
      steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'sig_image_version'
            path: $(System.DefaultWorkingDirectory)/sig_image_version
        - bash: |
            #echo "ServerCoreUrl is $(ServerCoreUrl)"
            az login --identity --resource-id $(AZURE_MSI_RESOURCE_STRING)
            az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
          displayName: Managed Identity Login
        - bash: |
            fileToDownload=$(az storage blob list --container-name ssh-vhds --account-name $(AZURE_E2E_STORAGE_ACCOUNT_NAME) --auth-mode login --query "[?starts_with(name, 'rs_sparc_ctr_serverdatacentercore')].[name, properties.lastModified]" --output tsv | sort -k2,2 -r | head -n 1 | cut -f 1)
            customImageUrl="https://$(AZURE_E2E_STORAGE_ACCOUNT_NAME).blob.core.windows.net/ssh-vhds/${fileToDownload}"

            if [ -n "$(ACTIVE_BRANCH_BASE_IMAGE_URL)" ]; then
              echo "##vso[task.setvariable variable=WINDOWS_BASE_IMAGE_URL]$(ACTIVE_BRANCH_BASE_IMAGE_URL)"
            else
              echo "##vso[task.setvariable variable=WINDOWS_BASE_IMAGE_URL]$customImageUrl"
            fi


            echo '##vso[task.setvariable variable=WINDOWS_NANO_IMAGE_URL]$(NanoServerUrl)'
            echo '##vso[task.setvariable variable=WINDOWS_CORE_IMAGE_URL]$(ServerCoreUrl)'
            SIG_IMAGE_VERSION=$(cat $(System.DefaultWorkingDirectory)/sig_image_version/sig_image_version.txt | tr -cd '[:print:]')
            today_date=$(date +"%y%m%d")
            SIG_IMAGE_VERSION="${SIG_IMAGE_VERSION}.${today_date}"
            echo "##vso[task.setvariable variable=SIG_IMAGE_VERSION]$SIG_IMAGE_VERSION"
            echo "SIG_IMAGE_VERSION is ${SIG_IMAGE_VERSION}"
          name: setvar
          displayName: Setup Build Variables
        - template: ./templates/.builder-release-template-windows.yaml
          parameters:
            artifactName: activebranch
            windowsSku: activebranch
            hyperVGeneration: V1
            architecture: X86_64
            buildVmSize: ${{ parameters.buildVmSize }}
            build: True
            vhddebug: ${{ parameters.vhddebug }}
            dryrun: ${{ parameters.dryrun }}
            installOpenSshServer: ${{ parameters.installOpenSshServer }}
            skipExtensionCheck: ${{ parameters.skipExtensionCheck }}
            windowsBaseImageUrl: $(WINDOWS_BASE_IMAGE_URL)
            windowsNanoImageUrl: $(WINDOWS_NANO_IMAGE_URL)
            windowsCoreImageUrl: $(WINDOWS_CORE_IMAGE_URL)
            overrideBranch: ${{ parameters.overrideBranch }}
            useOverrides: ${{ parameters.useOverrides }}

  - stage: e2e
    displayName: E2E
    dependsOn: build_vhd
    variables:
      TAGS_TO_RUN: imageName=windows-activebranch
      BLOB_CONTAINER: wcct
      BLOB_STORAGE_ACCOUNT_PREFIX: wcct
      DEFAULT_VM_SKU: ${{ parameters.buildVmSize }}
      E2E_LOCATION: $(AZURE_E2E_LOCATION)   #note ${} will not work here, use $()
      GALLERY_SUBSCRIPTION_ID_WINDOWS: $(AZURE_BUILD_SUBSCRIPTION_ID)
      GALLERY_RESOURCE_GROUP_WINDOWS: $(AZURE_BUILD_RESOURCE_GROUP_NAME)
      GALLERYUY_NAME: $(SIG_GALLERY_NAME)
    jobs:
      - template: ./templates/e2e-template.yaml
        parameters:
          name: For image windows-activebranch
          IgnoreScenariosWithMissingVhd: false

  - stage: aks_cluster
    displayName: aks cluster windows-activebranch
    dependsOn: build_vhd
    jobs:
      - template: ./templates/.create-aks-cluster-template.yaml
        parameters:
          imageName: windows-activebranch
          kubernetesVersion: $(KUBERNETES_VERSION)

  - stage: k8s_e2e
    displayName: k8s e2e windows-activebranch
    dependsOn: aks_cluster
    variables:
      cluster_RG: $[ stageDependencies.aks_cluster.create.outputs['setvar.CLUSTER_RG'] ]
    jobs:
      - template: ./templates/.k8s-windows-e2e-template.yaml
        parameters:
          resourceGroup: $(CLUSTER_RG)
          clusterName: testcluster
          storageContainerName: "pipeline-test-logs"
          kustoUrl: "https://wccttest.eastus.kusto.windows.net"
          KustoDatabaseName: "wccttest"
          kustoTableName: "windowssigtestlogs"

  - stage: backfill_cleanup_outdated_resources
    dependsOn: [ ]
    condition: always()
    jobs:
      - job: build
        timeoutInMinutes: 180
        steps:
          - bash: |
              # because SUBSCRIPTION_ID is defined as a pipeline variable, setting this in the "env" section below doesn't work.
              export SUBSCRIPTION_ID=$(AZURE_BUILD_SUBSCRIPTION_ID)
      
              make -f packer.mk backfill-cleanup
            enabled: true
            displayName: Backfill Clean Up Older Resources
            env:
              MODE: windowsVhdMode
              SUBSCRIPTION_ID: $(AZURE_BUILD_SUBSCRIPTION_ID)
              PROD_SUBSCRIPTION_ID: $(AZURE_PROD_SUBSCRIPTION_ID)
              AZURE_RESOURCE_GROUP_NAME: $(AZURE_BUILD_RESOURCE_GROUP_NAME)
              DRY_RUN:  ${{ parameters.dryrun }}
              SIG_GALLERY_NAME: $(SIG_GALLERY_NAME)
              OS_TYPE: Windows
