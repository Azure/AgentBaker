name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)_$(BuildID)
trigger: none

parameters:
- name: scanAzureLinuxV2gen1
  displayName: Scan AzureLinuxV2 Gen1
  type: boolean
  default: true

variables:
- name: CONTAINER_IMAGE
  value: 'mcr.microsoft.com/oss/azcu/go-dev:v1.38.1'
  
pool:
  name: $(POOL_NAME)

stages:
  - stage: scan_vhd_azurelinuxv2_gen1
    dependsOn: []
    condition: eq('${{ parameters.scanAzureLinuxV2gen1 }}', true)
    jobs:
    - job: scan
      timeoutInMinutes: 60
      steps:
        - bash: |
            echo '##vso[task.setvariable variable=DRY_RUN]${{parameters.dryrun}}'
            echo '##vso[task.setvariable variable=OS_SKU]AzureLinux'
            echo '##vso[task.setvariable variable=OS_VERSION]V2'
            echo '##vso[task.setvariable variable=ARCHITECTURE]X86_64'
            echo '##vso[task.setvariable variable=ENABLE_TRUSTED_LAUNCH]False'
          displayName: 'Set variables'
        - bash: |
              OS_DISK_URI="$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)" && \
              MANAGED_SIG_ID="$(cat packer-output | grep "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)" && \
              docker run --rm \
              -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
              -w /go/src/github.com/Azure/AgentBaker \
              -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
              -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
              -e CLASSIC_BLOB=${CLASSIC_BLOB} \
              -e BUILD_ID=$(Build.BuildId) \
              -e MANAGED_SIG_ID=${MANAGED_SIG_ID} \
              -e AZURE_LOCATION=${AZURE_LOCATION} \
              -e OS_VERSION=${OS_VERSION} \
              -e OS_SKU=${OS_SKU} \
              -e OS_TYPE="Linux" \
              -e ARCHITECTURE=${ARCHITECTURE} \
              -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
              ${CONTAINER_IMAGE} make -f packer.mk scanning-vhd
          retryCountOnTaskFailure: 2
          displayName: Scanning VHD
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: 'trivy-report.json'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
          displayName: Copy trivy report
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: 'trivy-images-table.txt'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
          displayName: Copy trivy table
        - task: PublishPipelineArtifact@0
        inputs:
          artifactName: '${{ parameters.artifactName }}'
          targetPath: '$(Build.ArtifactStagingDirectory)'
        displayName: Publish bulk artifacts
        condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))

