pool:
  # uncomment this if the auto teardown pool is down.
  # vmImage: ubuntu-22.04
  name: $(1ES_DevInfra_Auto_TearDown_Pool_Name)

parameters:
- name: ImageBump
  displayName: Image Bump + Create Official Branch
  type: boolean
  default: true
- name: ReleaseNotes
  displayName: Generate Release Notes
  type: boolean
  default: true
- name: CreateRelease
  displayName: Create SIG Release
  type: boolean
  default: true

variables:
  - group: "AKS Dev Assistant (KV)"

stages:
  - stage: bump_image_version
    dependsOn: []
    condition: eq('${{ parameters.ImageBump }}', true)
    jobs:
    - job: automation
      timeoutInMinutes: 15
      steps:
      - bash: |
          az extension add -n azure-devops
          echo $MAPPED_ADO_PAT | az devops login --organization=https://dev.azure.com/msazure
          az devops configure --defaults organization=https://dev.azure.com/msazure project=CloudNativeCompute
        env:
          MAPPED_ADO_PAT: $(PAT-aksdevassistant)
        displayName: 'az devops login'
      - bash: |
          echo "PR for Image Bumping, Official Branch Cutting"
          /bin/bash vhdbuilder/scripts/automate_version_bump.sh $(IMAGE_VERSION) $MAPPED_GITHUB_PAT "${BUILD_ID[@]}"
        env:
          MAPPED_GITHUB_PAT: $(GITHUB_PAT)
        displayName: 'bump image version and create official branch'
  - stage: generate_release_notes
    dependsOn: []
    condition: eq('${{ parameters.ReleaseNotes }}', true)
    jobs:
    - job: automation
      timeoutInMinutes: 30
      steps:
      - bash: |
          set -x
          echo "Removing existing go environment"
          sudo rm -r /usr/local/go
          GOLANG_VERSION="1.22.2"
          echo "Downloading ${GOLANG_VERSION}"
          curl -O "https://dl.google.com/go/${GOLANG_VERSION}.linux-amd64.tar.gz"

          echo "unpacking go"
          sudo mkdir -p /usr/local/go
          sudo chown -R "$(whoami):$(whoami)" /usr/local/go 
          sudo tar -xvf "${GOLANG_VERSION}.linux-amd64.tar.gz" -C /usr/local
          rm "${GOLANG_VERSION}.linux-amd64.tar.gz"
        displayName: 'clean up go environment'
      - bash: |
          az extension add -n azure-devops
          echo $MAPPED_ADO_PAT | az devops login --organization=https://dev.azure.com/msazure --verbose
          az devops configure --defaults organization=https://dev.azure.com/msazure project=CloudNativeCompute
        env:
          MAPPED_ADO_PAT: $(PAT-aksdevassistant)
        displayName: 'az devops login'
      - bash: |
          echo "PR for Release Notes"
          /bin/bash vhdbuilder/scripts/automate_release_notes.sh $(IMAGE_VERSION) "${BUILD_ID[@]}" $MAPPED_GITHUB_PAT
        env:
          MAPPED_GITHUB_PAT: $(GITHUB_PAT)
          SKIP_LATEST: $(SKIP_LATEST_RELEASE_NOTES_UPDATE)
        displayName: 'generate release notes'
  - stage: create_release
    dependsOn: []
    condition: eq('${{ parameters.CreateRelease }}', true)
    jobs:
    - job: automation
      timeoutInMinutes: 60
      steps:
      - bash: |
          az extension add -n azure-devops
          echo $ADO_PAT | az devops login --organization=https://dev.azure.com/msazure --verbose
          az devops configure --defaults organization=https://dev.azure.com/msazure project=CloudNativeCompute
        env:
          ADO_PAT: $(PAT-aksdevassistant)
          AZURE_DEVOPS_EXT_PAT: $(PAT-aksdevassistant)
        displayName: 'az devops login'
      - bash: |
          echo "Creating EV2 artifacts and corresponding SIG release"
          /bin/bash vhdbuilder/scripts/automate_release.sh
        env:
          ADO_PAT: $(PAT-aksdevassistant)
          AZURE_DEVOPS_EXT_PAT: $(PAT-aksdevassistant)
          VHD_BUILD_ID: $(BUILD_ID)
        displayName: 'create SIG release'

# steps:
# - bash: |
#         set -x
#         echo "Removing existing go environment"
#         sudo rm -r /usr/local/go
#         #GOLANG_VERSION=$(curl -s 'https://go.dev/VERSION?m=text' | head -n 1)
#         GOLANG_VERSION="1.20.6"
#         echo "Downloading ${GOLANG_VERSION}"
#         curl -O "https://dl.google.com/go/${GOLANG_VERSION}.linux-amd64.tar.gz"

#         echo "unpacking go"
#         sudo mkdir -p /usr/local/go
#         sudo chown -R "$(whoami):$(whoami)" /usr/local/go 
#         sudo tar -xvf "${GOLANG_VERSION}.linux-amd64.tar.gz" -C /usr/local
#         rm "${GOLANG_VERSION}.linux-amd64.tar.gz"
#   displayName: 'Clean up go environment'
# - bash: |
#         az extension add -n azure-devops
#         echo $MAPPED_ADO_PAT | az devops login --organization=https://dev.azure.com/msazure
#         az devops configure --defaults organization=https://dev.azure.com/msazure project=CloudNativeCompute
#   env:
#         MAPPED_ADO_PAT: $(PAT-aksdevassistant)
#   displayName: 'az devops login'
# - bash: |
#         echo "PR for Image Bumping, Official Branch Cutting"
#         /bin/bash vhdbuilder/scripts/automate_version_bump.sh $(IMAGE_VERSION) $MAPPED_GITHUB_PAT "${BUILD_ID[@]}"
#   env:
#         MAPPED_GITHUB_PAT: $(GITHUB_PAT)
#   displayName: 'Image Version Bumping'
#   condition: eq('${{ parameters.ImageBump }}', true)
# - bash: |
#         echo "PR for Release Notes"
#         /bin/bash vhdbuilder/scripts/automate_release_notes.sh $(IMAGE_VERSION) "${BUILD_ID[@]}" $MAPPED_GITHUB_PAT
#   env:
#         MAPPED_GITHUB_PAT: $(GITHUB_PAT)
#         SKIP_LATEST: $(SKIP_LATEST_RELEASE_NOTES_UPDATE)
#   displayName: 'Release Notes'
#   condition: eq('${{ parameters.ReleaseNotes }}', true)
# - bash: |
#         echo "Creating EV2 artifacts and corresponding SIG release"
#         ls -la vhdbuilder/scripts
#         VHD_BUILD_ID=${BUILD_ID} /bin/bash vhdbuilder/scripts/automate_release.sh
#   displayName: 'Create SIG Release'
#   condition: eq('${{ parameters.CreateRelease }}', true)
