parameters:
    - name: artifactName
      type: string
      default: 1604

steps:
  - bash: |
        m="linuxVhdMode" && \
        echo "Set build mode to $m" && \
        echo "##vso[task.setvariable variable=MODE]$m"
    displayName: Get Build Mode
  - task: UniversalPackages@0
    displayName: Download Asc Baseline
    inputs:
      command: download
      vstsFeed: ASMPackages
      vstsFeedPackage: asc-baseline
      vstsPackageVersion: '1.1.0-268'
      downloadDirectory: vhdbuilder/packer
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Kata CC UVM artifact'
    inputs:
      source: specific
      project: CloudNativeCompute
      pipeline: 318279
      specificBuildWithTriggering: true
      allowPartiallySucceededBuilds: true
      buildVersionToDownload: 'latest'
      downloadType: 'single'
      artifactName: 'drop_container_job_sign_uvm'
      itemPattern: |
        **/kata-containers-igvm-debug.img**
        **/igvm-measurement**
        **/kata-containers-igvm.img**
        **/kata-containers.img**
        **/kata-containers-initrd-base.img**
        **/reference-info-base64**
      downloadPath: $(Build.SourcesDirectory)
    condition: or(eq(variables.OS_SKU, 'CBLMariner'), eq(variables.OS_SKU, 'AzureLinux'))
  - bash: |
      pwd
      ls -R
    displayName: show Directory
  - bash: |
      set -x
      GOPATH="$(go env GOPATH)"
      echo "GOPATH is currently set to $GOPATH"
      export PATH="$PATH:$GOPATH/bin"
      pushd /tmp
      GO111MODULE=on go install cuelang.org/go/cmd/cue@latest
      popd
      cue export ./schemas/manifest.cue > ./parts/linux/cloud-init/artifacts/manifest.json
    displayName: setup cue
  - bash: |
      SKU_NAME=${OS_VERSION} && \
      if [[ "${HYPERV_GENERATION,,}" == "v2" ]]; then SKU_NAME="${SKU_NAME}gen2"; fi && \
      if [[ ${OS_VERSION} == "V2" && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
      if [[ (${OS_VERSION} == "22.04" || ${OS_VERSION} == "24.04") && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
      if [[ (${OS_VERSION} == "18.04" || ${OS_VERSION} == "20.04" || ${OS_VERSION} == "22.04") && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
      if [[ ${OS_VERSION} == "V2" && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
      if [[ "$(FEATURE_FLAGS)" == *"fullgpu"* ]]; then SKU_NAME="${SKU_NAME}gpu"; fi && \
      if [[ "${IMG_SKU}" == "20_04-lts-cvm" ]]; then SKU_NAME="${SKU_NAME}CVM"; fi && \
      if [[ "${IMG_SKU}" == *"minimal"* ]]; then SKU_NAME="${SKU_NAME}minimal"; fi && \
      if [[ "${ENABLE_TRUSTED_LAUNCH}" == "True" ]]; then SKU_NAME="${SKU_NAME}TL"; fi && \
      if [[ ${OS_SKU} != "CBLMariner" && ${OS_SKU} != "AzureLinux" && "${CONTAINER_RUNTIME}" == "containerd" ]]; then SKU_NAME="${SKU_NAME}containerd"; fi && \
      SKU_NAME=$(echo ${SKU_NAME} | tr -d '.') && \
      echo "##vso[task.setvariable variable=SKU_NAME]$SKU_NAME"
      echo "Set SKU_NAME to $SKU_NAME"
    displayName: Set SKU Name
  - bash: |
        echo MODE=$(MODE) && \
        make -f packer.mk run-packer
    retryCountOnTaskFailure: 3
    displayName: Building VHD
  - bash: |
        OS_DISK_URI="$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)" && \
        MANAGED_SIG_ID="$(cat packer-output | grep "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)" && \
        make -f packer.mk scanning-vhd
    retryCountOnTaskFailure: 2
    displayName: Scanning VHD
  - script: |
        OS_DISK_URI="$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)" && \
        MANAGED_SIG_ID="$(cat packer-output | grep "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)" && \
        make -f packer.mk test-building-vhd
    displayName: Run VHD Tests
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        IS_NOT_1804=$( [[ "${OS_VERSION}" != "18.04" ]] && echo true || echo false ) && \
        echo "##vso[task.setvariable variable=IS_NOT_1804]${IS_NOT_1804}"
    displayName: 'Check if OS version is not 18.04'
  - task: CopyFiles@2
    condition: eq(variables['IS_NOT_1804'], 'true')
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'trivy-report.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy trivy report
  - task: CopyFiles@2
    condition: eq(variables['IS_NOT_1804'], 'true')
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'trivy-images-table.txt'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy trivy table
  - task: PublishPipelineArtifact@0
    inputs:
        artifactName: 'vhd-release-notes-${{ parameters.artifactName }}'
        targetPath: 'release-notes.txt'
    displayName: publish release notes
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'release-notes.txt'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy release notes
  - task: PublishPipelineArtifact@0
    inputs:
        artifactName: 'vhd-image-bom-${{ parameters.artifactName }}'
        targetPath: 'image-bom.json'
    displayName: publish container image list
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'image-bom.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy image bom
  - bash: |
      echo MODE=$(MODE) && \
      PKR_RG_NAME="$(cat packer-output | grep "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
      captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      IMPORTED_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      IMAGE_NAME="${SIG_IMAGE_NAME}-${captured_sig_version}" && \
      make -f packer.mk cleanup
    displayName: Clean Up Packer Generated Resources
    condition: always()
  - bash: |
        echo MODE=$(MODE) && \
        captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_GALLERY_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_gallery_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        make -f packer.mk convert-sig-to-classic-storage-account-blob
    displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
  - bash: |
        echo MODE=$(MODE) && \
        captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        VHD_NAME="${captured_sig_version}.vhd" && \
        make -f packer.mk generate-sas
    displayName: Getting Shared Access Signature URI
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
  - task: PublishPipelineArtifact@1
    displayName: Publish publishing-info 
    inputs:
      artifactName: 'publishing-info-${{ parameters.artifactName }}'
      targetPath: 'vhd-publishing-info.json'
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'vhd-publishing-info.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy vhd publishing info 
  - task: UniversalPackages@0
    displayName: Universal Publish
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      command: publish
      publishDirectory: 'vhd-publishing-info.json'
      vstsFeedPublish: 'CloudNativeCompute/AKS-Linux-VHD-Artifacts'
      vstsFeedPackagePublish: 'publishing-info-${{ parameters.artifactName }}'
      packagePublishDescription: 'VHD publishing info ${{ parameters.artifactName }}'
      versionOption: minor
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)'
    displayName: Publish bulk artifacts # these "bulk" artifacts are the folders, per SKU, that contain all other artifacts (publishing-info, image-bom, trivy reports, etc.)
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
