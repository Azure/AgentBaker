parameters:
  - name: artifactName
    type: string
    default: 1604
  - name: useOverrides
    type: boolean
    default: false
  - name: overrideBranch
    type: string
    default: master

jobs:
- job: build
  dependsOn: []
  steps:
    - checkout: self
      # s is the default path for repositories - if we don't set this when using multiple repsositories, then it is the repo name
      # "s/AgentBaker", but most of the pipeline variables still refer to "s" and many of the scripts below fail.
      path: s
      fetchTags: false
      fetchDepth: 1
    - checkout: git://CloudNativeCompute/aks-rp@${{ parameters.overrideBranch }}
      path: aks-rp
      fetchDepth: 1
      fetchTags: false
      lfs: false
      condition: eq('${{ parameters.useOverrides }}', true)
    - bash: |
        set -euo pipefail
        # Just copy components.json. If anything else is needed, then someone can modify the pipeline in an emergency.
        # we check for existence of both src and destination file because if neither of those exist then the override will fail.
        COMPONENT_JSON_SRC=$(Pipeline.Workspace)/aks-rp/agentbakersvc/overrides/components.json
        COMPONENT_JSON_DEST=./parts/linux/cloud-init/artifacts/components.json
        if [ ! -f "${COMPONENT_JSON_DEST}" ]; then
          echo "destination components.json file does not exist, not copying as it must have been moved in a refactor: ${COMPONENT_JSON_DEST}"
          exit 1
        fi
        echo "Found file to overwrite: ${COMPONENT_JSON_DEST}"

        if [ ! -f "${COMPONENT_JSON_SRC}" ]; then
          echo "src components.json file does not exist, not copying: ${COMPONENT_JSON_SRC}"
          exit 1
        fi
        echo "Found source components.json to use for overrides: ${COMPONENT_JSON_SRC}"
        
        echo "Overwriting component.json from ${COMPONENT_JSON_SRC} -> ${COMPONENT_JSON_DEST}"
        cp -af "${COMPONENT_JSON_SRC}" "${COMPONENT_JSON_DEST}"
      displayName: Apply Overrides
      condition: eq('${{ parameters.useOverrides }}', true)
    - task: UniversalPackages@0
      displayName: Download Asc Baseline
      inputs:
        command: download
        vstsFeed: ASMPackages
        vstsFeedPackage: asc-baseline
        vstsPackageVersion: '1.1.0-268'
        downloadDirectory: vhdbuilder/packer
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Kata CC UVM artifact'
      inputs:
        source: specific
        project: CloudNativeCompute
        pipeline: 318279
        specificBuildWithTriggering: true
        allowPartiallySucceededBuilds: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'drop_container_job_sign_uvm'
        itemPattern: |
          **/kata-containers-igvm-debug.img**
          **/igvm-measurement**
          **/kata-containers-igvm.img**
          **/kata-containers.img**
          **/kata-containers-initrd-base.img**
          **/reference-info-base64**
        downloadPath: $(Build.SourcesDirectory)
      condition: or(eq(variables.OS_SKU, 'CBLMariner'), eq(variables.OS_SKU, 'AzureLinux'))
    - bash: |
        pwd
        ls -R
      displayName: show Directory
    - bash: |
        set -x
        GOPATH="$(go env GOPATH)"
        echo "GOPATH is currently set to $GOPATH"
        export PATH="$PATH:$GOPATH/bin"
        pushd /tmp
        GO111MODULE=on go install cuelang.org/go/cmd/cue@latest
        popd
        cue export ./schemas/manifest.cue > ./parts/linux/cloud-init/artifacts/manifest.json
      displayName: setup cue
    - bash: |
        SKU_NAME=${OS_VERSION} && \
        if [[ "${HYPERV_GENERATION,,}" == "v2" ]]; then SKU_NAME="${SKU_NAME}gen2"; fi && \
        if [[ ${OS_VERSION} == "V2" && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
        if [[ (${OS_VERSION} == "22.04" || ${OS_VERSION} == "24.04") && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
        if [[ (${OS_VERSION} == "18.04" || ${OS_VERSION} == "20.04" || ${OS_VERSION} == "22.04") && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
        if [[ ${OS_VERSION} == "V2" && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
        if [[ "$(FEATURE_FLAGS)" == *"fullgpu"* ]]; then SKU_NAME="${SKU_NAME}gpu"; fi && \
        if [[ "${IMG_SKU}" == "20_04-lts-cvm" ]]; then SKU_NAME="${SKU_NAME}CVM"; fi && \
        if [[ "${IMG_SKU}" == *"minimal"* ]]; then SKU_NAME="${SKU_NAME}minimal"; fi && \
        if [[ "${ENABLE_TRUSTED_LAUNCH}" == "True" ]]; then SKU_NAME="${SKU_NAME}TL"; fi && \
        if [[ ${OS_SKU} != "CBLMariner" && ${OS_SKU} != "AzureLinux" && "${CONTAINER_RUNTIME}" == "containerd" ]]; then SKU_NAME="${SKU_NAME}containerd"; fi && \
        SKU_NAME=$(echo ${SKU_NAME} | tr -d '.') && \
        echo "##vso[task.setvariable variable=SKU_NAME]$SKU_NAME"
        echo "Set SKU_NAME to $SKU_NAME"
      displayName: Set SKU Name
    - bash: |
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e POOL_NAME=$(POOL_NAME) \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e AZURE_VM_SIZE=$(AZURE_VM_SIZE) \
        -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
        -e ENVIRONMENT=${ENVIRONMENT} \
        -e PACKER_BUILD_LOCATION=${PACKER_BUILD_LOCATION} \
        -e FEATURE_FLAGS=$(FEATURE_FLAGS) \
        -e GIT_VERSION=$(Build.SourceVersion) \
        -e BUILD_DEFINITION_NAME="$(Build.DefinitionName)" \
        -e BUILD_ID=$(Build.BuildId) \
        -e BUILD_NUMBER=$(Build.BuildNumber) \
        -e OS_VERSION=$(OS_VERSION) \
        -e OS_SKU=${OS_SKU} \
        -e SKU_NAME=$(SKU_NAME) \
        -e HYPERV_GENERATION=${HYPERV_GENERATION} \
        -e OS_TYPE="Linux" \
        -e IMG_PUBLISHER=${IMG_PUBLISHER} \
        -e IMG_OFFER=${IMG_OFFER} \
        -e IMG_SKU=${IMG_SKU} \
        -e IMG_VERSION=${IMG_VERSION} \
        -e MODE=linuxVhdMode \
        -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
        -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
        -e BRANCH=$(Build.SourceBranch) \
        -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
        -e CONTAINER_RUNTIME=${CONTAINER_RUNTIME} \
        -e TELEPORTD_PLUGIN_DOWNLOAD_URL=${TELEPORTD_PLUGIN_DOWNLOAD_URL} \
        -e ENABLE_FIPS=${ENABLE_FIPS} \
        -e ARCHITECTURE=${ARCHITECTURE} \
        -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
        -e SGX_INSTALL=${SGX_INSTALL} \
        -e ENABLE_CGROUPV2=${ENABLE_CGROUPV2} \
        -e IMAGE_VERSION=${IMAGE_VERSION} \
        -e PRIVATE_PACKAGES_URL="${PRIVATE_PACKAGES_URL}" \
        -e AZURE_MSI_RESOURCE_STRING=${AZURE_MSI_RESOURCE_STRING} \
        ${CONTAINER_IMAGE} make -f packer.mk run-packer
      retryCountOnTaskFailure: 3
      displayName: Building VHD
    - bash: |
        OS_DISK_URI="$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)" && \
        MANAGED_SIG_ID="$(cat packer-output | grep "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)" && \
        PKR_RG_NAME="$(cat packer-output | grep "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
        CAPTURED_SIG_VERSION="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        IMPORTED_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        IMAGE_NAME="${SIG_IMAGE_NAME}-${CAPTURE_SIG_VERSION}" && \
        SIG_GALLERY_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_gallery_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        VHD_NAME="${captured_sig_version}.vhd" && \
        echo "##vso[task.setvariable variable=OS_DISK_URI;isoutput=true]$OS_DISK_URI" && echo "set OS_DISK_URI to: $OS_DISK_URI" && \
        echo "##vso[task.setvariable variable=MANAGED_SIG_ID;isoutput=true]$MANAGED_SIG_ID" && echo "set MANAGED_SIG_ID to: $MANAGED_SIG_ID" && \
        echo "##vso[task.setvariable variable=PKR_RG_NAME;isoutput=true]$PKR_RG_NAME" && echo "set PKR_RG_NAME to: $PKR_RG_NAME" && \
        echo "##vso[task.setvariable variable=CAPTURED_SIG_VERSION;isoutput=true]$CAPTURED_SIG_VERSION" && echo "set CAPTURED_SIG_VERSION to: $CAPTURED_SIG_VERSION" && \
        echo "##vso[task.setvariable variable=IMPORTED_IMAGE_NAME;isoutput=true]$IMPORTED_IMAGE_NAME" && echo "set IMPORTED_IMAGE_NAME to: $IMPORTED_IMAGE_NAME" && \
        echo "##vso[task.setvariable variable=SIG_IMAGE_NAME;isoutput=true]$SIG_IMAGE_NAME" && echo "set SIG_IMAGE_NAME to: $SIG_IMAGE_NAME" && \
        echo "##vso[task.setvariable variable=IMAGE_NAME;isoutput=true]$IMAGE_NAME" && echo "set IMAGE_NAME to: $IMAGE_NAME" && \
        echo "##vso[task.setvariable variable=SIG_GALLERY_NAME;isoutput=true]$SIG_GALLERY_NAME" && echo "set SIG_GALLERY_NAME to: $SIG_GALLERY_NAME" && \
        echo "##vso[task.setvariable variable=VHD_NAME;isoutput=true]$VHD_NAME" && echo "set VHD_NAME to: $VHD_NAME"
      name: packerVariables
      displayName: Set packer runtime variables
      condition: succeeded()
    - bash: |
        captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_GALLERY_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_gallery_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e RESOURCE_GROUP_NAME="${AZURE_RESOURCE_GROUP_NAME}" \
        -e PACKER_BUILD_LOCATION="${PACKER_BUILD_LOCATION}" \
        -e MODE=linuxVhdMode \
        -e OS_TYPE="Linux" \
        -e CLASSIC_BLOB=${CLASSIC_BLOB} \
        -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
        -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
        -e CAPTURED_SIG_VERSION=${captured_sig_version} \
        -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
        -e AZURE_MSI_RESOURCE_STRING=$(AZURE_MSI_RESOURCE_STRING) \
        ${CONTAINER_IMAGE} make -f packer.mk convert-sig-to-classic-storage-account-blob
      displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - bash: |
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e RESOURCE_GROUP_NAME="${AZURE_RESOURCE_GROUP_NAME}" \
        -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
        -e CAPTURED_SIG_VERSION=${captured_sig_version} \
        -e OUTPUT_STORAGE_ACCOUNT_NAME=${OUTPUT_STORAGE_ACCOUNT_NAME} \
        -e OUTPUT_STORAGE_CONTAINER_NAME=${OUTPUT_STORAGE_CONTAINER_NAME} \
        -e STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
        -e VHD_NAME=${VHD_NAME} \
        -e MODE=linuxVhdMode \
        -e OS_NAME="Linux" \
        -e OS_TYPE="Linux" \
        -e SKU_NAME=$(SKU_NAME) \
        -e OFFER_NAME=${OS_SKU} \
        -e IMG_PUBLISHER=${IMG_PUBLISHER} \
        -e IMG_OFFER=${IMG_OFFER} \
        -e IMG_SKU=${IMG_SKU} \
        -e IMG_VERSION=${IMG_VERSION} \
        -e HYPERV_GENERATION=${HYPERV_GENERATION} \
        -e ARCHITECTURE=${ARCHITECTURE} \
        -e IMAGE_VERSION=${IMAGE_VERSION} \
        ${CONTAINER_IMAGE} make -f packer.mk generate-sas
      displayName: Getting Shared Access Signature URI
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'vhd-release-notes-${{ parameters.artifactName }}'
        targetPath: 'release-notes.txt'
      displayName: Publish release notes
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'vhd-image-bom-${{ parameters.artifactName }}'
        targetPath: 'image-bom.json'
      displayName: Publish container image list
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'publishing-info-${{ parameters.artifactName }}'
        targetPath: 'vhd-publishing-info.json'
      displayName: Publish publishing-info
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'build-performance-data-${{ parameters.artifactName }}'
        targetPath: 'vhd-build-performance-data.json'
      displayName: Publish build performance data
      condition: succeeded()
- job: test
  dependsOn: build
  timeoutInMinutes: 60
  variables:
    OS_DISK_URI: $[ dependencies.build.outputs['packerVariables.OS_DISK_URI'] ]
    MANAGED_SIG_ID: $[ dependencies.build.outputs['packerVariables.MANAGED_SIG_ID'] ]
    SIG_IMAGE_NAME: $[ dependencies.build.outputs['packerVariables.SIG_IMAGE_NAME'] ]
    SIG_GALLERY_NAME: $[ dependencies.build.outputs['packerVariables.SIG_GALLERY_NAME'] ]
  steps:
    - script: |
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
        -e OS_DISK_URI=$(OS_DISK_URI) \
        -e MANAGED_SIG_ID=$(MANAGED_SIG_ID) \
        -e PACKER_BUILD_LOCATION=${PACKER_BUILD_LOCATION} \
        -e CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"docker"} \
        -e OS_VERSION=${OS_VERSION} \
        -e OS_SKU=${OS_SKU} \
        -e OS_TYPE="Linux" \
        -e IMG_SKU=${IMG_SKU} \
        -e MODE=linuxVhdMode \
        -e VHD_DEBUG=${VHD_DEBUG} \
        -e FEATURE_FLAGS=$(FEATURE_FLAGS) \
        -e SIG_GALLERY_NAME=$(SIG_GALLERY_NAME) \
        -e SIG_IMAGE_NAME=$(SIG_IMAGE_NAME) \
        -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
        -e ENABLE_FIPS=${ENABLE_FIPS} \
        -e ARCHITECTURE=${ARCHITECTURE} \
        -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
        -e SGX_INSTALL=${SGX_INSTALL} \
        -e ENABLE_CGROUPV2=${ENABLE_CGROUPV2} \
        -e GIT_BRANCH=$(Build.SourceBranch) \
        ${CONTAINER_IMAGE} make -f packer.mk test-building-vhd
      displayName: Run VHD Tests
- job: scan
  dependsOn: build
  timeoutInMinutes: 60
  variables:
    MANAGED_SIG_ID: $[ dependencies.build.outputs['packerVariables.MANAGED_SIG_ID'] ]
  steps:
    - bash: |
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
        -e BLOB_STORAGE_NAME=${BLOB_STORAGE_NAME} \
        -e CLASSIC_BLOB=${CLASSIC_BLOB} \
        -e BUILD_ID=$(Build.BuildId) \
        -e MANAGED_SIG_ID=$(MANAGED_SIG_ID) \
        -e PACKER_BUILD_LOCATION=${PACKER_BUILD_LOCATION} \
        -e OS_VERSION=${OS_VERSION} \
        -e OS_SKU=${OS_SKU} \
        -e OS_TYPE="Linux" \
        -e VHD_DEBUG=${VHD_DEBUG} \
        -e FEATURE_FLAGS=$(FEATURE_FLAGS) \
        -e ARCHITECTURE=${ARCHITECTURE} \
        -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
        ${CONTAINER_IMAGE} make -f packer.mk scanning-vhd
      retryCountOnTaskFailure: 2
      displayName: Scan VHD
    - task: CopyFiles@2
      condition: ne(variables['OS_VERSION'], '18.04')
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'trivy-report.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: Upload trivy report
    - task: CopyFiles@2
      condition: ne(variables['OS_VERSION'], '18.04')
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'trivy-images-table.txt'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: Upload trivy table
- job: cleanup
  dependsOn: build
  condition: always()
  timeoutInMinutes: 60
  variables:
    PKR_RG_NAME: $[ dependencies.build.outputs['packerVariables.PKR_RG_NAME'] ]
    CAPTURED_SIG_VERSION: $[ dependencies.build.outputs['packerVariables.CAPTURED_SIG_VERSION'] ]
    IMPORTED_IMAGE_NAME: $[ dependencies.build.outputs['packerVariables.IMPORTED_IMAGE_NAME'] ]
    SIG_IMAGE_NAME: $[ dependencies.build.outputs['packerVariables.SIG_IMAGE_NAME'] ]
    IMAGE_NAME: $[ dependencies.build.outputs['packerVariables.IMAGE_NAME'] ]
    SIG_GALLERY_NAME: $[ dependencies.build.outputs['packerVariables.SIG_GALLERY_NAME'] ]
  steps:
  - bash: |
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
      -e PKR_RG_NAME=$(PKR_RG_NAME) \
      -e MODE=linuxVhdMode \
      -e DRY_RUN=${DRY_RUN} \
      -e OS_TYPE="Linux" \
      -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
      -e IMAGE_NAME=$(IMAGE_NAME) \
      -e CAPTURED_SIG_VERSION=$(CAPTURED_SIG_VERSION) \
      -e IMPORTED_IMAGE_NAME=$(IMPORTED_IMAGE_NAME) \
      -e SIG_GALLERY_NAME=$(SIG_GALLERY_NAME) \
      -e SIG_IMAGE_NAME=$(SIG_IMAGE_NAME) \
      -e ARCHITECTURE=${ARCHITECTURE} \
      ${CONTAINER_IMAGE} make -f packer.mk cleanup
    displayName: Clean Up Packer Generated Resources