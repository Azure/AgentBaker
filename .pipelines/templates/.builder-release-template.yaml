parameters:
    - name: artifactName
      type: string
      default: 1604

steps:
  - bash: |
        if [[ $(HYPERV_GENERATION) == "V2" ]]; then m="gen2Mode"; elif [[ -n ${SIG_GALLERY_NAME} && -n ${SIG_IMAGE_NAME} && -n ${SIG_IMAGE_VERSION} ]]; then m="sigMode"; else m="default"; fi && \
        echo "Set build mode to $m" && \
        echo "##vso[task.setvariable variable=MODE]$m"
    displayName: Get Build Mode
  - task: UniversalPackages@0
    displayName: Download Asc Baseline
    inputs:
      command: download
      vstsFeed: ASMPackages
      vstsFeedPackage: asc-baseline
      vstsPackageVersion: '1.0.0-35'
      downloadDirectory: vhdbuilder/packer
  - bash: |
      pwd
      ls -R
    displayName: show Directory
  - bash: |
        echo MODE=$(MODE) && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e CLIENT_ID=${CLIENT_ID} \
        -e CLIENT_SECRET="$(CLIENT_SECRET)" \
        -e TENANT_ID=${TENANT_ID} \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e AZURE_VM_SIZE=$(AZURE_VM_SIZE) \
        -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
        -e AZURE_LOCATION=${AZURE_LOCATION} \
        -e FEATURE_FLAGS=$(FEATURE_FLAGS) \
        -e GIT_VERSION=$(Build.SourceVersion) \
        -e BUILD_ID=$(Build.BuildId) \
        -e BUILD_NUMBER=$(Build.BuildNumber) \
        -e OS_VERSION=$(OS_VERSION) \
        -e OS_SKU=${OS_SKU} \
        -e HYPERV_GENERATION=${HYPERV_GENERATION} \
        -e OS_TYPE="Linux" \
        -e MODE=$(MODE) \
        -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
        -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
        -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
        -e CONTAINER_RUNTIME=${CONTAINER_RUNTIME} \
        -e TELEPORTD_PLUGIN_DOWNLOAD_URL=${TELEPORTD_PLUGIN_DOWNLOAD_URL} \
        -e IMPORT_IMAGE_URL=${IMPORT_IMAGE_URL} \
        -e IMPORT_IMAGE_SAS=${IMPORT_IMAGE_SAS} \
        -e ENABLE_FIPS=${ENABLE_FIPS} \
        ${CONTAINER_IMAGE} make -f packer.mk run-packer
    displayName: Building VHD
  - task: PublishPipelineArtifact@0
    inputs:
        artifactName: 'vhd-release-notes-${{ parameters.artifactName }}'
        targetPath: 'release-notes.txt'
  - bash: |
        echo MODE=$(MODE) && \
        OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e CLIENT_ID=${CLIENT_ID} \
        -e CLIENT_SECRET="$(CLIENT_SECRET)" \
        -e TENANT_ID=${TENANT_ID} \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e CLASSIC_BLOB=${CLASSIC_BLOB} \
        -e CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" \
        -e OS_DISK_SAS=${OS_DISK_SAS} \
        ${CONTAINER_IMAGE} make -f packer.mk az-copy
    displayName: Copying resource to Classic Storage Account
    condition: and(eq(variables.DRY_RUN, 'False'), eq(variables['MODE'], 'default'))
  - bash: |
      echo MODE=$(MODE) && \
      PKR_RG_NAME="$(cat packer-output | grep "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
      SA_NAME="$(cat packer-output | grep "storage name:" | cut -d " " -f 3)" && \
      create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      if [[ $(MODE) == "gen2Mode" ]]; then IMAGE_NAME="1.0.${create_time}"; else IMAGE_NAME=$SIG_IMAGE_NAME; fi && \
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e CLIENT_ID=${CLIENT_ID} \
      -e CLIENT_SECRET="$(CLIENT_SECRET)" \
      -e TENANT_ID=${TENANT_ID} \
      -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
      -e PKR_RG_NAME=${PKR_RG_NAME} \
      -e MODE=${MODE} \
      -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
      -e SA_NAME=${SA_NAME} \
      -e IMAGE_NAME=${IMAGE_NAME} \
      ${CONTAINER_IMAGE} make -f packer.mk cleanup
    displayName: Clean Up Packer Generated Resources
    condition: always()
  - bash: |
        echo MODE=$(MODE) && \
        create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e CLIENT_ID=${CLIENT_ID} \
        -e CLIENT_SECRET="$(CLIENT_SECRET)" \
        -e TENANT_ID=${TENANT_ID} \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e RESOURCE_GROUP_NAME="${AZURE_RESOURCE_GROUP_NAME}" \
        -e CREATE_TIME="${create_time}" \
        -e LOCATION="${AZURE_LOCATION}" \
        -e OS_TYPE="Linux" \
        -e CLASSIC_BLOB=${CLASSIC_BLOB} \
        -e CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" \
        ${CONTAINER_IMAGE} make -f packer.mk convert-sig-to-classic-storage-account-blob
    displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
    condition: and(eq(variables.DRY_RUN, 'False'), eq(variables['MODE'], 'gen2Mode'))
  - bash: |
        echo MODE=$(MODE) && \
        if [[ $(MODE) == "gen2Mode" ]]; then create_time="$(cat vhdbuilder/packer/settings.json | grep "create_time" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"; \
        [ -n "${create_time}" ] && VHD_NAME="1.0.${create_time}.vhd"; \
        SKU_NAME="1804gen2"; else \
        OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)"; \
        VHD_NAME="$(echo $OS_DISK_SAS | cut -d "/" -f 8 | cut -d "?" -f 1)"; \
        SKU_NAME=$OS_VERSION; fi && \
        if [[ ${OS_VERSION} == "18.04" && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
        if [[ "$(FEATURE_FLAGS)" == *"fullgpu"* ]]; then SKU_NAME="${SKU_NAME}gpu"; fi && \
        if [[ "$(CONTAINER_RUNTIME)" == "containerd" ]]; then SKU_NAME="${SKU_NAME}containerd"; fi && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e CLIENT_ID=${CLIENT_ID} \
        -e CLIENT_SECRET="$(CLIENT_SECRET)" \
        -e TENANT_ID=${TENANT_ID} \
        -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
        -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
        -e STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
        -e VHD_NAME=${VHD_NAME} \
        -e OS_NAME="Linux" \
        -e SKU_NAME=${SKU_NAME} \
        -e OFFER_NAME="Ubuntu" \
        -e HYPERV_GENERATION=${HYPERV_GENERATION} \
        -e IMAGE_VERSION=${IMAGE_VERSION} \
        ${CONTAINER_IMAGE} make -f packer.mk generate-sas
    displayName: Getting Shared Access Signature URI
    condition: and(eq(variables.DRY_RUN, 'False'), or(eq(variables['MODE'], 'gen2Mode'), eq(variables['MODE'], 'default')))
  - task: PublishPipelineArtifact@1
    inputs:
        artifactName: 'publishing-info-${{ parameters.artifactName }}'
        targetPath: 'vhd-publishing-info.json'
    condition: and(eq(variables.DRY_RUN, 'False'), ne(variables['MODE'], 'sigMode'))
  - task: UniversalPackages@0
    displayName: Universal Publish
    inputs:
      command: publish
      publishDirectory: 'vhd-publishing-info.json'
      vstsFeedPublish: 'CloudNativeCompute/AKS-Linux-VHD-Artifacts'
      vstsFeedPackagePublish: 'publishing-info-${{ parameters.artifactName }}'
      packagePublishDescription: 'VHD publishing info ${{ parameters.artifactName }}'
      versionOption: minor