parameters:
  - name: artifactName
    type: string
    default: 1604
  - name: useOverrides
    type: boolean
    default: false
  - name: overrideBranch
    type: string
    default: master

steps:
  - checkout: self
    # s is the default path for repositories - if we don't set this when using multiple repsositories, then it is the repo name
    # "s/AgentBaker", but most of the pipeline variables still refer to "s" and many of the scripts below fail.
    path: s
    fetchTags: false
    fetchDepth: 1
  - checkout: git://CloudNativeCompute/aks-rp@${{ parameters.overrideBranch }}
    path: aks-rp
    fetchDepth: 1
    fetchTags: false
    lfs: false
    condition: eq('${{ parameters.useOverrides }}', true)

  - bash: |
      set -euo pipefail
      # Just copy components.json. If anything else is needed, then someone can modify the pipeline in an emergency.
      # we check for existence of both src and destination file because if neither of those exist then the override will fail.
      COMPONENT_JSON_SRC=$(Pipeline.Workspace)/aks-rp/agentbakersvc/overrides/components.json
      COMPONENT_JSON_DEST=./parts/linux/cloud-init/artifacts/components.json
      if [ ! -f "${COMPONENT_JSON_DEST}" ]; then
        echo "destination components.json file does not exist, not copying as it must have been moved in a refactor: ${COMPONENT_JSON_DEST}"
        exit 1
      fi
      echo "Found file to overwrite: ${COMPONENT_JSON_DEST}"

      if [ ! -f "${COMPONENT_JSON_SRC}" ]; then
        echo "src components.json file does not exist, not copying: ${COMPONENT_JSON_SRC}"
        exit 1
      fi
      echo "Found source components.json to use for overrides: ${COMPONENT_JSON_SRC}"
      
      echo "Overwriting component.json from ${COMPONENT_JSON_SRC} -> ${COMPONENT_JSON_DEST}"
      cp -af "${COMPONENT_JSON_SRC}" "${COMPONENT_JSON_DEST}"
    displayName: Apply Overrides
    condition: eq('${{ parameters.useOverrides }}', true)
  
  - bash: |
      m="linuxVhdMode" && \
      echo "Set build mode to $m" && \
      echo "##vso[task.setvariable variable=MODE]$m"
    displayName: Get Build Mode

  - task: UniversalPackages@0
    displayName: Download Asc Baseline
    inputs:
      command: download
      vstsFeed: ASMPackages
      vstsFeedPackage: asc-baseline
      vstsPackageVersion: '1.1.0-268'
      downloadDirectory: vhdbuilder/packer

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Kata CC UVM artifact'
    condition: or(eq(variables.OS_SKU, 'CBLMariner'), eq(variables.OS_SKU, 'AzureLinux'))
    inputs:
      source: specific
      project: CloudNativeCompute
      pipeline: 318279
      specificBuildWithTriggering: true
      allowPartiallySucceededBuilds: true
      buildVersionToDownload: 'latest'
      downloadType: 'single'
      artifactName: 'drop_container_job_sign_uvm'
      itemPattern: |
        **/kata-containers-igvm-debug.img**
        **/igvm-measurement**
        **/kata-containers-igvm.img**
        **/kata-containers.img**
        **/kata-containers-initrd-base.img**
        **/reference-info-base64**
      downloadPath: $(Build.SourcesDirectory)

  - bash: |
      pwd
      ls -R
    displayName: Show Directory

  - bash: |
      set -x
      GOPATH="$(go env GOPATH)"
      echo "GOPATH is currently set to $GOPATH"
      export PATH="$PATH:$GOPATH/bin"
      pushd /tmp
      GO111MODULE=on go install cuelang.org/go/cmd/cue@latest
      popd
      cue export ./schemas/manifest.cue > ./parts/linux/cloud-init/artifacts/manifest.json
    displayName: Setup Cue

  - bash: |
      SKU_NAME=${OS_VERSION} && \
      if [[ "${HYPERV_GENERATION,,}" == "v2" ]]; then SKU_NAME="${SKU_NAME}gen2"; fi && \
      if [[ "${ARCHITECTURE,,}" == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
      if [[ "${ENABLE_FIPS,,}" == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
      if [[ "$(FEATURE_FLAGS)" == *"fullgpu"* ]]; then SKU_NAME="${SKU_NAME}gpu"; fi && \
      if [[ "${IMG_SKU}" == "20_04-lts-cvm" ]]; then SKU_NAME="${SKU_NAME}CVM"; fi && \
      if [[ "${IMG_SKU}" == *"minimal"* ]]; then SKU_NAME="${SKU_NAME}minimal"; fi && \
      if [[ "${ENABLE_TRUSTED_LAUNCH}" == "True" ]]; then SKU_NAME="${SKU_NAME}TL"; fi && \
      if [[ ${OS_SKU} != "CBLMariner" && ${OS_SKU} != "AzureLinux" && "${CONTAINER_RUNTIME}" == "containerd" ]]; then SKU_NAME="${SKU_NAME}containerd"; fi && \
      SKU_NAME=$(echo ${SKU_NAME} | tr -d '.') && \
      echo "##vso[task.setvariable variable=SKU_NAME]$SKU_NAME"
      echo "Set SKU_NAME to $SKU_NAME"
    displayName: Set SKU Name

  - bash: make -f packer.mk run-packer
    displayName: Build VHD
    retryCountOnTaskFailure: 3
    env:
      # Azure Variables - Common variables for Azure resources
      POOL_NAME: $(POOL_NAME)
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
      AZURE_VM_SIZE: $(AZURE_VM_SIZE)
      AZURE_RESOURCE_GROUP_NAME: $(AZURE_RESOURCE_GROUP_NAME)
      envIRONMENT: $(envIRONMENT)
      PACKER_BUILD_LOCATION: $(PACKER_BUILD_LOCATION)
      SIG_GALLERY_NAME: $(SIG_GALLERY_NAME)
      SIG_IMAGE_NAME: $(SIG_IMAGE_NAME)
      SIG_IMAGE_VERSION: $(SIG_IMAGE_VERSION)

      # Template parameters - Unique for each SKU. These are passed from each build stage in vsts-vhd-builder-release.yaml
      FEATURE_FLAGS: $(FEATURE_FLAGS)
      OS_VERSION: $(OS_VERSION)
      OS_SKU: $(OS_SKU)
      HYPERV_GENERATION: $(HYPERV_GENERATION)
      IMG_PUBLISHER: ${IMG_PUBLISHER}
      IMG_OFFER: $(IMG_OFFER)
      IMG_SKU: $(IMG_SKU)
      IMG_VERSION: $(IMG_VERSION)
      CONTAINER_RUNTIME: $(CONTAINER_RUNTIME)
      ENABLE_FIPS: $(ENABLE_FIPS)
      ARCHITECTURE: $(ARCHITECTURE)
      ENABLE_TRUSTED_LAUNCH: $(ENABLE_TRUSTED_LAUNCH)
      SGX_INSTALL: $(SGX_INSTALL)
      ENABLE_CGROUPV2: $(ENABLE_CGROUPV2)

      # Build Variables - Azure Pipelines specific variables
      GIT_VERSION: $(Build.SourceVersion)
      BUILD_DEFINITION_NAME: $(Build.DefinitionName)
      BUILD_ID: $(Build.BuildId)
      BUILD_NUMBER: $(Build.BuildNumber)
      BRANCH: $(Build.SourceBranch)

      # Misc - Variables dynamically defined in code or the pipeline
      OS_TYPE: "Linux"
      SKU_NAME: $(SKU_NAME)
      MODE: $(MODE)
      IMAGE_VERSION: $(IMAGE_VERSION)

      # Download URLs
      PRIVATE_PACKAGES_URL: (PRIVATE_PACKAGES_URL)
      TELEPORTD_PLUGIN_DOWNLOAD_URL: $(TELEPORTD_PLUGIN_DOWNLOAD_URL)

  - bash: |
      echo -e "Setting variables for use for the remainder of the pipeline..."
      echo "##vso[task.setvariable variable=OS_DISK_URI]$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)"
      echo "##vso[task.setvariable variable=MANAGED_SIG_ID]$(cat packer-output | grep "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)"
      echo "##vso[task.setvariable variable=SIG_GALLERY_NAME]$(cat vhdbuilder/packer/settings.json | grep "sig_gallery_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"
      echo "##vso[task.setvariable variable=CAPTURED_SIG_VERSION]$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"
      echo "##vso[task.setvariable variable=IMPORTED_IMAGE_NAME]$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"
      echo "##vso[task.setvariable variable=SIG_IMAGE_NAME]$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"
      echo "##vso[task.setvariable variable=IMAGE_NAME]${SIG_IMAGE_NAME}-${CAPTURED_SIG_VERSION}"
      echo "##vso[task.setvariable variable=BUILD_PERF_DATA_FILE]vhd-build-performance-data.json"
      echo "##vso[task.setvariable variable=IS_NOT_1804]$( [[ "${OS_VERSION}" != "18.04" ]] && echo true || echo false )"
      echo "##vso[task.setvariable variable=VHD_NAME]$(CAPTURED_SIG_VERSION).vhd"
    displayName: Set Pipeline Variables

  - bash: make -f packer.mk test-scan-and-cleanup
    displayName: Test, Scan, and Cleanup
    condition: always()
    env:
      # Azure Variables - Common variables for Azure resources
      POOL_NAME: $(POOL_NAME)
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
      AZURE_VM_SIZE: $(AZURE_VM_SIZE)
      AZURE_RESOURCE_GROUP_NAME: $(AZURE_RESOURCE_GROUP_NAME)
      ENVIRONMENT: $(ENVIRONMENT)
      SIG_GALLERY_NAME: $(SIG_GALLERY_NAME)
      SIG_IMAGE_NAME: $(SIG_IMAGE_NAME)
      SIG_IMAGE_VERSION: $(SIG_IMAGE_VERSION)
      BLOB_STORAGE_NAME: $(BLOB_STORAGE_NAME)
      CLASSIC_BLOB: $(CLASSIC_BLOB)
      PKR_RG_NAME: $(PKR_RG_NAME)
      SCANNING_MSI_RESOURCE_ID: $(SCANNING_MSI_RESOURCE_ID)
      KUSTO_ENDPOINT: $(KUSTO_ENDPOINT)
      KUSTO_DATABASE: $(KUSTO_DATABASE)
      KUSTO_TABLE: $(KUSTO_TABLE)
      UMSI_RESOURCE_ID: $(UMSI_RESOURCE_ID)
      UMSI_PRINCIPAL_ID: $(UMSI_PRINCIPAL_ID)
      UMSI_CLIENT_ID: $(UMSI_CLIENT_ID)
      ACCOUNT_NAME: $(ACCOUNT_NAME)
      BLOB_URL: $(BLOB_URL)
      SEVERITY: $(SEVERITY)
      MODULE_VERSION: $(MODULE_VERSION)

      # Template parameters - Unique for each SKU. These are passed from each build stage in vsts-vhd-builder-release.yaml
      FEATURE_FLAGS: $(FEATURE_FLAGS)
      OS_VERSION: $(OS_VERSION)
      OS_SKU: $(OS_SKU)
      HYPERV_GENERATION: $(HYPERV_GENERATION)
      IMG_PUBLISHER: ${IMG_PUBLISHER}
      IMG_OFFER: $(IMG_OFFER)
      IMG_SKU: $(IMG_SKU)
      IMG_VERSION: $(IMG_VERSION)
      CONTAINER_RUNTIME: $(CONTAINER_RUNTIME)
      ENABLE_FIPS: $(ENABLE_FIPS)
      ARCHITECTURE: $(ARCHITECTURE)
      ENABLE_TRUSTED_LAUNCH: $(ENABLE_TRUSTED_LAUNCH)
      SGX_INSTALL: $(SGX_INSTALL)
      ENABLE_CGROUPV2: $(ENABLE_CGROUPV2)
      DRY_RUN: $(DRY_RUN)

      # Build Variables - Azure Pipelines specific variables
      GIT_VERSION: $(Build.SourceVersion)
      GIT_BRANCH: $(Build.SourceBranch)
      BUILD_DEFINITION_NAME: $(Build.DefinitionName)
      BUILD_ID: $(Build.BuildId)
      BUILD_NUMBER: $(Build.BuildNumber)
      BRANCH: $(Build.SourceBranch)
      BUILD_REPOSITORY_NAME: $(Build.Repository.Name)
      BUILD_SOURCEVERSION: $(Build.SourceVersion)
      SYSTEM_COLLECTIONURI: $(System.CollectionUri)
      SYSTEM_TEAMPROJECT: $(System.TeamProject)
      BUILD_RUN_NUMBER: $(Build.BuildNumber)

      # Misc - Variables dynamically defined in code or the pipeline
      OS_TYPE: "Linux"
      SKU_NAME: $(SKU_NAME)
      MODE: $(MODE)
      IMAGE_VERSION: $(IMAGE_VERSION)
      PACKER_BUILD_LOCATION: $(PACKER_BUILD_LOCATION)
      IMAGE_NAME: $(IMAGE_NAME)
      CAPTURED_SIG_VERSION: $(CAPTURED_SIG_VERSION)
      IMPORTED_IMAGE_NAME: $(IMPORTED_IMAGE_NAME)
      OS_DISK_URI: $(OS_DISK_URI)
      MANAGED_SIG_ID: (MANAGED_SIG_ID)
      VHD_DEBUG: $(VHD_DEBUG)
      VHD_NAME: $(VHD_NAME)

  - bash: make -f packer.mk evaluate-build-performance
    displayName: Check Build Performance
    condition: always()
    env:
      #Azure Variables - Common variables for Azure resources
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
      SIG_IMAGE_NAME: $(SIG_IMAGE_NAME)

      # Template parameters - Unique for each SKU. These are passed from each build stage in vsts-vhd-builder-release.yaml
      ARCHITECTURE: $(ARCHITECTURE)

      # Build Variables - Azure Pipelines specific variables
      GIT_VERSION: $(Build.SourceVersion)
      GIT_BRANCH: $(Build.SourceBranch)
      BUILD_ID: $(Build.BuildId)
      JOB_STATUS: $(Agent.JobStatus)

      # Misc - Variables dynamically defined in code or the pipeline
      CAPTURED_SIG_VERSION: $(CAPTURED_SIG_VERSION)
      BUILD_PERF_DATA_FILE: $(BUILD_PERF_DATA_FILE)

  - task: CopyFiles@2
    displayName: Copy Trivy Report
    condition: eq(variables['IS_NOT_1804'], 'true')
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'trivy-report.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: Copy Trivy Table
    condition: eq(variables['IS_NOT_1804'], 'true')
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'trivy-images-table.txt'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@0
    displayName: Publish Release Notes
    inputs:
      artifactName: 'vhd-release-notes-${{ parameters.artifactName }}'
      targetPath: 'release-notes.txt'

  - task: CopyFiles@2
    displayName: Copy Release Notes
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'release-notes.txt'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@0
    displayName: Publish Container Image List
    inputs:
      artifactName: 'vhd-image-bom-${{ parameters.artifactName }}'
      targetPath: 'image-bom.json'

  - task: CopyFiles@2
    displayName: Copy Image Bom
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'image-bom.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - bash: make -f packer.mk convert-sig-to-classic-storage-account-blob
    displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    env:
      #Azure Variables - Common variables for Azure resources
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
      SIG_IMAGE_NAME: $(SIG_IMAGE_NAME)
      RESOURCE_GROUP_NAME: $(AZURE_RESOURCE_GROUP_NAME)
      SIG_GALLERY_NAME: $(SIG_GALLERY_NAME)
      CLASSIC_BLOB: $(CLASSIC_BLOB)
      AZURE_MSI_RESOURCE_STRING: $(AZURE_MSI_RESOURCE_STRING)

      # Template parameters - Unique for each SKU. These are passed from each build stage in vsts-vhd-builder-release.yaml
      ARCHITECTURE: $(ARCHITECTURE)
      ENABLE_TRUSTED_LAUNCH: $(ENABLE_TRUSTED_LAUNCH)

      # Build Variables - Azure Pipelines specific variables
      GIT_VERSION: $(Build.SourceVersion)
      GIT_BRANCH: $(Build.SourceBranch)
      BUILD_ID: $(Build.BuildId)
      JOB_STATUS: $(Agent.JobStatus)

      # Misc - Variables dynamically defined in code or the pipeline
      CAPTURED_SIG_VERSION: $(CAPTURED_SIG_VERSION)
      PACKER_BUILD_LOCATION: $(PACKER_BUILD_LOCATION)
      OS_TYPE: "Linux" 

  - bash: make -f packer.mk generate-sas
    displayName: Getting Shared Access Signature URI
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    env:
      #Azure Variables - Common variables for Azure resources
      SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
      AZURE_RESOURCE_GROUP_NAME: $(AZURE_RESOURCE_GROUP_NAME)
      STORAGE_ACCT_BLOB_URL: $(CLASSIC_BLOB)
      SIG_IMAGE_NAME: $(SIG_IMAGE_NAME)

      # Template parameters - Unique for each SKU. These are passed from each build stage in vsts-vhd-builder-release.yaml
      OFFER_NAME: $(OS_SKU)
      HYPERV_GENERATION: $(HYPERV_GENERATION)
      IMG_PUBLISHER: ${IMG_PUBLISHER}
      IMG_OFFER: $(IMG_OFFER)
      IMG_SKU: $(IMG_SKU)
      IMG_VERSION: $(IMG_VERSION)
      ARCHITECTURE: $(ARCHITECTURE) 

      # Misc - Variables dynamically defined in code or the pipeline
      OS_TYPE: "Linux"
      OS_NAME: "Linux"
      SKU_NAME: $(SKU_NAME)
      IMAGE_VERSION: $(IMAGE_VERSION)
      CAPTURED_SIG_VERSION: $(CAPTURED_SIG_VERSION)
      VHD_NAME: $(VHD_NAME)

  - task: PublishPipelineArtifact@1
    displayName: Publish VHD Publishing-info
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      artifactName: 'publishing-info-${{ parameters.artifactName }}'
      targetPath: 'vhd-publishing-info.json'

  - task: CopyFiles@2
    displayName: Copy VHD Publishing-info
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'vhd-publishing-info.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: UniversalPackages@0
    displayName: Universal Publish
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      command: publish
      publishDirectory: 'vhd-publishing-info.json'
      vstsFeedPublish: 'CloudNativeCompute/AKS-Linux-VHD-Artifacts'
      vstsFeedPackagePublish: 'publishing-info-${{ parameters.artifactName }}'
      packagePublishDescription: 'VHD publishing info ${{ parameters.artifactName }}'
      versionOption: minor

  - task: PublishPipelineArtifact@0
    # These "bulk" artifacts are the folders, per SKU, that contain all other artifacts (publishing-info, image-bom, trivy reports, etc.)
    displayName: Publish Bulk Artifacts
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    inputs:
      artifactName: '${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)'
