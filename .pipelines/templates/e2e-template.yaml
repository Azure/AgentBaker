jobs:
  - job: E2E_Tests
    pool:
      name: nodesigtest-pool
    timeoutInMinutes: 90
    displayName: Run AgentBaker E2E
    variables:
      - group: ab-e2e
    steps:
      - bash: |
          az login --identity
          az account set -s $(AZURE_SUBSCRIPTION_ID)
        displayName: az login
      - bash: bash .pipelines/scripts/setup_go.sh
        displayName: setup go
      - bash:
          LOGGING_DIR="scenario-logs-$(date +%s)"
          echo "setting logging dir to $LOGGING_DIR"
          echo "##vso[task.setvariable variable=LOGGING_DIR]$LOGGING_DIR"
        displayName: Set logging directory
      - bash: |
          export PATH="/usr/local/go/bin:$PATH"
          go version
          
          echo "VHD_BUILD_ID=$VHD_BUILD_ID"
          
          if [ -n "${VHD_BUILD_ID}" ]; then
            export SIG_VERSION_TAG_NAME=buildId
            export SIG_VERSION_TAG_VALUE=$VHD_BUILD_ID
            export IGNORE_SCENARIOS_WITH_MISSING_VHD=true
          else
            echo "Build.BuildId is not specified. Running default e2e tests."
          fi
          
          cd e2e
          go test -parallel 100 -timeout 90m -v -run Test_All ./
        displayName: Run AgentBaker E2E
        env:
          VHD_BUILD_ID: $(VHD_BUILD_ID)
          LOCATION: $(LOCATION)
          LOGGING_DIR: $(LOGGING_DIR)
      - publish: $(System.DefaultWorkingDirectory)/e2e/scenario-logs
        artifact: scenario-logs
        condition: always()
      - bash: |
          set -x
          
          vmssResourceIds=""
          for vmssModel in e2e/scenario-logs/*/vmssId.txt; do
            resourceId=$(cat ${vmssModel})
            vmssResourceIds="${vmssResourceIds} ${resourceId}"
          done
          
          if [ -n "${vmssResourceIds// }" ]; then
            az resource delete --ids ${vmssResourceIds}
          fi
        displayName: ensure vmss deletion
        condition: always()
