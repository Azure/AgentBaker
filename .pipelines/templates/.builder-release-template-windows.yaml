parameters:
    - name: artifactName
      type: string
      default: 2019

steps:
# Merge gen1, gen2, and sig modes into one mode for Windows VHD builds - use sig only.
# 1. If sig is for test purpose only, SIG_GALLERY_NAME, SIG_IMAGE_NAME_PREFIX, and SIG_IMAGE_VERSION are set.
#     Task variable SIG_FOR_PRODUCTION is set to False and passed to the following steps.
# 2. If sig is for production, we will hard-code the task variables SIG_GALLERY_NAME, SIG_IMAGE_NAME, and SIG_IMAGE_VERSION.
#     $RANDOM is appended to avoid duplicate gallery name running concurrent builds.
#     Task variable SIG_FOR_PRODUCTION is set to True and passed to the following steps.
#     Built sig will be deleted because it has been converted to VHD, and thus not needed.
  - bash: |
      m="windowsVhdMode"
      if [[ -n ${SIG_GALLERY_NAME} && -n ${SIG_IMAGE_NAME_PREFIX} && -n ${SIG_IMAGE_VERSION} ]]; then \   
          sigImageName="${SIG_IMAGE_NAME_PREFIX}-${WINDOWS_SKU}"; \
          echo "##vso[task.setvariable variable=SIG_FOR_PRODUCTION]False"; \
      else
          sigImageName="windows-${WINDOWS_SKU}-$RANDOM"; \
          WS_SKU=$(echo $WINDOWS_SKU | tr '-' '_')
          sigGalleryName="WS${WS_SKU}Gallery$(date +"%y%m%d%H%M%S")$RANDOM"; \          
          echo "##vso[task.setvariable variable=SIG_GALLERY_NAME]$sigGalleryName"; \
          echo "##vso[task.setvariable variable=SIG_IMAGE_VERSION]1.0.0"; \
          echo "##vso[task.setvariable variable=SIG_FOR_PRODUCTION]True"; \    
      fi
      echo "Set build mode to $m" && \
      echo "##vso[task.setvariable variable=SIG_IMAGE_NAME]$sigImageName" && \
      echo "##vso[task.setvariable variable=MODE]$m" && \
      if [[ "${USE_RELEASE_DATE}" = "False" ]]; then \
        echo "use current date as build date";  BUILD_DATE=$(date +"%y%m%d"); \
      else \
        echo "use release date as build date"; branchName=$(Build.SourceBranchName); BUILD_DATE=${branchName: -6}; \
      fi && \
      echo "Set build date to $BUILD_DATE" && \
      echo "##vso[task.setvariable variable=BUILD_DATE]$BUILD_DATE"
    displayName: Get Build Mode

  - script: |
      echo MODE=$(MODE) && \
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e CLIENT_ID=${PROD_BUILD_CLIENT_ID} \
      -e CLIENT_SECRET="$(PROD_BUILD_CLIENT_SECRET)" \
      -e TENANT_ID=${PROD_BUILD_TENANT_ID} \
      -e SUBSCRIPTION_ID="${PROD_BUILD_SUBSCRIPTION_ID}" \
      -e AZURE_RESOURCE_GROUP_NAME=${PROD_BUILD_AZURE_RESOURCE_GROUP_NAME} \
      -e AZURE_LOCATION=${PROD_BUILD_AZURE_LOCATION} \
      -e AZURE_VM_SIZE=${AZURE_VM_SIZE} \
      -e GIT_BRANCH=$(Build.SourceBranchName) \
      -e GIT_REPO=$(Build.Repository.Uri) \
      -e GIT_VERSION=$(Build.SourceVersion) \
      -e BUILD_ID=$(Build.BuildId) \
      -e BUILD_NUMBER=$(Build.BuildNumber) \
      -e CONTAINER_RUNTIME=$(CONTAINER_RUNTIME) \
      -e WINDOWS_SKU=$(WINDOWS_SKU) \
      -e OS_TYPE="Windows" \
      -e MODE=$(MODE) \
      -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
      -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
      -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
      -e SIG_FOR_PRODUCTION=${SIG_FOR_PRODUCTION} \
      -e HYPERV_GENERATION=${HYPERV_GENERATION} \
      -e VNET_RESOURCE_GROUP_NAME=${VNET_RESOURCE_GROUP_NAME} \
      -e WINDOWS_PATCH_URL=${WINDOWS_PATCH_URL} \
      -e WINDOWS_BASE_IMAGE_URL=${WINDOWS_BASE_IMAGE_URL} \
      -e WINDOWS_NANO_IMAGE_URL=${WINDOWS_NANO_IMAGE_URL} \
      -e WINDOWS_CORE_IMAGE_URL=${WINDOWS_CORE_IMAGE_URL} \
      ${CONTAINER_IMAGE} make -f packer.mk run-packer-windows
    displayName: Building windows VHD

# Note: use -a to grep MANAGED_SIG_ID (packer-output should be read as a binary file in Linux)
  - script: |
      echo MODE=$(MODE) && \
      OS_DISK_URI="$(cat packer-output | grep -a "OSDiskUri:" | cut -d " " -f 2)" && \
      MANAGED_SIG_ID="$(cat packer-output | grep -a "ManagedImageSharedImageGalleryId:" | cut -d " " -f 2)" && \
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e CLIENT_ID=${PROD_BUILD_CLIENT_ID} \
      -e CLIENT_SECRET="$(PROD_BUILD_CLIENT_SECRET)" \
      -e TENANT_ID=${PROD_BUILD_TENANT_ID} \
      -e SUBSCRIPTION_ID="${PROD_BUILD_SUBSCRIPTION_ID}" \
      -e AZURE_RESOURCE_GROUP_NAME=${PROD_BUILD_AZURE_RESOURCE_GROUP_NAME} \
      -e OS_DISK_URI=${OS_DISK_URI} \
      -e MANAGED_SIG_ID=${MANAGED_SIG_ID} \
      -e AZURE_LOCATION=${PROD_BUILD_AZURE_LOCATION} \
      -e CONTAINER_RUNTIME=$(CONTAINER_RUNTIME) \
      -e WINDOWS_SKU=$(WINDOWS_SKU) \
      -e OS_TYPE="Windows" \
      -e MODE=$(MODE) \
      -e FEATURE_FLAGS=$(FEATURE_FLAGS) \
      -e VHD_DEBUG=${VHD_DEBUG} \
      -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
      -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
      -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
      -e ARCHITECTURE=${ARCHITECTURE} \
      ${CONTAINER_IMAGE} make -f packer.mk test-building-vhd
    displayName: Run VHD cache test

# We can generate release notes for check-in pr and sig mode to validate whether it is expected.
  - task: PublishPipelineArtifact@0
    inputs:
        artifactName: 'vhd-release-notes-${{ parameters.artifactName }}'
        targetPath: 'release-notes.txt'

# Moved conversion to VHD before cleanup.
# Gen 2 packer outputs a sig in destination. This step: dest sig=>disk=>VHD in classic SA for publishing.
# Credentials and resource group name come from the BUILD_**** pipeline variables because source sig is in the build subscription.
  - bash: |
        echo MODE=$(MODE) && \
        SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
        docker run --rm \
        -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
        -w /go/src/github.com/Azure/AgentBaker \
        -e CLIENT_ID=${PROD_BUILD_CLIENT_ID} \
        -e CLIENT_SECRET="$(PROD_BUILD_CLIENT_SECRET)" \
        -e TENANT_ID=${PROD_BUILD_TENANT_ID} \
        -e SUBSCRIPTION_ID="${PROD_BUILD_SUBSCRIPTION_ID}" \
        -e RESOURCE_GROUP_NAME="${PROD_BUILD_AZURE_RESOURCE_GROUP_NAME}" \
        -e LOCATION="${PROD_BUILD_AZURE_LOCATION}" \
        -e OS_TYPE="Windows" \
        -e CLASSIC_SAS_TOKEN="$(STORAGE_ACCT_SAS_TOKEN)" \
        -e CLASSIC_BLOB="$(STORAGE_ACCT_BLOB_URL)" \
        -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
        -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
        -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
        -e CAPTURED_SIG_VERSION=${captured_sig_version} \
        ${CONTAINER_IMAGE} make -f packer.mk convert-sig-to-classic-storage-account-blob
    displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
    condition: and(eq(variables.DRY_RUN, 'False'), eq(variables.SIG_FOR_PRODUCTION, 'True'))

# SA_NAME:             Temporary storage account name
# IMPORTED_IMAGE_NAME: Build output for windowsVhdMode is SIG. Packer does not support building a SIG from raw
#                      VHD blob directly. Will use this as an intermediate sig to import from raw VHD url.
#                      Can be deleted after building.
# SIG_IMAGE_NAME:      Packer-generated SIG image for windowsVhdMode. (Gen 2 included) If SIG_FOR_PRODUCTION = True
#                      This image should be deleted. Otherwise, we keep it.
#                      Used to define the IMAGE_NAME below.
# IMAGE_NAME:          Managed image created by packer: ManagedImageName in log. No longer used.
#                      Can be cleaned up in this step.
  - bash: |
      echo MODE=$(MODE) && \
      PKR_RG_NAME="$(cat packer-output | grep -a "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
      SA_NAME="$(cat packer-output | grep -a "storage name:" | cut -d " " -f 3)" && \
      IMPORTED_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
      IMAGE_NAME="$(cat packer-output | grep -a "ManagedImageName:" | cut -d " " -f 2)" && \
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e CLIENT_ID=${PROD_BUILD_CLIENT_ID} \
      -e CLIENT_SECRET="$(PROD_BUILD_CLIENT_SECRET)" \
      -e TENANT_ID=${PROD_BUILD_TENANT_ID} \
      -e SUBSCRIPTION_ID="${PROD_BUILD_SUBSCRIPTION_ID}" \
      -e SA_NAME=${SA_NAME} \
      -e AZURE_RESOURCE_GROUP_NAME=${PROD_BUILD_AZURE_RESOURCE_GROUP_NAME} \
      -e PKR_RG_NAME=${PKR_RG_NAME} \
      -e MODE=$(MODE) \
      -e DRY_RUN=${DRY_RUN} \
      -e IMAGE_NAME=${IMAGE_NAME} \
      -e VNET_RESOURCE_GROUP_NAME=${VNET_RESOURCE_GROUP_NAME} \
      -e WINDOWS_SKU=$(WINDOWS_SKU) \
      -e IMPORTED_IMAGE_NAME=${IMPORTED_IMAGE_NAME} \
      -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
      -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
      -e SIG_IMAGE_VERSION=${SIG_IMAGE_VERSION} \
      -e SIG_FOR_PRODUCTION=${SIG_FOR_PRODUCTION} \
      -e OS_TYPE="Windows" \
      ${CONTAINER_IMAGE} make -f packer.mk cleanup
    displayName: Clean Up Packer Generated Resources
    condition: always()

# Set VHD_NAME and SKU_NAME which will be published.
# Note: use -a to grep OS_DISK_SAS (packer-output should be read as a binary file in Linux)
# Perform this step only if we want to publish the VHD: Gen 1 or Gen 2 and the built sig is for production.
  - bash: |
      echo MODE=$(MODE) && \
      if [[ "${SIG_FOR_PRODUCTION}" == "True" ]]; then captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"; \
      [ -n "${captured_sig_version}" ] && VHD_NAME="${captured_sig_version}.vhd"; \
      SKU_NAME="windows-$WINDOWS_SKU"; \
      else \
      OS_DISK_SAS="$(cat packer-output | grep -a "OSDiskUriReadOnlySas:" | cut -d " " -f 2)"; \
      VHD_NAME="$(echo $OS_DISK_SAS | cut -d "/" -f 8 | cut -d "?" -f 1)"; \
      SKU_NAME="windows-$WINDOWS_SKU"; fi && \
      WINDOWS_VERSION="$(grep -a "OS Version" < release-notes.txt | cut -d ":" -f 2 | tr -d "[:space:]")" && \
      IMAGE_VERSION="$WINDOWS_VERSION.${BUILD_DATE}" && \
      docker run --rm \
      -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
      -w /go/src/github.com/Azure/AgentBaker \
      -e CLIENT_ID=${CLIENT_ID} \
      -e CLIENT_SECRET="$(CLIENT_SECRET)" \
      -e TENANT_ID=${TENANT_ID} \
      -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
      -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
      -e STORAGE_ACCT_BLOB_URL=${STORAGE_ACCT_BLOB_URL} \
      -e VHD_NAME=${VHD_NAME} \
      -e OS_NAME="Windows" \
      -e SKU_NAME=${SKU_NAME} \
      -e OFFER_NAME="Windows" \
      -e IMAGE_VERSION=${IMAGE_VERSION} \
      -e HYPERV_GENERATION=${HYPERV_GENERATION} \
      -e OS_TYPE="Windows" \
      ${CONTAINER_IMAGE} make -f packer.mk generate-sas
    displayName: Getting Shared Access Signature URI
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), 
                   eq(variables.SIG_FOR_PRODUCTION, 'True'))

# Will be stepped in if the sig is for production
  - task: PublishPipelineArtifact@1
    inputs:
        artifactName: 'publishing-info-${{ parameters.artifactName }}'
        targetPath: 'vhd-publishing-info.json'
    condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), 
                   eq(variables.SIG_FOR_PRODUCTION, 'True'))
