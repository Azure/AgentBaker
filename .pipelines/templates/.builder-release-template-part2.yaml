parameters:
    - name: artifactName
      type: string
      default: 1604
    - name: dryrun
      displayName: Dry run
      type: boolean
      default: False

jobs:
- job: Packer_Clean_up
  dependsOn: Initialize_Pipeline_Build_and_Test_VHD
  steps:
    - bash: |
          echo MODE=$(MODE) && \
          PKR_RG_NAME="$(cat packer-output | grep "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
          SA_NAME="$(cat packer-output | grep "storage name:" | cut -d " " -f 3)" && \
          captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          IMPORTED_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          OS_DISK_SNAPSHOT_NAME="$(cat vhdbuilder/packer/settings.json | grep "os_disk_snapshot_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          IMAGE_NAME="${SIG_IMAGE_NAME}-${captured_sig_version}" && \
          PRIVATE_PACKAGES_URL="$(cat vhdbuilder/packer/settings.json | grep "private_packages_url" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          LINUX_MSI_RESOURCE_ID="$(cat vhdbuilder/packer/settings.json | grep "linux_msi_resource_ids" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
          -e PKR_RG_NAME=${PKR_RG_NAME} \
          -e MODE=${MODE} \
          -e DRY_RUN=${DRY_RUN} \
          -e OS_TYPE="Linux" \
          -e AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} \
          -e SA_NAME=${SA_NAME} \
          -e IMAGE_NAME=${IMAGE_NAME} \
          -e CAPTURED_SIG_VERSION=${captured_sig_version} \
          -e IMPORTED_IMAGE_NAME=${IMPORTED_IMAGE_NAME} \
          -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
          -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
          -e ARCHITECTURE=${ARCHITECTURE} \
          -e OS_DISK_SNAPSHOT_NAME=${OS_DISK_SNAPSHOT_NAME} \
          -e PRIVATE_PACKAGES_URL="${PRIVATE_PACKAGES_URL}" \
          -e LINUX_MSI_RESOURCE_ID=${AZURE_MSI_RESOURCE_ID} \
          ${CONTAINER_IMAGE} make -f packer.mk cleanup
      displayName: Clean Up Packer Generated Resources
      condition: always()
- job: Convert_Shared_Image_Gallery_To_VHD_Blob_In_Classic_Storage_Account
  dependsOn: Initialize_Pipeline_Build_and_Test_VHD
  steps:
    - bash: |
          echo MODE=$(MODE) && \
          captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          SIG_GALLERY_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_gallery_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          PRIVATE_PACKAGES_URL="$(cat vhdbuilder/packer/settings.json | grep "private_packages_url" | awk -F\" '{print $4}')" && \
          LINUX_MSI_RESOURCE_ID="$(cat vhdbuilder/packer/settings.json | grep "linux_msi_resource_id" | awk -F\" '{print $4}')" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
          -e RESOURCE_GROUP_NAME="${AZURE_RESOURCE_GROUP_NAME}" \
          -e LOCATION="${AZURE_LOCATION}" \
          -e OS_TYPE="Linux" \
          -e CLASSIC_BLOB=${CLASSIC_BLOB} \
          -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
          -e OUTPUT_STORAGE_ACCOUNT_NAME=${OUTPUT_STORAGE_ACCOUNT_NAME} \
          -e OUTPUT_STORAGE_CONTAINER_NAME=${OUTPUT_STORAGE_CONTAINER_NAME} \
          -e SIG_GALLERY_NAME=${SIG_GALLERY_NAME} \
          -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
          -e CAPTURED_SIG_VERSION=${captured_sig_version} \
          -e ENABLE_TRUSTED_LAUNCH=${ENABLE_TRUSTED_LAUNCH} \
          -e PRIVATE_PACKAGES_URL="${PRIVATE_PACKAGES_URL}" \
          -e LINUX_MSI_RESOURCE_ID=${AZURE_MSI_RESOURCE_ID} \
          ${CONTAINER_IMAGE} make -f packer.mk convert-sig-to-classic-storage-account-blob
      displayName: "Convert Shared Image Gallery To VHD Blob In Classic Storage Account"
      condition: eq(variables.DRY_RUN, 'False')
- job: Get_SAS_URI_Publish_VHD_Info_And_Checkout
  displayName: 'Get SAS URI, Publish VHD Info, And Checkout'
  dependsOn:
    - Packer_Clean_up
    - Convert_Shared_Image_Gallery_To_VHD_Blob_In_Classic_Storage_Account
  steps:  
    - bash: |
          echo MODE=$(MODE) && \
          captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
          VHD_NAME="${captured_sig_version}.vhd" && \
          docker run --rm \
          -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
          -w /go/src/github.com/Azure/AgentBaker \
          -e CLIENT_ID=${CLIENT_ID} \
          -e CLIENT_SECRET="$(CLIENT_SECRET)" \
          -e TENANT_ID=${TENANT_ID} \
          -e SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
          -e RESOURCE_GROUP_NAME="${AZURE_RESOURCE_GROUP_NAME}" \
          -e SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
          -e CAPTURED_SIG_VERSION=${captured_sig_version} \
          -e CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
          -e OUTPUT_STORAGE_ACCOUNT_NAME=${OUTPUT_STORAGE_ACCOUNT_NAME} \
          -e OUTPUT_STORAGE_CONTAINER_NAME=${OUTPUT_STORAGE_CONTAINER_NAME} \
          -e STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
          -e VHD_NAME=${VHD_NAME} \
          -e OS_NAME="Linux" \
          -e OS_TYPE="Linux" \
          -e SKU_NAME=$(SKU_NAME) \
          -e OFFER_NAME=${OS_SKU} \
          -e HYPERV_GENERATION=${HYPERV_GENERATION} \
          -e ARCHITECTURE=${ARCHITECTURE} \
          -e IMAGE_VERSION=${IMAGE_VERSION} \
          ${CONTAINER_IMAGE} make -f packer.mk generate-sas
      displayName: "Generate SAS"
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: PublishPipelineArtifact@1
      displayName: "Publish Pipeline Artifact"
      inputs:
          artifactName: 'publishing-info-${{ parameters.artifactName }}'
          targetPath: 'vhd-publishing-info.json'
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
    - task: UniversalPackages@0
      displayName: "Universal Publish"
      condition: and(succeeded(), eq(variables.DRY_RUN, 'False'))
      inputs:
        command: publish
        publishDirectory: 'vhd-publishing-info.json'
        vstsFeedPublish: 'CloudNativeCompute/AKS-Linux-VHD-Artifacts'
        vstsFeedPackagePublish: 'publishing-info-${{ parameters.artifactName }}'
        packagePublishDescription: 'VHD publishing info ${{ parameters.artifactName }}'
        versionOption: minor
