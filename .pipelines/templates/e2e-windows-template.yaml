parameters:
  - name: windowsImage
    type: string
    default: 2019-containerd
  - name: windowsOSSKU
    type: string
    default: Windows2019
  - name: windowsVMSize
    type: string
    default: Standard_D2s_v3
  - name: windowsDistro
    type: string
    default: aks-windows-2019-containerd
  - name: windowsGpuDriverSuffix
    type: string
    default:
  - name: storageAccount
    type: string
    default: storewin19

jobs:
- job: Setup_Test_Cluster
  steps:
    - bash: |
        az login --identity
        az account set -s $(AZURE_E2E_SUBSCRIPTION_ID)
      displayName: az login
    - bash: bash .pipelines/scripts/setup_go.sh
      displayName: setup go
    - bash: |
        export WINDOWS_E2E_IMAGE=${{ parameters.windowsImage }}
        export WINDOWS_E2E_OSSKU=${{ parameters.windowsOSSKU }}
        export WINDOWS_E2E_VMSIZE=${{ parameters.windowsVMSize }}
        export WINDOWS_GPU_DRIVER_SUFFIX=${{ parameters.windowsGpuDriverSuffix }}
        if [[ -n "${WINDOWS_PACKAGE_URL}" ]]; then
          export windowsPackageURL=$WINDOWS_PACKAGE_URL
          export WINDOWS_PACKAGE_VERSION=$(echo $windowsPackageURL | grep -oP '(?<=/v)\d+\.\d+\.\d+' | head -1)
          if [[ -z "${KUBERNETES_VERSION}" ]]; then
            echo "You must set KUBERNETES_VERSION when setting WINDOWS_PACKAGE_URL"
            exit 1
          fi
          if [[ "${WINDOWS_PACKAGE_VERSION}" != "${KUBERNETES_VERSION}" ]]; then
            echo "Windows package version $WINDOWS_PACKAGE_VERSION does not match with kubernetes version $KUBERNETES_VERSION. Invalid test scenario."
            exit 1
          fi
        else
          if [[ -z "${KUBERNETES_VERSION}" ]]; then
            defaultMajorVersion=$(az aks get-versions -l $AZURE_BUILD_LOCATION --query "values[?isDefault==\`true\`].version" -otsv)
            KUBERNETES_VERSION=$(az aks get-versions -l $AZURE_BUILD_LOCATION -o table | awk '{print $1}' | awk "/$defaultMajorVersion/ {print}" | sort -r | awk 'NR==1')
            echo "Using default kubernetes version ${KUBERNETES_VERSION} for the windows package"
          fi
          export windowsPackageURL="https://acs-mirror.azureedge.net/kubernetes/v${KUBERNETES_VERSION}/windowszip/v${KUBERNETES_VERSION}-1int.zip"
          export WINDOWS_PACKAGE_VERSION=$KUBERNETES_VERSION
        fi
        export K8S_VERSION=${WINDOWS_PACKAGE_VERSION//./}
        export WINDOWS_E2E_STORAGE_CONTAINER=${{ parameters.storageAccount }}-$K8S_VERSION
        mkdir -p $WINDOWS_E2E_IMAGE
        cp -r e2e/windows/* $WINDOWS_E2E_IMAGE
        go version
        cd $WINDOWS_E2E_IMAGE
        bash ./e2e-starter.sh
        bash e2e-create-windows-nodepool.sh
      env:
        MAPPED_ACCOUNT_KEY: $(AZURE_E2E_STORAGE_ACCOUNT_KEY)
      displayName: Setup Test Cluster
    - publish: $(System.DefaultWorkingDirectory)/${{ parameters.windowsImage }}
      artifact: ${{ parameters.windowsImage }}${{ parameters.windowsGpuDriverSuffix }}-clusterConfig
      condition: succeeded()

- job: Generate_Matrix
  steps:
    - bash: |
        stringifyJson=$(cat e2e/windows/matrix.json | jq -r tojson | sed 's/\\//g')
        echo "##vso[task.setVariable variable=scenarioMatrix;isOutput=true]"$stringifyJson
      name: matrix
      
- job: Test
  dependsOn:
    - Setup_Test_Cluster
    - Generate_Matrix
  strategy:
    matrix: $[ dependencies.Generate_Matrix.outputs['matrix.scenarioMatrix'] ]
    maxParallel: 3
  steps:
    - download: current
      artifact: ${{ parameters.windowsImage }}${{ parameters.windowsGpuDriverSuffix }}-clusterConfig
    - bash: |
        az login --identity
        az account set -s $(AZURE_E2E_SUBSCRIPTION_ID)
      displayName: az login
    - bash: |
        export SCENARIO_NAME
        export WINDOWS_E2E_IMAGE=${{ parameters.windowsImage }}
        export WINDOWS_DISTRO=${{ parameters.windowsDistro }}
        export WINDOWS_GPU_DRIVER_SUFFIX=${{ parameters.windowsGpuDriverSuffix }}
        if [[ "${WINDOWS_GPU_DRIVER_SUFFIX}" == "-grid" ]]; then
            export WINDOWS_GPU_DRIVER_URL="https://acs-mirror.azureedge.net/aks/windows/gpudrivers/grid/537.13_grid_win10_win11_server2019_server2022_dch_64bit_international_azure_swl.exe"
            export CONFIG_GPU_DRIVER_IF_NEEDED=true
        elif [[ "${WINDOWS_GPU_DRIVER_SUFFIX}" == "-cuda" ]]; then
            export WINDOWS_GPU_DRIVER_URL="https://acs-mirror.azureedge.net/aks/windows/gpudrivers/cuda/473.47-data-center-tesla-desktop-winserver-2019-2016-international.exe"
            export CONFIG_GPU_DRIVER_IF_NEEDED=true
        else
            export WINDOWS_GPU_DRIVER_URL=""
            export CONFIG_GPU_DRIVER_IF_NEEDED=false
        fi
        if [[ -n "${WINDOWS_PACKAGE_URL}" ]]; then
          export windowsPackageURL=$WINDOWS_PACKAGE_URL
          export WINDOWS_PACKAGE_VERSION=$(echo $windowsPackageURL | grep -oP '(?<=/v)\d+\.\d+\.\d+' | head -1)
        else
          if [[ -z "${KUBERNETES_VERSION}" ]]; then
            defaultMajorVersion=$(az aks get-versions -l $AZURE_BUILD_LOCATION --query "values[?isDefault==\`true\`].version" -otsv)
            KUBERNETES_VERSION=$(az aks get-versions -l $AZURE_BUILD_LOCATION -o table | awk '{print $1}' | awk "/$defaultMajorVersion/ {print}" | sort -r | awk 'NR==1')
            echo "Using default kubernetes version ${KUBERNETES_VERSION} for the windows package"
          fi
          export windowsPackageURL="https://acs-mirror.azureedge.net/kubernetes/v${KUBERNETES_VERSION}/windowszip/v${KUBERNETES_VERSION}-1int.zip"
          export WINDOWS_PACKAGE_VERSION=$KUBERNETES_VERSION
        fi
        export K8S_VERSION=${WINDOWS_PACKAGE_VERSION//./}
        mkdir -p $WINDOWS_E2E_IMAGE
        cp -a $(Pipeline.Workspace)/${{ parameters.windowsImage }}${{ parameters.windowsGpuDriverSuffix }}-clusterConfig/* $WINDOWS_E2E_IMAGE
        cd $WINDOWS_E2E_IMAGE
        bash e2e-scenario.sh
      env:
        MAPPED_ACCOUNT_KEY: $(AZURE_E2E_STORAGE_ACCOUNT_KEY)
    - publish: $(System.DefaultWorkingDirectory)/${{ parameters.windowsImage }}/$(SCENARIO_NAME)-logs
      artifact: ${{ parameters.windowsImage }}${{ parameters.windowsGpuDriverSuffix }}-$(SCENARIO_NAME)-logs
      condition: always()