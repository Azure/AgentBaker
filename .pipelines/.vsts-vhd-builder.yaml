name: $(Date:yyyyMMdd)$(Rev:.r)_$(OS_SKU)$(OS_VERSION)_$(HYPERV_GENERATION)_$(FEATURE_FLAGS)_$(Build.SourceBranchName)
trigger: none

variables:
- name: CONTAINER_IMAGE
  value: 'mcr.microsoft.com/oss/azcu/go-dev:v1.34.7'
- group: nodesig-test

pool:
  name: "nodesigtest-agent-pool"

# Three modes in prioritized order
# gen2Mode: Hyper-Generation V2 mode
#    This mode is activated by setting env var HYPERV_GENERATION to V2 and will generate a 1804 Gen2 Linux image
#    steps:
#    - Build VHD to a predefined SIG gallery/image with dynamic version (PackerSigGalleryEastUS/1804Gen2/{{user `gen2_captured_sig_version`}})
#    - Create a managed disk with dynamic name {{user `gen2_captured_sig_version`}} from the SIG image.
#    - (offline) Export the managed disk SAS URL, download the VHD to local disk, rename the file to .vhd, upload it to a classic storage account and publish it to PIR.
#
# sigMode: Shared Image Gallery mode
#    This modes is activated when mode 1 is not activated and by setting env var SIG_GALLERY_NAME/SIG_IMAGE_NAME/SIG_IMAGE_VERSION.
#    It is similar to mode 1 except it will create a gen1 image and the SIG destination is specified by the provided env var.
#    This is good for quick testing purpose as you can use the SIG image as soon as the build is completed.
#    steps:
#    - Build VHD to a SIG gallery as specified by env var SIG_GALLERY_NAME/SIG_IMAGE_NAME/SIG_IMAGE_VERSION
#
# default mode: Gen1+VHD
#    This default mode generates VHD and store it in a classic storage account. This is mainly for publishing a new VM image to Platform Image Repository(PIR).
#    steps:
#    - create an VHD in Packer to normal storage account
#    - copy from Packer storage account to classic storage account using AzCopy
#    - generate SAS link from azure CLI
#    - (offline)POST a new SKU to azure marketplace



stages:
  - stage: build_vhd
    dependsOn: []
    jobs:
    - job: build
      timeoutInMinutes: 180
      steps:
        - bash: |
            if [[ ${HYPERV_GENERATION} == "V2" ]]; then m="gen2Mode"; elif [[ -n ${SIG_GALLERY_NAME} && -n ${SIG_IMAGE_NAME} && -n ${SIG_IMAGE_VERSION} ]]; then m="sigMode"; else m="default"; fi && \
            echo "Set build mode to $m" && \Stand
            echo "##vso[task.setvariable variable=MODE]$m"
          displayName: Get Build Mode
        - task: UniversalPackages@0
          displayName: Download Asc Baseline
          inputs:
            command: download
            vstsFeed: ASMPackages
            vstsFeedPackage: asc-baseline
            vstsPackageVersion: '1.1.0-268'
            downloadDirectory: vhdbuilder/packer
        - bash: |
            GOPATH="$(go env | grep GOPATH | cut -d= -f2 | tr -d '"')"
            export PATH="$PATH:$GOPATH/bin"
            pushd /tmp
            GO111MODULE=on go get cuelang.org/go/cmd/cue
            popd
            cue export ./schemas/manifest.cue > ./parts/linux/cloud-init/artifacts/manifest.json
          displayName: setup cue
        - bash: |
            set -x
            az login --service-principal -u ${MSI_RESOURCE_ID} --tenant ${AZ_TENANT_ID}
            az account set -s ${AZ_SUBSCRIPTION_ID}
          displayName: az login
        - bash: |
            echo MODE=$(MODE) && \
            export MODE=$(MODE) && \
            export OS_TYPE="Linux" && \
            export GIT_VERSION=$(Build.SourceVersion) && \
            export BUILD_ID=$(Build.BuildId) && \
            export BUILD_NUMBER=$(Build.BuildNumber) && \
            export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"containerd"} && \
            export CLIENT_SECRET="$(CLIENT_SECRET)" && \
            export AZURE_VM_SIZE="Standard_D4ds_v4" && \
            make -f packer.mk run-packer
          displayName: Building VHD
        - script: |
            export OS_DISK_URI="$(cat packer-output | grep "OSDiskUri:" | cut -d " " -f 2)" && \
            echo MODE=$(MODE) && \
            export MODE=$(MODE) && \
            export OS_TYPE="Linux" && \
            export GIT_VERSION=$(Build.SourceVersion) && \
            export BUILD_ID=$(Build.BuildId) && \
            export BUILD_NUMBER=$(Build.BuildNumber) && \
            export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"containerd"} && \
            export VHD_DEBUG=${VHD_DEBUG} && \
            export ENABLE_FIPS=${ENABLE_FIPS} && \
            export CLIENT_SECRET="$(CLIENT_SECRET)" && \
            make -f packer.mk test-building-vhd
          displayName: Run VHD Tests
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'vhd-release-notes'
            targetPath: 'release-notes.txt'
          displayName: publish release notes
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'vhd-image-bom'
            targetPath: 'image-bom.json'
          displayName: publish container image list
        - bash: |
            echo MODE=$(MODE) && \
            export MODE=$(MODE) && \
            export OS_TYPE="Linux" && \
            export GIT_VERSION=$(Build.SourceVersion) && \
            export BUILD_ID=$(Build.BuildId) && \
            export BUILD_NUMBER=$(Build.BuildNumber) && \
            export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"containerd"} && \
            export CLIENT_SECRET="$(CLIENT_SECRET)" && \
            export CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" && \
            OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)" && \
            make -f packer.mk az-copy
          displayName: Copying resource to Classic Storage Account
          condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), eq(variables['MODE'], 'default'))
        - bash: |
            echo MODE=$(MODE) && \
            PKR_RG_NAME="$(cat packer-output | grep "ResourceGroupName" | cut -d "'" -f 2 | head -1)" && \
            SA_NAME="$(cat packer-output | grep "storage name:" | cut -d " " -f 3)" && \
            gen2_captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "gen2_captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
            IMPORTED_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "imported_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
            ARM64_OS_DISK_SNAPSHOT_NAME="$(cat vhdbuilder/packer/settings.json | grep "arm64_os_disk_snapshot_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
            if [[ $(MODE) == "gen2Mode" ]]; then IMAGE_NAME="${gen2_captured_sig_version}"; else IMAGE_NAME=$SIG_IMAGE_NAME; fi && \
            export MODE=$(MODE) && \
            export OS_TYPE="Linux" && \
            export GIT_VERSION=$(Build.SourceVersion) && \
            export BUILD_ID=$(Build.BuildId) && \
            export BUILD_NUMBER=$(Build.BuildNumber) && \
            export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"containerd"} && \
            export CLIENT_SECRET="$(CLIENT_SECRET)" && \
            export CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" && \
            export PKR_RG_NAME=${PKR_RG_NAME} && \
            export AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME} && \
            export SA_NAME=${SA_NAME} && \
            export IMAGE_NAME=${IMAGE_NAME} && \
            export IMPORTED_IMAGE_NAME=${IMPORTED_IMAGE_NAME} && \
            export SIG_GALLERY_NAME=${SIG_GALLERY_NAME} && \
            export ARCHITECTURE=${ARCHITECTURE} && \
            export ARM64_OS_DISK_SNAPSHOT_NAME=${ARM64_OS_DISK_SNAPSHOT_NAME} && \
            make -f packer.mk cleanup
          displayName: Clean Up Packer Generated Resources
          condition: always()
        - bash: |
            echo MODE=$(MODE) && \
            SIG_IMAGE_NAME="$(cat vhdbuilder/packer/settings.json | grep "sig_image_name" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
            gen2_captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "gen2_captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')" && \
            export MODE=$(MODE) && \
            export OS_TYPE="Linux" && \
            export GIT_VERSION=$(Build.SourceVersion) && \
            export BUILD_ID=$(Build.BuildId) && \
            export BUILD_NUMBER=$(Build.BuildNumber) && \
            export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"containerd"} && \
            export CLIENT_SECRET="$(CLIENT_SECRET)" && \
            export CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" && \
            export CLASSIC_BLOB=${CLASSIC_BLOB} \
            export CLASSIC_SAS_TOKEN="$(SAS_TOKEN)" \
            export SIG_IMAGE_NAME=${SIG_IMAGE_NAME} \
            export GEN2_CAPTURED_SIG_VERSION=${gen2_captured_sig_version} \
            make -f packer.mk convert-sig-to-classic-storage-account-blob
          displayName: Convert Shared Image Gallery To VHD Blob In Classic Storage Account
          condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), eq(variables['MODE'], 'gen2Mode'))
        - bash: |
            echo MODE=$(MODE) && \
            if [[ $(MODE) == "gen2Mode" ]]; then gen2_captured_sig_version="$(cat vhdbuilder/packer/settings.json | grep "gen2_captured_sig_version" | awk -F':' '{print $2}' | awk -F'"' '{print $2}')"; \
            VHD_NAME="${gen2_captured_sig_version}.vhd"; \
            SKU_NAME="1804gen2"; else \
            OS_DISK_SAS="$(cat packer-output | grep "OSDiskUriReadOnlySas:" | cut -d " " -f 2)"; \
            VHD_NAME="$(echo $OS_DISK_SAS | cut -d "/" -f 8 | cut -d "?" -f 1)"; \
            SKU_NAME=$OS_VERSION; fi && \
            if [[ ${OS_VERSION} == "V2" && ${ARCHITECTURE,,} == "arm64" && ${OS_SKU} == "CBLMariner" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
            if [[ ${OS_VERSION} == "18.04" && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
            if [[ ${OS_VERSION} == "22.04" && ${ARCHITECTURE,,} == "arm64" ]]; then SKU_NAME="${SKU_NAME}arm64"; fi && \
            if [[ ${OS_VERSION} == "18.04" && ${ENABLE_FIPS,,} == "true" ]]; then SKU_NAME="${SKU_NAME}fips"; fi && \
            if [[ "${FEATURE_FLAGS}" == *"fullgpu"* ]]; then SKU_NAME="${SKU_NAME}gpu"; fi && \
            docker run --rm \
            -v ${PWD}:/go/src/github.com/Azure/AgentBaker \
            -w /go/src/github.com/Azure/AgentBaker \
            export CLIENT_ID=${CLIENT_ID} \
            export CLIENT_SECRET="$(CLIENT_SECRET)" \
            export TENANT_ID=${TENANT_ID} \
            export SUBSCRIPTION_ID="${SUBSCRIPTION_ID}" \
            export CLASSIC_SA_CONNECTION_STRING="$(CLASSIC_SA_CONNECTION_STRING)" \
            export STORAGE_ACCT_BLOB_URL=${CLASSIC_BLOB} \
            export VHD_NAME=${VHD_NAME} \
            export OS_NAME="Linux" \
            export SKU_NAME=${SKU_NAME} \
            export OFFER_NAME=${OS_SKU} \
            export HYPERV_GENERATION=${HYPERV_GENERATION} \
            export ARCHITECTURE=${ARCHITECTURE} \
            export IMAGE_VERSION=${IMAGE_VERSION} \
            make -f packer.mk generate-sas
          displayName: Getting Shared Access Signature URI
          condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), or(eq(variables['MODE'], 'gen2Mode'), eq(variables['MODE'], 'default')))
        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: 'publishing-info'
            targetPath: 'vhd-publishing-info.json'
          condition: and(succeeded(), eq(variables.DRY_RUN, 'False'), ne(variables['MODE'], 'sigMode'))
  - stage: build_arm64_vhd
    dependsOn: []
    condition: and(eq(variables.SIG_GALLERY_NAME, ''), eq(variables.SIG_IMAGE_NAME, ''), eq(variables.SIG_IMAGE_VERSION, ''))
    jobs:
    - job: build
      timeoutInMinutes: 180
      steps:
        - bash: |
            echo '##vso[task.setvariable variable=DRY_RUN]True'
            echo '##vso[task.setvariable variable=OS_SKU]Ubuntu'
            echo '##vso[task.setvariable variable=OS_VERSION]22.04'
            echo '##vso[task.setvariable variable=IMG_PUBLISHER]Canonical'
            echo '##vso[task.setvariable variable=IMG_OFFER]0001-com-ubuntu-server-jammy'
            echo '##vso[task.setvariable variable=IMG_SKU]22_04-lts-arm64'
            echo '##vso[task.setvariable variable=HYPERV_GENERATION]V2'
            echo '##vso[task.setvariable variable=AZURE_VM_SIZE]Standard_D2pds_V5'
            echo '##vso[task.setvariable variable=FEATURE_FLAGS]None'
            echo '##vso[task.setvariable variable=CONTAINER_RUNTIME]containerd'
            echo '##vso[task.setvariable variable=ARCHITECTURE]ARM64'
            echo '##vso[task.setvariable variable=ENABLE_FIPS]False'
          displayName: Setup Build Variables
        - template: ./templates/.builder-release-template.yaml
          parameters:
            artifactName: 2204-arm64-gen2-containerd