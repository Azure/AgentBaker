name: $(Date:yyyyMMdd)$(Rev:.r)_e2e

pr:
  branches:
    include:
    - main
    - 'official/*'

variables:
- group: ab-e2e

pool:
  name: nodesigtest-pool

jobs:
- job: Setup_Test_Cluster
  steps:
  - bash: |
      az login --identity
      az account set -s $(AZURE_SUBSCRIPTION_ID)
    displayName: az login
  - bash: bash .pipelines/scripts/setup_go.sh
    displayName: setup go
  - bash: |
      go version
      cd e2e
      bash ./e2e-starter.sh
    displayName: Setup Test Cluster
  - publish: $(System.DefaultWorkingDirectory)/e2e
    artifact: clusterConfig
    condition: always()

- job: Generate_Matrix
  steps:
  - bash: |
      stringifyJson=$(cat e2e/matrix.json | jq -r tojson | sed 's/\\//g')
      echo "##vso[task.setVariable variable=scenarioMatrix;isOutput=true]"$stringifyJson
    name: matrix

- job: Test
  dependsOn:
    - Setup_Test_Cluster
    - Generate_Matrix
  strategy:
    matrix: $[ dependencies.Generate_Matrix.outputs['matrix.scenarioMatrix'] ]
    maxParallel: 3
  steps:
  - download: current
    artifact: clusterConfig
  - bash: |
      az login --identity
      az account set -s $(AZURE_SUBSCRIPTION_ID)
    displayName: az login
  - bash: |
      export SCENARIO_NAME
      export $VM_SKU
      export $SIG_VERSION_ID
      cp -a $(Pipeline.Workspace)/clusterConfig/* e2e
      cd e2e
      bash e2e-scenario.sh
  - publish: $(System.DefaultWorkingDirectory)/e2e/$(SCENARIO_NAME)-logs
    artifact: $(SCENARIO_NAME)-logs
    condition: always()
  - bash: |
      az vmss delete -g $(jq -r .group e2e/$(SCENARIO_NAME)-vmss.json) -n $(jq -r .vmss e2e/$(SCENARIO_NAME)-vmss.json)
    displayName: delete vmss
    condition: always()