#!/bin/bash

set -o allexport # export all variables to subshells
echo '#EOF' >> /opt/azure/manifest.json # wait_for_file looks for this
mkdir -p /var/log/azure/Microsoft.Azure.Extensions.CustomScript/events # expected, but not created w/o CSE

echo $(date),$(hostname) > /var/log/azure/cluster-provision-cse-output.log;
for i in $(seq 1 1200); do
grep -Fq "EOF" /opt/azure/containers/provision.sh && break;
if [ $i -eq 1200 ]; then exit 100; else sleep 1; fi;
done;

ADMINUSER=azureuser
TENANT_ID=
KUBERNETES_VERSION=
KUBE_BINARY_URL=
CUSTOM_KUBE_BINARY_URL=
PRIVATE_KUBE_BINARY_URL=
KUBEPROXY_URL=
APISERVER_PUBLIC_KEY=
SUBSCRIPTION_ID=
RESOURCE_GROUP=
LOCATION=
VM_TYPE=vmss
SUBNET=aks-subnet
NETWORK_SECURITY_GROUP=
VIRTUAL_NETWORK=
VIRTUAL_NETWORK_RESOURCE_GROUP=
ROUTE_TABLE=
PRIMARY_AVAILABILITY_SET=
PRIMARY_SCALE_SET=
SERVICE_PRINCIPAL_CLIENT_ID=""
NETWORK_PLUGIN=
NETWORK_POLICY=""
VNET_CNI_PLUGINS_URL=
CNI_PLUGINS_URL=
CLOUDPROVIDER_BACKOFF=true
CLOUDPROVIDER_BACKOFF_MODE=v2
CLOUDPROVIDER_BACKOFF_RETRIES=6
CLOUDPROVIDER_BACKOFF_EXPONENT=0
CLOUDPROVIDER_BACKOFF_DURATION=5
CLOUDPROVIDER_BACKOFF_JITTER=0
CLOUDPROVIDER_RATELIMIT=true
CLOUDPROVIDER_RATELIMIT_QPS=10
CLOUDPROVIDER_RATELIMIT_QPS_WRITE=10
CLOUDPROVIDER_RATELIMIT_BUCKET=100
CLOUDPROVIDER_RATELIMIT_BUCKET_WRITE=100
LOAD_BALANCER_DISABLE_OUTBOUND_SNAT=false
USE_MANAGED_IDENTITY_EXTENSION=false
USE_INSTANCE_METADATA=true
LOAD_BALANCER_SKU=
EXCLUDE_MASTER_FROM_STANDARD_LB=true
MAXIMUM_LOADBALANCER_RULE_COUNT=250
CONTAINER_RUNTIME=containerd
CLI_TOOL=ctr
CONTAINERD_DOWNLOAD_URL_BASE= 
NETWORK_MODE="transparent"
KUBE_BINARY_URL= # duplicate
USER_ASSIGNED_IDENTITY_ID=""
API_SERVER_NAME=
IS_VHD=true
GPU_NODE=false
SGX_NODE=false
MIG_NODE="false"
CONFIG_GPU_DRIVER_IF_NEEDED=true
ENABLE_GPU_DEVICE_PLUGIN_IF_NEEDED=false
TELEPORTD_PLUGIN_DOWNLOAD_URL=
CONTAINERD_VERSION=
CONTAINERD_PACKAGE_URL=
RUNC_VERSION=
RUNC_PACKAGE_URL=
ENABLE_HOSTS_CONFIG_AGENT="false"
DISABLE_SSH="false"
NEEDS_CONTAINERD="true"
TELEPORT_ENABLED="false"
SHOULD_CONFIGURE_HTTP_PROXY="false"
SHOULD_CONFIGURE_HTTP_PROXY_CA="false"
HTTP_PROXY_TRUSTED_CA=""
SHOULD_CONFIGURE_CUSTOM_CA_TRUST="false"
CUSTOM_CA_TRUST_COUNT="0"

IS_KRUSTLET="false"
GPU_NEEDS_FABRIC_MANAGER="false"
NEEDS_DOCKER_LOGIN="false"
IPV6_DUAL_STACK_ENABLED="false"
OUTBOUND_COMMAND=
ENABLE_UNATTENDED_UPGRADES=false
ENSURE_NO_DUPE_PROMISCUOUS_BRIDGE=false
SHOULD_CONFIG_SWAP_FILE="false"
SHOULD_CONFIG_TRANSPARENT_HUGE_PAGE="false"
SHOULD_CONFIG_CONTAINERD_ULIMITS = false
CONTAINERD_ULIMITS=""





TARGET_CLOUD="AzurePublicCloud"
TARGET_ENVIRONMENT="AzurePublicCloud"
CUSTOM_ENV_JSON=""
IS_CUSTOM_CLOUD="false"
CSE_HELPERS_FILEPATH=/opt/azure/containers/provision_source.sh
CSE_DISTRO_HELPERS_FILEPATH=/opt/azure/containers/provision_source_distro.sh
CSE_INSTALL_FILEPATH=/opt/azure/containers/provision_installs.sh
CSE_DISTRO_INSTALL_FILEPATH=/opt/azure/containers/provision_installs_distro.sh
CSE_CONFIG_FILEPATH=/opt/azure/containers/provision_configs.sh
AZURE_PRIVATE_REGISTRY_SERVER=""
HAS_CUSTOM_SEARCH_DOMAIN="false"
CUSTOM_SEARCH_DOMAIN_FILEPATH=/opt/azure/containers/setup-custom-search-domains.sh
HTTP_PROXY_URLS=""
HTTPS_PROXY_URLS=""
NO_PROXY_URLS=""
ENABLE_TLS_BOOTSTRAPPING="false"
ENABLE_SECURE_TLS_BOOTSTRAPPING="false"
CUSTOM_SECURE_TLS_BOOTSTRAP_AAD_SERVER_APP_ID=""
DHCPV6_SERVICE_FILEPATH="/etc/systemd/system/dhcpv6.service"
DHCPV6_CONFIG_FILEPATH="/opt/azure/containers/enable-dhcpv6.sh"
THP_ENABLED=""
THP_DEFRAG=""
SERVICE_PRINCIPAL_FILE_CONTENT=""
KUBELET_CLIENT_CONTENT=""
KUBELET_CLIENT_CERT_CONTENT=""
KUBELET_CONFIG_FILE_ENABLED="false"
KUBELET_CONFIG_FILE_CONTENT=""
SWAP_FILE_SIZE_MB="0"
GPU_DRIVER_VERSION="cuda-535.54.03"
GPU_IMAGE_SHA="sha-ff213d"
GPU_INSTANCE_PROFILE=""
CUSTOM_SEARCH_DOMAIN_NAME=""
CUSTOM_SEARCH_REALM_USER=""
CUSTOM_SEARCH_REALM_PASSWORD=""
MESSAGE_OF_THE_DAY=""
HAS_KUBELET_DISK_TYPE="false" #Following Karpenter's default value. Set as "false" for now.
NEEDS_CGROUPV2="false" # if we can get the value of distro of the VHD, we can compute this value in the Go binary on VHD
TLS_BOOTSTRAP_TOKEN=""
KUBELET_FLAGS=""
NETWORK_POLICY="" # duplicate
KUBELET_NODE_LABELS=""
AZURE_ENVIRONMENT_FILEPATH=""
KUBE_CA_CRT=""
KUBENET_TEMPLATE="ewoJImNuaVZlcnNpb24iOiAiMC4zLjEiLAoJIm5hbWUiOiAia3ViZW5ldCIsCgkicGx1Z2lucyI6IFt7CgkJInR5cGUiOiAiYnJpZGdlIiwKCQkiYnJpZGdlIjogImNicjAiLAoJCSJtdHUiOiAxNTAwLAoJCSJhZGRJZiI6ICJldGgwIiwKCQkiaXNHYXRld2F5IjogdHJ1ZSwKCQkiaXBNYXNxIjogZmFsc2UsCgkJInByb21pc2NNb2RlIjogdHJ1ZSwKCQkiaGFpcnBpbk1vZGUiOiBmYWxzZSwKCQkiaXBhbSI6IHsKCQkJInR5cGUiOiAiaG9zdC1sb2NhbCIsCgkJCSJyYW5nZXMiOiBbe3tyYW5nZSAkaSwgJHJhbmdlIDo9IC5Qb2RDSURSUmFuZ2VzfX17e2lmICRpfX0sIHt7ZW5kfX1beyJzdWJuZXQiOiAie3skcmFuZ2V9fSJ9XXt7ZW5kfX1dLAoJCQkicm91dGVzIjogW3t7cmFuZ2UgJGksICRyb3V0ZSA6PSAuUm91dGVzfX17e2lmICRpfX0sIHt7ZW5kfX17ImRzdCI6ICJ7eyRyb3V0ZX19In17e2VuZH19XQoJCX0KCX0sCgl7CgkJInR5cGUiOiAicG9ydG1hcCIsCgkJImNhcGFiaWxpdGllcyI6IHsicG9ydE1hcHBpbmdzIjogdHJ1ZX0sCgkJImV4dGVybmFsU2V0TWFya0NoYWluIjogIktVQkUtTUFSSy1NQVNRIgoJfV0KfQo="
CONTAINERD_CONFIG_CONTENT="dmVyc2lvbiA9IDIKb29tX3Njb3JlID0gMApbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSJdCiAgc2FuZGJveF9pbWFnZSA9ICJtY3IubWljcm9zb2Z0LmNvbS9vc3Mva3ViZXJuZXRlcy9wYXVzZTozLjYiCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmRdCiAgICBkZWZhdWx0X3J1bnRpbWVfbmFtZSA9ICJydW5jIgogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMucnVuY10KICAgICAgcnVudGltZV90eXBlID0gImlvLmNvbnRhaW5lcmQucnVuYy52MiIKICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzLnJ1bmMub3B0aW9uc10KICAgICAgQmluYXJ5TmFtZSA9ICIvdXNyL2Jpbi9ydW5jIgogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMudW50cnVzdGVkXQogICAgICBydW50aW1lX3R5cGUgPSAiaW8uY29udGFpbmVyZC5ydW5jLnYyIgogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMudW50cnVzdGVkLm9wdGlvbnNdCiAgICAgIEJpbmFyeU5hbWUgPSAiL3Vzci9iaW4vcnVuYyIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnldCiAgICBjb25maWdfcGF0aCA9ICIvZXRjL2NvbnRhaW5lcmQvY2VydHMuZCIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnkuaGVhZGVyc10KICAgIFgtTWV0YS1Tb3VyY2UtQ2xpZW50ID0gWyJhenVyZS9ha3MiXQpbbWV0cmljc10KICBhZGRyZXNzID0gIjAuMC4wLjA6MTAyNTciCg=="
IS_KATA="false"  # if we can get the value of distro of the VHD, we can compute this value in the Go binary on VHD
ARTIFACT_STREAMING_ENABLED="false"
SYSCTL_CONTENT="bmV0LmNvcmUubWVzc2FnZV9idXJzdD04MCBuZXQuY29yZS5tZXNzYWdlX2Nvc3Q9NDAgbmV0LmNvcmUuc29tYXhjb25uPTE2Mzg0IG5ldC5pcHY0Lm5laWdoLmRlZmF1bHQuZ2NfdGhyZXNoMT00MDk2IG5ldC5pcHY0Lm5laWdoLmRlZmF1bHQuZ2NfdGhyZXNoMj04MTkyIG5ldC5pcHY0Lm5laWdoLmRlZmF1bHQuZ2NfdGhyZXNoMz0xNjM4NCBuZXQuaXB2NC50Y3BfbWF4X3N5bl9iYWNrbG9nPTE2Mzg0IG5ldC5pcHY0LnRjcF9yZXRyaWVzMj04"
/usr/bin/nohup /bin/bash -c "/bin/bash /opt/azure/containers/provision_start.sh"
