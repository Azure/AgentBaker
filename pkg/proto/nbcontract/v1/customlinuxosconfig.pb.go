// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: pkg/proto/nbcontract/v1/customlinuxosconfig.proto

package nbcontractv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom Linux Node OS Config
type CustomLinuxOSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sysctl settings for Linux agent nodes
	SysctlConfig *SysctlConfig `protobuf:"bytes,1,opt,name=sysctl_config,json=sysctlConfig,proto3" json:"sysctl_config,omitempty"`
	// Ulimit settings for Linux agent nodes
	UlimitConfig *UlimitConfig `protobuf:"bytes,2,opt,name=ulimit_config,json=ulimitConfig,proto3" json:"ulimit_config,omitempty"`
	// Enable or disable swap configuration
	EnableSwapConfig bool `protobuf:"varint,3,opt,name=enable_swap_config,json=enableSwapConfig,proto3" json:"enable_swap_config,omitempty"`
	// The size in MB of a swap file that will be created on each node
	SwapFileSize int32 `protobuf:"varint,4,opt,name=swap_file_size,json=swapFileSize,proto3" json:"swap_file_size,omitempty"`
	// Valid values are "always", "defer", "defer+madvise", "madvise" and "never"
	// If it's unset or set to empty string, it will use the default value in the VHD "always"
	TransparentHugepageSupport string `protobuf:"bytes,5,opt,name=transparent_hugepage_support,json=transparentHugepageSupport,proto3" json:"transparent_hugepage_support,omitempty"`
	// Valid values are "always", "madvise" and "never"
	// If it's unset or set to empty string, it will use the default value in the VHD "madvise"
	TransparentDefrag string `protobuf:"bytes,6,opt,name=transparent_defrag,json=transparentDefrag,proto3" json:"transparent_defrag,omitempty"`
}

func (x *CustomLinuxOSConfig) Reset() {
	*x = CustomLinuxOSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomLinuxOSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomLinuxOSConfig) ProtoMessage() {}

func (x *CustomLinuxOSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomLinuxOSConfig.ProtoReflect.Descriptor instead.
func (*CustomLinuxOSConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescGZIP(), []int{0}
}

func (x *CustomLinuxOSConfig) GetSysctlConfig() *SysctlConfig {
	if x != nil {
		return x.SysctlConfig
	}
	return nil
}

func (x *CustomLinuxOSConfig) GetUlimitConfig() *UlimitConfig {
	if x != nil {
		return x.UlimitConfig
	}
	return nil
}

func (x *CustomLinuxOSConfig) GetEnableSwapConfig() bool {
	if x != nil {
		return x.EnableSwapConfig
	}
	return false
}

func (x *CustomLinuxOSConfig) GetSwapFileSize() int32 {
	if x != nil {
		return x.SwapFileSize
	}
	return 0
}

func (x *CustomLinuxOSConfig) GetTransparentHugepageSupport() string {
	if x != nil {
		return x.TransparentHugepageSupport
	}
	return ""
}

func (x *CustomLinuxOSConfig) GetTransparentDefrag() string {
	if x != nil {
		return x.TransparentDefrag
	}
	return ""
}

type SysctlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// using optional here to allow detecting if the field is set or not (explicit presence in proto3)
	NetCoreSomaxconn               *int32  `protobuf:"varint,1,opt,name=NetCoreSomaxconn,proto3,oneof" json:"NetCoreSomaxconn,omitempty"`
	NetCoreNetdevMaxBacklog        *int32  `protobuf:"varint,2,opt,name=NetCoreNetdevMaxBacklog,proto3,oneof" json:"NetCoreNetdevMaxBacklog,omitempty"`
	NetCoreRmemDefault             *int32  `protobuf:"varint,3,opt,name=NetCoreRmemDefault,proto3,oneof" json:"NetCoreRmemDefault,omitempty"`
	NetCoreRmemMax                 *int32  `protobuf:"varint,4,opt,name=NetCoreRmemMax,proto3,oneof" json:"NetCoreRmemMax,omitempty"`
	NetCoreWmemDefault             *int32  `protobuf:"varint,5,opt,name=NetCoreWmemDefault,proto3,oneof" json:"NetCoreWmemDefault,omitempty"`
	NetCoreWmemMax                 *int32  `protobuf:"varint,6,opt,name=NetCoreWmemMax,proto3,oneof" json:"NetCoreWmemMax,omitempty"`
	NetCoreOptmemMax               *int32  `protobuf:"varint,7,opt,name=NetCoreOptmemMax,proto3,oneof" json:"NetCoreOptmemMax,omitempty"`
	NetIpv4TcpMaxSynBacklog        *int32  `protobuf:"varint,8,opt,name=NetIpv4TcpMaxSynBacklog,proto3,oneof" json:"NetIpv4TcpMaxSynBacklog,omitempty"`
	NetIpv4TcpMaxTwBuckets         *int32  `protobuf:"varint,9,opt,name=NetIpv4TcpMaxTwBuckets,proto3,oneof" json:"NetIpv4TcpMaxTwBuckets,omitempty"`
	NetIpv4TcpFinTimeout           *int32  `protobuf:"varint,10,opt,name=NetIpv4TcpFinTimeout,proto3,oneof" json:"NetIpv4TcpFinTimeout,omitempty"`
	NetIpv4TcpKeepaliveTime        *int32  `protobuf:"varint,11,opt,name=NetIpv4TcpKeepaliveTime,proto3,oneof" json:"NetIpv4TcpKeepaliveTime,omitempty"`
	NetIpv4TcpKeepaliveProbes      *int32  `protobuf:"varint,12,opt,name=NetIpv4TcpKeepaliveProbes,proto3,oneof" json:"NetIpv4TcpKeepaliveProbes,omitempty"`
	NetIpv4TcpkeepaliveIntvl       *int32  `protobuf:"varint,13,opt,name=NetIpv4TcpkeepaliveIntvl,proto3,oneof" json:"NetIpv4TcpkeepaliveIntvl,omitempty"`
	NetIpv4TcpTwReuse              *bool   `protobuf:"varint,14,opt,name=NetIpv4TcpTwReuse,proto3,oneof" json:"NetIpv4TcpTwReuse,omitempty"`
	NetIpv4IpLocalPortRange        *string `protobuf:"bytes,15,opt,name=NetIpv4IpLocalPortRange,proto3,oneof" json:"NetIpv4IpLocalPortRange,omitempty"`
	NetIpv4NeighDefaultGcThresh1   *int32  `protobuf:"varint,16,opt,name=NetIpv4NeighDefaultGcThresh1,proto3,oneof" json:"NetIpv4NeighDefaultGcThresh1,omitempty"`
	NetIpv4NeighDefaultGcThresh2   *int32  `protobuf:"varint,17,opt,name=NetIpv4NeighDefaultGcThresh2,proto3,oneof" json:"NetIpv4NeighDefaultGcThresh2,omitempty"`
	NetIpv4NeighDefaultGcThresh3   *int32  `protobuf:"varint,18,opt,name=NetIpv4NeighDefaultGcThresh3,proto3,oneof" json:"NetIpv4NeighDefaultGcThresh3,omitempty"`
	NetNetfilterNfConntrackMax     *int32  `protobuf:"varint,19,opt,name=NetNetfilterNfConntrackMax,proto3,oneof" json:"NetNetfilterNfConntrackMax,omitempty"`
	NetNetfilterNfConntrackBuckets *int32  `protobuf:"varint,20,opt,name=NetNetfilterNfConntrackBuckets,proto3,oneof" json:"NetNetfilterNfConntrackBuckets,omitempty"`
	FsInotifyMaxUserWatches        *int32  `protobuf:"varint,21,opt,name=FsInotifyMaxUserWatches,proto3,oneof" json:"FsInotifyMaxUserWatches,omitempty"`
	FsFileMax                      *int32  `protobuf:"varint,22,opt,name=FsFileMax,proto3,oneof" json:"FsFileMax,omitempty"`
	FsAioMaxNr                     *int32  `protobuf:"varint,23,opt,name=FsAioMaxNr,proto3,oneof" json:"FsAioMaxNr,omitempty"`
	FsNrOpen                       *int32  `protobuf:"varint,24,opt,name=FsNrOpen,proto3,oneof" json:"FsNrOpen,omitempty"`
	KernelThreadsMax               *int32  `protobuf:"varint,25,opt,name=KernelThreadsMax,proto3,oneof" json:"KernelThreadsMax,omitempty"`
	VMMaxMapCount                  *int32  `protobuf:"varint,26,opt,name=VMMaxMapCount,proto3,oneof" json:"VMMaxMapCount,omitempty"`
	VMSwappiness                   *int32  `protobuf:"varint,27,opt,name=VMSwappiness,proto3,oneof" json:"VMSwappiness,omitempty"`
	VMVfsCachePressure             *int32  `protobuf:"varint,28,opt,name=VMVfsCachePressure,proto3,oneof" json:"VMVfsCachePressure,omitempty"`
}

func (x *SysctlConfig) Reset() {
	*x = SysctlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysctlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysctlConfig) ProtoMessage() {}

func (x *SysctlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysctlConfig.ProtoReflect.Descriptor instead.
func (*SysctlConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescGZIP(), []int{1}
}

func (x *SysctlConfig) GetNetCoreSomaxconn() int32 {
	if x != nil && x.NetCoreSomaxconn != nil {
		return *x.NetCoreSomaxconn
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreNetdevMaxBacklog() int32 {
	if x != nil && x.NetCoreNetdevMaxBacklog != nil {
		return *x.NetCoreNetdevMaxBacklog
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreRmemDefault() int32 {
	if x != nil && x.NetCoreRmemDefault != nil {
		return *x.NetCoreRmemDefault
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreRmemMax() int32 {
	if x != nil && x.NetCoreRmemMax != nil {
		return *x.NetCoreRmemMax
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreWmemDefault() int32 {
	if x != nil && x.NetCoreWmemDefault != nil {
		return *x.NetCoreWmemDefault
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreWmemMax() int32 {
	if x != nil && x.NetCoreWmemMax != nil {
		return *x.NetCoreWmemMax
	}
	return 0
}

func (x *SysctlConfig) GetNetCoreOptmemMax() int32 {
	if x != nil && x.NetCoreOptmemMax != nil {
		return *x.NetCoreOptmemMax
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpMaxSynBacklog() int32 {
	if x != nil && x.NetIpv4TcpMaxSynBacklog != nil {
		return *x.NetIpv4TcpMaxSynBacklog
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpMaxTwBuckets() int32 {
	if x != nil && x.NetIpv4TcpMaxTwBuckets != nil {
		return *x.NetIpv4TcpMaxTwBuckets
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpFinTimeout() int32 {
	if x != nil && x.NetIpv4TcpFinTimeout != nil {
		return *x.NetIpv4TcpFinTimeout
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpKeepaliveTime() int32 {
	if x != nil && x.NetIpv4TcpKeepaliveTime != nil {
		return *x.NetIpv4TcpKeepaliveTime
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpKeepaliveProbes() int32 {
	if x != nil && x.NetIpv4TcpKeepaliveProbes != nil {
		return *x.NetIpv4TcpKeepaliveProbes
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpkeepaliveIntvl() int32 {
	if x != nil && x.NetIpv4TcpkeepaliveIntvl != nil {
		return *x.NetIpv4TcpkeepaliveIntvl
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4TcpTwReuse() bool {
	if x != nil && x.NetIpv4TcpTwReuse != nil {
		return *x.NetIpv4TcpTwReuse
	}
	return false
}

func (x *SysctlConfig) GetNetIpv4IpLocalPortRange() string {
	if x != nil && x.NetIpv4IpLocalPortRange != nil {
		return *x.NetIpv4IpLocalPortRange
	}
	return ""
}

func (x *SysctlConfig) GetNetIpv4NeighDefaultGcThresh1() int32 {
	if x != nil && x.NetIpv4NeighDefaultGcThresh1 != nil {
		return *x.NetIpv4NeighDefaultGcThresh1
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4NeighDefaultGcThresh2() int32 {
	if x != nil && x.NetIpv4NeighDefaultGcThresh2 != nil {
		return *x.NetIpv4NeighDefaultGcThresh2
	}
	return 0
}

func (x *SysctlConfig) GetNetIpv4NeighDefaultGcThresh3() int32 {
	if x != nil && x.NetIpv4NeighDefaultGcThresh3 != nil {
		return *x.NetIpv4NeighDefaultGcThresh3
	}
	return 0
}

func (x *SysctlConfig) GetNetNetfilterNfConntrackMax() int32 {
	if x != nil && x.NetNetfilterNfConntrackMax != nil {
		return *x.NetNetfilterNfConntrackMax
	}
	return 0
}

func (x *SysctlConfig) GetNetNetfilterNfConntrackBuckets() int32 {
	if x != nil && x.NetNetfilterNfConntrackBuckets != nil {
		return *x.NetNetfilterNfConntrackBuckets
	}
	return 0
}

func (x *SysctlConfig) GetFsInotifyMaxUserWatches() int32 {
	if x != nil && x.FsInotifyMaxUserWatches != nil {
		return *x.FsInotifyMaxUserWatches
	}
	return 0
}

func (x *SysctlConfig) GetFsFileMax() int32 {
	if x != nil && x.FsFileMax != nil {
		return *x.FsFileMax
	}
	return 0
}

func (x *SysctlConfig) GetFsAioMaxNr() int32 {
	if x != nil && x.FsAioMaxNr != nil {
		return *x.FsAioMaxNr
	}
	return 0
}

func (x *SysctlConfig) GetFsNrOpen() int32 {
	if x != nil && x.FsNrOpen != nil {
		return *x.FsNrOpen
	}
	return 0
}

func (x *SysctlConfig) GetKernelThreadsMax() int32 {
	if x != nil && x.KernelThreadsMax != nil {
		return *x.KernelThreadsMax
	}
	return 0
}

func (x *SysctlConfig) GetVMMaxMapCount() int32 {
	if x != nil && x.VMMaxMapCount != nil {
		return *x.VMMaxMapCount
	}
	return 0
}

func (x *SysctlConfig) GetVMSwappiness() int32 {
	if x != nil && x.VMSwappiness != nil {
		return *x.VMSwappiness
	}
	return 0
}

func (x *SysctlConfig) GetVMVfsCachePressure() int32 {
	if x != nil && x.VMVfsCachePressure != nil {
		return *x.VMVfsCachePressure
	}
	return 0
}

type UlimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// using optional here to allow detecting if the field is set or not (explicit presence in proto3)
	NoFile          *string `protobuf:"bytes,1,opt,name=NoFile,proto3,oneof" json:"NoFile,omitempty"`
	MaxLockedMemory *string `protobuf:"bytes,2,opt,name=MaxLockedMemory,proto3,oneof" json:"MaxLockedMemory,omitempty"`
}

func (x *UlimitConfig) Reset() {
	*x = UlimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UlimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UlimitConfig) ProtoMessage() {}

func (x *UlimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UlimitConfig.ProtoReflect.Descriptor instead.
func (*UlimitConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescGZIP(), []int{2}
}

func (x *UlimitConfig) GetNoFile() string {
	if x != nil && x.NoFile != nil {
		return *x.NoFile
	}
	return ""
}

func (x *UlimitConfig) GetMaxLockedMemory() string {
	if x != nil && x.MaxLockedMemory != nil {
		return *x.MaxLockedMemory
	}
	return ""
}

var File_pkg_proto_nbcontract_v1_customlinuxosconfig_proto protoreflect.FileDescriptor

var file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x6f, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x22, 0xde, 0x02, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x63, 0x74, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d,
	0x75, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x75, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x67, 0x65, 0x70, 0x61, 0x67, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x72, 0x61, 0x67, 0x22, 0xd9, 0x11, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x6f, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x10, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x6d, 0x61, 0x78, 0x63, 0x6f,
	0x6e, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65,
	0x4e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x65, 0x4e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x6d, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x12, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x6d, 0x65, 0x6d, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4e, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x6d, 0x65, 0x6d,
	0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x65, 0x57, 0x6d, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x12, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6d, 0x65,
	0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4e,
	0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6d,
	0x65, 0x6d, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74,
	0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x4e, 0x65, 0x74,
	0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x79, 0x6e, 0x42, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x17, 0x4e, 0x65,
	0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x79, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x49,
	0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x54, 0x77, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x16, 0x4e, 0x65, 0x74, 0x49,
	0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x54, 0x77, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34,
	0x54, 0x63, 0x70, 0x46, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x14, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63,
	0x70, 0x46, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x17, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0a, 0x52, 0x17, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x19, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x19, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x76, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0c, 0x52, 0x18, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x76, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x54,
	0x77, 0x52, 0x65, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x11,
	0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x54, 0x77, 0x52, 0x65, 0x75, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x49,
	0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x17, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34,
	0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x1c, 0x4e, 0x65, 0x74,
	0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x31, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c,
	0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x47, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x32, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x10, 0x52, 0x1c, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x32, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x63, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x1c, 0x4e,
	0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x47, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x33, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x66,
	0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x12, 0x52, 0x1a, 0x4e, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4e, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x4e, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x1e, 0x4e,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x66, 0x43, 0x6f, 0x6e,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x17, 0x46, 0x73, 0x49, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x17, 0x46, 0x73, 0x49, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61,
	0x78, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x46, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x15, 0x52, 0x09, 0x46, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x73, 0x41, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0a, 0x46, 0x73, 0x41, 0x69, 0x6f, 0x4d,
	0x61, 0x78, 0x4e, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x73, 0x4e, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x08, 0x46, 0x73, 0x4e,
	0x72, 0x4f, 0x70, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x18, 0x52, 0x10, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x56, 0x4d, 0x4d,
	0x61, 0x78, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x19, 0x52, 0x0d, 0x56, 0x4d, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x56, 0x4d, 0x53, 0x77, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52, 0x0c, 0x56, 0x4d,
	0x53, 0x77, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x12, 0x56, 0x4d, 0x56, 0x66, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1b, 0x52, 0x12, 0x56, 0x4d, 0x56,
	0x66, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6f,
	0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6e, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4e, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x6d, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4e,
	0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6d, 0x65, 0x6d, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4e, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65,
	0x57, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4e, 0x65, 0x74, 0x43,
	0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x79,
	0x6e, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x4e, 0x65, 0x74,
	0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4d, 0x61, 0x78, 0x54, 0x77, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x63, 0x70, 0x46, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x4e, 0x65, 0x74,
	0x49, 0x70, 0x76, 0x34, 0x54, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70,
	0x76, 0x34, 0x54, 0x63, 0x70, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x76, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x63, 0x70, 0x54, 0x77, 0x52, 0x65, 0x75, 0x73, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4e, 0x65,
	0x74, 0x49, 0x70, 0x76, 0x34, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70, 0x76,
	0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x63, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x31, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x4e, 0x65, 0x74, 0x49, 0x70,
	0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x63,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x32, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x4e, 0x65, 0x74, 0x49,
	0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x33, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x4e, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x4e, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x46,
	0x73, 0x49, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x73, 0x41, 0x69, 0x6f, 0x4d, 0x61,
	0x78, 0x4e, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x73, 0x4e, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x56, 0x4d, 0x4d, 0x61, 0x78, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x56, 0x4d, 0x53, 0x77,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x56, 0x4d, 0x56,
	0x66, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22,
	0x79, 0x0a, 0x0c, 0x55, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x0a, 0x06, 0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x4e, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x61, 0x78, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0xc4, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x6f, 0x73, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0e, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescOnce sync.Once
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescData = file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDesc
)

func file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescGZIP() []byte {
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescOnce.Do(func() {
		file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescData)
	})
	return file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDescData
}

var file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_goTypes = []interface{}{
	(*CustomLinuxOSConfig)(nil), // 0: nbcontract.v1.CustomLinuxOSConfig
	(*SysctlConfig)(nil),        // 1: nbcontract.v1.SysctlConfig
	(*UlimitConfig)(nil),        // 2: nbcontract.v1.UlimitConfig
}
var file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_depIdxs = []int32{
	1, // 0: nbcontract.v1.CustomLinuxOSConfig.sysctl_config:type_name -> nbcontract.v1.SysctlConfig
	2, // 1: nbcontract.v1.CustomLinuxOSConfig.ulimit_config:type_name -> nbcontract.v1.UlimitConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_init() }
func file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_init() {
	if File_pkg_proto_nbcontract_v1_customlinuxosconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomLinuxOSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysctlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UlimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_goTypes,
		DependencyIndexes: file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_depIdxs,
		MessageInfos:      file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_msgTypes,
	}.Build()
	File_pkg_proto_nbcontract_v1_customlinuxosconfig_proto = out.File
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_rawDesc = nil
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_goTypes = nil
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_depIdxs = nil
}
