// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: pkg/proto/nbcontract/v1/config.proto

package nbcontractv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// illustrative division only
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterCertificateAuthority string `protobuf:"bytes,1,opt,name=cluster_certificate_authority,json=clusterCertificateAuthority,proto3" json:"cluster_certificate_authority,omitempty"`
	// only required until Secure TLS bootstrapping in place
	// would use kubelet identity after that.
	TlsBootstrapToken string `protobuf:"bytes,2,opt,name=tls_bootstrap_token,json=tlsBootstrapToken,proto3" json:"tls_bootstrap_token,omitempty"`
	// cluster/user config
	KubernetesVersion      string            `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"` // Q: can this be auto-detected? Or is this part of specifying the desired node version?
	KubeBinaryConfig       *KubeBinaryConfig `protobuf:"bytes,4,opt,name=kube_binary_config,json=kubeBinaryConfig,proto3" json:"kube_binary_config,omitempty"`
	KubeproxyUrl           string            `protobuf:"bytes,6,opt,name=kubeproxy_url,json=kubeproxyUrl,proto3" json:"kubeproxy_url,omitempty"`
	ApiserverConfig        *ApiServerConfig  `protobuf:"bytes,7,opt,name=apiserver_config,json=apiserverConfig,proto3" json:"apiserver_config,omitempty"`
	SubscriptionId         string            `protobuf:"bytes,8,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	ResourceGroup          string            `protobuf:"bytes,9,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Location               string            `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	VmType                 string            `protobuf:"bytes,11,opt,name=vm_type,json=vmType,proto3" json:"vm_type,omitempty"`
	PrimaryAvailabilitySet string            `protobuf:"bytes,12,opt,name=primary_availability_set,json=primaryAvailabilitySet,proto3" json:"primary_availability_set,omitempty"`
	PrimaryScaleSet        string            `protobuf:"bytes,13,opt,name=primary_scale_set,json=primaryScaleSet,proto3" json:"primary_scale_set,omitempty"`
	IdentityConfig         *IdentityConfig   `protobuf:"bytes,15,opt,name=identity_config,json=identityConfig,proto3" json:"identity_config,omitempty"`
	RuncConfig             *RuncConfig       `protobuf:"bytes,16,opt,name=runc_config,json=runcConfig,proto3" json:"runc_config,omitempty"`
	// ... and a bunch of user-specified config
	RepoDepotEndpoint             string                `protobuf:"bytes,17,opt,name=repo_depot_endpoint,json=repoDepotEndpoint,proto3" json:"repo_depot_endpoint,omitempty"`
	LinuxAdminUsername            string                `protobuf:"bytes,18,opt,name=linux_admin_username,json=linuxAdminUsername,proto3" json:"linux_admin_username,omitempty"`
	TenantId                      string                `protobuf:"bytes,19,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	UseInstanceMetadata           bool                  `protobuf:"varint,20,opt,name=use_instance_metadata,json=useInstanceMetadata,proto3" json:"use_instance_metadata,omitempty"`
	LoadBalancerConfig            *LoadBalancerConfig   `protobuf:"bytes,21,opt,name=load_balancer_config,json=loadBalancerConfig,proto3" json:"load_balancer_config,omitempty"`
	ContainerdConfig              *ContainerdConfig     `protobuf:"bytes,22,opt,name=containerd_config,json=containerdConfig,proto3" json:"containerd_config,omitempty"`
	IsVhd                         bool                  `protobuf:"varint,23,opt,name=is_vhd,json=isVhd,proto3" json:"is_vhd,omitempty"`
	NetworkConfig                 *NetworkConfig        `protobuf:"bytes,24,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`
	IsSgxNode                     bool                  `protobuf:"varint,25,opt,name=is_sgx_node,json=isSgxNode,proto3" json:"is_sgx_node,omitempty"`
	TeleportConfig                *TeleportConfig       `protobuf:"bytes,26,opt,name=teleport_config,json=teleportConfig,proto3" json:"teleport_config,omitempty"`
	SshStatus                     FeatureState          `protobuf:"varint,27,opt,name=ssh_status,json=sshStatus,proto3,enum=nbcontract.v1.FeatureState" json:"ssh_status,omitempty"`
	UnattendedUpgradeStatus       FeatureState          `protobuf:"varint,28,opt,name=unattended_upgrade_status,json=unattendedUpgradeStatus,proto3,enum=nbcontract.v1.FeatureState" json:"unattended_upgrade_status,omitempty"`
	MessageOfTheDay               string                `protobuf:"bytes,29,opt,name=message_of_the_day,json=messageOfTheDay,proto3" json:"message_of_the_day,omitempty"`
	SwapFileConfig                *SwapFileConfig       `protobuf:"bytes,30,opt,name=swap_file_config,json=swapFileConfig,proto3" json:"swap_file_config,omitempty"`
	KubeletConfiguration          *KubeletConfiguration `protobuf:"bytes,31,opt,name=kubelet_configuration,json=kubeletConfiguration,proto3" json:"kubelet_configuration,omitempty"`
	HostsConfigAgentStatus        FeatureState          `protobuf:"varint,32,opt,name=hosts_config_agent_status,json=hostsConfigAgentStatus,proto3,enum=nbcontract.v1.FeatureState" json:"hosts_config_agent_status,omitempty"`
	CustomCaTrustConfig           *CustomCaTrustConfig  `protobuf:"bytes,33,opt,name=custom_ca_trust_config,json=customCaTrustConfig,proto3" json:"custom_ca_trust_config,omitempty"`
	ProvisionOutput               string                `protobuf:"bytes,34,opt,name=provision_output,json=provisionOutput,proto3" json:"provision_output,omitempty"`
	HyperkubeUrl                  string                `protobuf:"bytes,35,opt,name=hyperkube_url,json=hyperkubeUrl,proto3" json:"hyperkube_url,omitempty"`                                                                    //will be removed later
	MobyVersion                   string                `protobuf:"bytes,36,opt,name=moby_version,json=mobyVersion,proto3" json:"moby_version,omitempty"`                                                                       //will be removed later
	ContainerRuntime              string                `protobuf:"bytes,37,opt,name=container_runtime,json=containerRuntime,proto3" json:"container_runtime,omitempty"`                                                        //will be removed later
	CliTool                       string                `protobuf:"bytes,38,opt,name=cli_tool,json=cliTool,proto3" json:"cli_tool,omitempty"`                                                                                   //will be removed later
	NeedsContainerd               bool                  `protobuf:"varint,39,opt,name=needs_containerd,json=needsContainerd,proto3" json:"needs_containerd,omitempty"`                                                          //will be removed later
	IsKrustlet                    bool                  `protobuf:"varint,40,opt,name=is_krustlet,json=isKrustlet,proto3" json:"is_krustlet,omitempty"`                                                                         //can be removed, this only depends on workload runtime, which is a better contract input
	NeedsDockerLogin              bool                  `protobuf:"varint,41,opt,name=needs_docker_login,json=needsDockerLogin,proto3" json:"needs_docker_login,omitempty"`                                                     //useless, will remove
	Ipv6DualStackEnabled          *FeatureState         `protobuf:"varint,42,opt,name=ipv6_dual_stack_enabled,json=ipv6DualStackEnabled,proto3,enum=nbcontract.v1.FeatureState,oneof" json:"ipv6_dual_stack_enabled,omitempty"` //seems very specific to RP, discuss with Alex wrt Karpenter
	OutboundCommand               *string               `protobuf:"bytes,43,opt,name=outbound_command,json=outboundCommand,proto3,oneof" json:"outbound_command,omitempty"`                                                     //this is const depending on cloud, can be removed later with smart refactoring
	EnableUnattendedUpgrade       *bool                 `protobuf:"varint,44,opt,name=enable_unattended_upgrade,json=enableUnattendedUpgrade,proto3,oneof" json:"enable_unattended_upgrade,omitempty"`                          //seems the current API is messed up with naming, fix soon
	EnsureNoDupePromiscuousBridge *bool                 `protobuf:"varint,45,opt,name=ensure_no_dupe_promiscuous_bridge,json=ensureNoDupePromiscuousBridge,proto3,oneof" json:"ensure_no_dupe_promiscuous_bridge,omitempty"`    //this is little weird, check cse_cmd.sh for actual condition
	CustomSearchDomain            *CustomSearchDomain   `protobuf:"bytes,46,opt,name=custom_search_domain,json=customSearchDomain,proto3,oneof" json:"custom_search_domain,omitempty"`
	CustomLinuxOsConfig           *CustomLinuxOSConfig  `protobuf:"bytes,47,opt,name=custom_linux_os_config,json=customLinuxOsConfig,proto3,oneof" json:"custom_linux_os_config,omitempty"`
	CustomCloudConfig             *CustomCloudConfig    `protobuf:"bytes,48,opt,name=custom_cloud_config,json=customCloudConfig,proto3" json:"custom_cloud_config,omitempty"`
	// we do not need these in the final contract, these are consts
	CseHelperFilepath          string       `protobuf:"bytes,49,opt,name=cse_helper_filepath,json=cseHelperFilepath,proto3" json:"cse_helper_filepath,omitempty"`
	CseDistroHelperFilepath    string       `protobuf:"bytes,50,opt,name=cse_distro_helper_filepath,json=cseDistroHelperFilepath,proto3" json:"cse_distro_helper_filepath,omitempty"`
	CseInstallFilepath         string       `protobuf:"bytes,51,opt,name=cse_install_filepath,json=cseInstallFilepath,proto3" json:"cse_install_filepath,omitempty"`
	CseDistroInstallFilepath   string       `protobuf:"bytes,52,opt,name=cse_distro_install_filepath,json=cseDistroInstallFilepath,proto3" json:"cse_distro_install_filepath,omitempty"`
	CseConfigFilepath          string       `protobuf:"bytes,53,opt,name=cse_config_filepath,json=cseConfigFilepath,proto3" json:"cse_config_filepath,omitempty"`
	Dhcpv6ServiceFilepath      string       `protobuf:"bytes,54,opt,name=dhcpv6_service_filepath,json=dhcpv6ServiceFilepath,proto3" json:"dhcpv6_service_filepath,omitempty"`
	Dhcpv6ConfigFilepath       string       `protobuf:"bytes,55,opt,name=dhcpv6_config_filepath,json=dhcpv6ConfigFilepath,proto3" json:"dhcpv6_config_filepath,omitempty"`
	AzurePrivateRegistryServer string       `protobuf:"bytes,56,opt,name=azure_private_registry_server,json=azurePrivateRegistryServer,proto3" json:"azure_private_registry_server,omitempty"`
	PrivateEgressProxyAddress  string       `protobuf:"bytes,57,opt,name=private_egress_proxy_address,json=privateEgressProxyAddress,proto3" json:"private_egress_proxy_address,omitempty"`
	ArtifactStreamingEnabled   FeatureState `protobuf:"varint,58,opt,name=artifact_streaming_enabled,json=artifactStreamingEnabled,proto3,enum=nbcontract.v1.FeatureState" json:"artifact_streaming_enabled,omitempty"`
	IsKata                     bool         `protobuf:"varint,59,opt,name=is_kata,json=isKata,proto3" json:"is_kata,omitempty"`                      // we can calculate this on the VHD, will remove from final contract
	NeedsCgorupv2              bool         `protobuf:"varint,60,opt,name=needs_cgorupv2,json=needsCgorupv2,proto3" json:"needs_cgorupv2,omitempty"` // we can calculate this on the VHD, will remove from final contract
	// Here begins the final contract
	HttpProxyConfig *HTTPProxyConfig `protobuf:"bytes,61,opt,name=http_proxy_config,json=httpProxyConfig,proto3,oneof" json:"http_proxy_config,omitempty"`
	GpuConfig       *GPUConfig       `protobuf:"bytes,62,opt,name=gpu_config,json=gpuConfig,proto3,oneof" json:"gpu_config,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetClusterCertificateAuthority() string {
	if x != nil {
		return x.ClusterCertificateAuthority
	}
	return ""
}

func (x *Configuration) GetTlsBootstrapToken() string {
	if x != nil {
		return x.TlsBootstrapToken
	}
	return ""
}

func (x *Configuration) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *Configuration) GetKubeBinaryConfig() *KubeBinaryConfig {
	if x != nil {
		return x.KubeBinaryConfig
	}
	return nil
}

func (x *Configuration) GetKubeproxyUrl() string {
	if x != nil {
		return x.KubeproxyUrl
	}
	return ""
}

func (x *Configuration) GetApiserverConfig() *ApiServerConfig {
	if x != nil {
		return x.ApiserverConfig
	}
	return nil
}

func (x *Configuration) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Configuration) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *Configuration) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Configuration) GetVmType() string {
	if x != nil {
		return x.VmType
	}
	return ""
}

func (x *Configuration) GetPrimaryAvailabilitySet() string {
	if x != nil {
		return x.PrimaryAvailabilitySet
	}
	return ""
}

func (x *Configuration) GetPrimaryScaleSet() string {
	if x != nil {
		return x.PrimaryScaleSet
	}
	return ""
}

func (x *Configuration) GetIdentityConfig() *IdentityConfig {
	if x != nil {
		return x.IdentityConfig
	}
	return nil
}

func (x *Configuration) GetRuncConfig() *RuncConfig {
	if x != nil {
		return x.RuncConfig
	}
	return nil
}

func (x *Configuration) GetRepoDepotEndpoint() string {
	if x != nil {
		return x.RepoDepotEndpoint
	}
	return ""
}

func (x *Configuration) GetLinuxAdminUsername() string {
	if x != nil {
		return x.LinuxAdminUsername
	}
	return ""
}

func (x *Configuration) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Configuration) GetUseInstanceMetadata() bool {
	if x != nil {
		return x.UseInstanceMetadata
	}
	return false
}

func (x *Configuration) GetLoadBalancerConfig() *LoadBalancerConfig {
	if x != nil {
		return x.LoadBalancerConfig
	}
	return nil
}

func (x *Configuration) GetContainerdConfig() *ContainerdConfig {
	if x != nil {
		return x.ContainerdConfig
	}
	return nil
}

func (x *Configuration) GetIsVhd() bool {
	if x != nil {
		return x.IsVhd
	}
	return false
}

func (x *Configuration) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *Configuration) GetIsSgxNode() bool {
	if x != nil {
		return x.IsSgxNode
	}
	return false
}

func (x *Configuration) GetTeleportConfig() *TeleportConfig {
	if x != nil {
		return x.TeleportConfig
	}
	return nil
}

func (x *Configuration) GetSshStatus() FeatureState {
	if x != nil {
		return x.SshStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetUnattendedUpgradeStatus() FeatureState {
	if x != nil {
		return x.UnattendedUpgradeStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetMessageOfTheDay() string {
	if x != nil {
		return x.MessageOfTheDay
	}
	return ""
}

func (x *Configuration) GetSwapFileConfig() *SwapFileConfig {
	if x != nil {
		return x.SwapFileConfig
	}
	return nil
}

func (x *Configuration) GetKubeletConfiguration() *KubeletConfiguration {
	if x != nil {
		return x.KubeletConfiguration
	}
	return nil
}

func (x *Configuration) GetHostsConfigAgentStatus() FeatureState {
	if x != nil {
		return x.HostsConfigAgentStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetCustomCaTrustConfig() *CustomCaTrustConfig {
	if x != nil {
		return x.CustomCaTrustConfig
	}
	return nil
}

func (x *Configuration) GetProvisionOutput() string {
	if x != nil {
		return x.ProvisionOutput
	}
	return ""
}

func (x *Configuration) GetHyperkubeUrl() string {
	if x != nil {
		return x.HyperkubeUrl
	}
	return ""
}

func (x *Configuration) GetMobyVersion() string {
	if x != nil {
		return x.MobyVersion
	}
	return ""
}

func (x *Configuration) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *Configuration) GetCliTool() string {
	if x != nil {
		return x.CliTool
	}
	return ""
}

func (x *Configuration) GetNeedsContainerd() bool {
	if x != nil {
		return x.NeedsContainerd
	}
	return false
}

func (x *Configuration) GetIsKrustlet() bool {
	if x != nil {
		return x.IsKrustlet
	}
	return false
}

func (x *Configuration) GetNeedsDockerLogin() bool {
	if x != nil {
		return x.NeedsDockerLogin
	}
	return false
}

func (x *Configuration) GetIpv6DualStackEnabled() FeatureState {
	if x != nil && x.Ipv6DualStackEnabled != nil {
		return *x.Ipv6DualStackEnabled
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetOutboundCommand() string {
	if x != nil && x.OutboundCommand != nil {
		return *x.OutboundCommand
	}
	return ""
}

func (x *Configuration) GetEnableUnattendedUpgrade() bool {
	if x != nil && x.EnableUnattendedUpgrade != nil {
		return *x.EnableUnattendedUpgrade
	}
	return false
}

func (x *Configuration) GetEnsureNoDupePromiscuousBridge() bool {
	if x != nil && x.EnsureNoDupePromiscuousBridge != nil {
		return *x.EnsureNoDupePromiscuousBridge
	}
	return false
}

func (x *Configuration) GetCustomSearchDomain() *CustomSearchDomain {
	if x != nil {
		return x.CustomSearchDomain
	}
	return nil
}

func (x *Configuration) GetCustomLinuxOsConfig() *CustomLinuxOSConfig {
	if x != nil {
		return x.CustomLinuxOsConfig
	}
	return nil
}

func (x *Configuration) GetCustomCloudConfig() *CustomCloudConfig {
	if x != nil {
		return x.CustomCloudConfig
	}
	return nil
}

func (x *Configuration) GetCseHelperFilepath() string {
	if x != nil {
		return x.CseHelperFilepath
	}
	return ""
}

func (x *Configuration) GetCseDistroHelperFilepath() string {
	if x != nil {
		return x.CseDistroHelperFilepath
	}
	return ""
}

func (x *Configuration) GetCseInstallFilepath() string {
	if x != nil {
		return x.CseInstallFilepath
	}
	return ""
}

func (x *Configuration) GetCseDistroInstallFilepath() string {
	if x != nil {
		return x.CseDistroInstallFilepath
	}
	return ""
}

func (x *Configuration) GetCseConfigFilepath() string {
	if x != nil {
		return x.CseConfigFilepath
	}
	return ""
}

func (x *Configuration) GetDhcpv6ServiceFilepath() string {
	if x != nil {
		return x.Dhcpv6ServiceFilepath
	}
	return ""
}

func (x *Configuration) GetDhcpv6ConfigFilepath() string {
	if x != nil {
		return x.Dhcpv6ConfigFilepath
	}
	return ""
}

func (x *Configuration) GetAzurePrivateRegistryServer() string {
	if x != nil {
		return x.AzurePrivateRegistryServer
	}
	return ""
}

func (x *Configuration) GetPrivateEgressProxyAddress() string {
	if x != nil {
		return x.PrivateEgressProxyAddress
	}
	return ""
}

func (x *Configuration) GetArtifactStreamingEnabled() FeatureState {
	if x != nil {
		return x.ArtifactStreamingEnabled
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetIsKata() bool {
	if x != nil {
		return x.IsKata
	}
	return false
}

func (x *Configuration) GetNeedsCgorupv2() bool {
	if x != nil {
		return x.NeedsCgorupv2
	}
	return false
}

func (x *Configuration) GetHttpProxyConfig() *HTTPProxyConfig {
	if x != nil {
		return x.HttpProxyConfig
	}
	return nil
}

func (x *Configuration) GetGpuConfig() *GPUConfig {
	if x != nil {
		return x.GpuConfig
	}
	return nil
}

type CustomCaTrustConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomCaTrustStatus FeatureState `protobuf:"varint,1,opt,name=custom_ca_trust_status,json=customCaTrustStatus,proto3,enum=nbcontract.v1.FeatureState" json:"custom_ca_trust_status,omitempty"`
	CustomCaTrustCount  int32        `protobuf:"varint,2,opt,name=custom_ca_trust_count,json=customCaTrustCount,proto3" json:"custom_ca_trust_count,omitempty"`
	CustomCaCerts       []string     `protobuf:"bytes,3,rep,name=custom_ca_certs,json=customCaCerts,proto3" json:"custom_ca_certs,omitempty"`
}

func (x *CustomCaTrustConfig) Reset() {
	*x = CustomCaTrustConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCaTrustConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCaTrustConfig) ProtoMessage() {}

func (x *CustomCaTrustConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCaTrustConfig.ProtoReflect.Descriptor instead.
func (*CustomCaTrustConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CustomCaTrustConfig) GetCustomCaTrustStatus() FeatureState {
	if x != nil {
		return x.CustomCaTrustStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *CustomCaTrustConfig) GetCustomCaTrustCount() int32 {
	if x != nil {
		return x.CustomCaTrustCount
	}
	return 0
}

func (x *CustomCaTrustConfig) GetCustomCaCerts() []string {
	if x != nil {
		return x.CustomCaCerts
	}
	return nil
}

type ApiServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiserverPublicKey string `protobuf:"bytes,1,opt,name=apiserver_public_key,json=apiserverPublicKey,proto3" json:"apiserver_public_key,omitempty"`
	ApiserverName      string `protobuf:"bytes,2,opt,name=apiserver_name,json=apiserverName,proto3" json:"apiserver_name,omitempty"`
}

func (x *ApiServerConfig) Reset() {
	*x = ApiServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiServerConfig) ProtoMessage() {}

func (x *ApiServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiServerConfig.ProtoReflect.Descriptor instead.
func (*ApiServerConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *ApiServerConfig) GetApiserverPublicKey() string {
	if x != nil {
		return x.ApiserverPublicKey
	}
	return ""
}

func (x *ApiServerConfig) GetApiserverName() string {
	if x != nil {
		return x.ApiserverName
	}
	return ""
}

type TLSBootstrapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// discuss whether this should be featureState or bool
	// understand how defaulting works for enum, because we want default to be false
	TlsBootstrapping                       FeatureState `protobuf:"varint,1,opt,name=tls_bootstrapping,json=tlsBootstrapping,proto3,enum=nbcontract.v1.FeatureState" json:"tls_bootstrapping,omitempty"`
	SecureTlsBootstrapping                 FeatureState `protobuf:"varint,2,opt,name=secure_tls_bootstrapping,json=secureTlsBootstrapping,proto3,enum=nbcontract.v1.FeatureState" json:"secure_tls_bootstrapping,omitempty"`
	TlsBootstrapToken                      string       `protobuf:"bytes,3,opt,name=tls_bootstrap_token,json=tlsBootstrapToken,proto3" json:"tls_bootstrap_token,omitempty"`
	CustomSecureTlsBootstrapAppserverAppid string       `protobuf:"bytes,4,opt,name=custom_secure_tls_bootstrap_appserver_appid,json=customSecureTlsBootstrapAppserverAppid,proto3" json:"custom_secure_tls_bootstrap_appserver_appid,omitempty"`
}

func (x *TLSBootstrapping) Reset() {
	*x = TLSBootstrapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSBootstrapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSBootstrapping) ProtoMessage() {}

func (x *TLSBootstrapping) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSBootstrapping.ProtoReflect.Descriptor instead.
func (*TLSBootstrapping) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *TLSBootstrapping) GetTlsBootstrapping() FeatureState {
	if x != nil {
		return x.TlsBootstrapping
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *TLSBootstrapping) GetSecureTlsBootstrapping() FeatureState {
	if x != nil {
		return x.SecureTlsBootstrapping
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *TLSBootstrapping) GetTlsBootstrapToken() string {
	if x != nil {
		return x.TlsBootstrapToken
	}
	return ""
}

func (x *TLSBootstrapping) GetCustomSecureTlsBootstrapAppserverAppid() string {
	if x != nil {
		return x.CustomSecureTlsBootstrapAppserverAppid
	}
	return ""
}

type CustomCloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetEnvironment    string `protobuf:"bytes,1,opt,name=target_environment,json=targetEnvironment,proto3" json:"target_environment,omitempty"`
	TargetCloud          string `protobuf:"bytes,2,opt,name=target_cloud,json=targetCloud,proto3" json:"target_cloud,omitempty"` // can probably get rid of this, analyze more
	IsCustomCloud        bool   `protobuf:"varint,3,opt,name=is_custom_cloud,json=isCustomCloud,proto3" json:"is_custom_cloud,omitempty"`
	CustomEnvJsonContent string `protobuf:"bytes,4,opt,name=custom_env_json_content,json=customEnvJsonContent,proto3" json:"custom_env_json_content,omitempty"` // can be generated on the VHD, also rename
}

func (x *CustomCloudConfig) Reset() {
	*x = CustomCloudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCloudConfig) ProtoMessage() {}

func (x *CustomCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontract_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCloudConfig.ProtoReflect.Descriptor instead.
func (*CustomCloudConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *CustomCloudConfig) GetTargetEnvironment() string {
	if x != nil {
		return x.TargetEnvironment
	}
	return ""
}

func (x *CustomCloudConfig) GetTargetCloud() string {
	if x != nil {
		return x.TargetCloud
	}
	return ""
}

func (x *CustomCloudConfig) GetIsCustomCloud() bool {
	if x != nil {
		return x.IsCustomCloud
	}
	return false
}

func (x *CustomCloudConfig) GetCustomEnvJsonContent() string {
	if x != nil {
		return x.CustomEnvJsonContent
	}
	return ""
}

var File_pkg_proto_nbcontract_v1_config_proto protoreflect.FileDescriptor

var file_pkg_proto_nbcontract_v1_config_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x2d, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x70,
	0x75, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x6f, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e,
	0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x77, 0x61, 0x70, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x1c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6c,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x75, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a,
	0x10, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e,
	0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x75, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x14, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x62, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x76, 0x68, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x56, 0x68, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x73, 0x67, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x67, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x73, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a,
	0x19, 0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x75,
	0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x15,
	0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57,
	0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x6b, 0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x6f, 0x62, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x5f, 0x74,
	0x6f, 0x6f, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x54, 0x6f,
	0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4b, 0x72, 0x75, 0x73, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x17,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x70,
	0x76, 0x36, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x21, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63,
	0x75, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x1d, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x44, 0x75, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x04, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x5c, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f,
	0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x4f, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x05, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e,
	0x75, 0x78, 0x4f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x62, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x73,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x3b, 0x0a, 0x1a, 0x63, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x73, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x73, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a,
	0x17, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1d, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x59, 0x0a, 0x1a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x18, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6b, 0x61, 0x74, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4b,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x67, 0x6f,
	0x72, 0x75, 0x70, 0x76, 0x32, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x43, 0x67, 0x6f, 0x72, 0x75, 0x70, 0x76, 0x32, 0x12, 0x4f, 0x0a, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x67,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x07, 0x52, 0x09, 0x67, 0x70, 0x75,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x65, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x0f,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x10, 0x54, 0x4c, 0x53,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x11, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x6c,
	0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6c, 0x73,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b,
	0x0a, 0x2b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x26, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x54, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x41, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x11,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x76, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0xb7, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e,
	0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x62, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa,
	0x02, 0x0d, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0d, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x19, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4e, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_nbcontract_v1_config_proto_rawDescOnce sync.Once
	file_pkg_proto_nbcontract_v1_config_proto_rawDescData = file_pkg_proto_nbcontract_v1_config_proto_rawDesc
)

func file_pkg_proto_nbcontract_v1_config_proto_rawDescGZIP() []byte {
	file_pkg_proto_nbcontract_v1_config_proto_rawDescOnce.Do(func() {
		file_pkg_proto_nbcontract_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_nbcontract_v1_config_proto_rawDescData)
	})
	return file_pkg_proto_nbcontract_v1_config_proto_rawDescData
}

var file_pkg_proto_nbcontract_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pkg_proto_nbcontract_v1_config_proto_goTypes = []interface{}{
	(*Configuration)(nil),        // 0: nbcontract.v1.Configuration
	(*CustomCaTrustConfig)(nil),  // 1: nbcontract.v1.CustomCaTrustConfig
	(*ApiServerConfig)(nil),      // 2: nbcontract.v1.ApiServerConfig
	(*TLSBootstrapping)(nil),     // 3: nbcontract.v1.TLSBootstrapping
	(*CustomCloudConfig)(nil),    // 4: nbcontract.v1.CustomCloudConfig
	(*KubeBinaryConfig)(nil),     // 5: nbcontract.v1.KubeBinaryConfig
	(*IdentityConfig)(nil),       // 6: nbcontract.v1.IdentityConfig
	(*RuncConfig)(nil),           // 7: nbcontract.v1.RuncConfig
	(*LoadBalancerConfig)(nil),   // 8: nbcontract.v1.LoadBalancerConfig
	(*ContainerdConfig)(nil),     // 9: nbcontract.v1.ContainerdConfig
	(*NetworkConfig)(nil),        // 10: nbcontract.v1.NetworkConfig
	(*TeleportConfig)(nil),       // 11: nbcontract.v1.TeleportConfig
	(FeatureState)(0),            // 12: nbcontract.v1.FeatureState
	(*SwapFileConfig)(nil),       // 13: nbcontract.v1.SwapFileConfig
	(*KubeletConfiguration)(nil), // 14: nbcontract.v1.KubeletConfiguration
	(*CustomSearchDomain)(nil),   // 15: nbcontract.v1.CustomSearchDomain
	(*CustomLinuxOSConfig)(nil),  // 16: nbcontract.v1.CustomLinuxOSConfig
	(*HTTPProxyConfig)(nil),      // 17: nbcontract.v1.HTTPProxyConfig
	(*GPUConfig)(nil),            // 18: nbcontract.v1.GPUConfig
}
var file_pkg_proto_nbcontract_v1_config_proto_depIdxs = []int32{
	5,  // 0: nbcontract.v1.Configuration.kube_binary_config:type_name -> nbcontract.v1.KubeBinaryConfig
	2,  // 1: nbcontract.v1.Configuration.apiserver_config:type_name -> nbcontract.v1.ApiServerConfig
	6,  // 2: nbcontract.v1.Configuration.identity_config:type_name -> nbcontract.v1.IdentityConfig
	7,  // 3: nbcontract.v1.Configuration.runc_config:type_name -> nbcontract.v1.RuncConfig
	8,  // 4: nbcontract.v1.Configuration.load_balancer_config:type_name -> nbcontract.v1.LoadBalancerConfig
	9,  // 5: nbcontract.v1.Configuration.containerd_config:type_name -> nbcontract.v1.ContainerdConfig
	10, // 6: nbcontract.v1.Configuration.network_config:type_name -> nbcontract.v1.NetworkConfig
	11, // 7: nbcontract.v1.Configuration.teleport_config:type_name -> nbcontract.v1.TeleportConfig
	12, // 8: nbcontract.v1.Configuration.ssh_status:type_name -> nbcontract.v1.FeatureState
	12, // 9: nbcontract.v1.Configuration.unattended_upgrade_status:type_name -> nbcontract.v1.FeatureState
	13, // 10: nbcontract.v1.Configuration.swap_file_config:type_name -> nbcontract.v1.SwapFileConfig
	14, // 11: nbcontract.v1.Configuration.kubelet_configuration:type_name -> nbcontract.v1.KubeletConfiguration
	12, // 12: nbcontract.v1.Configuration.hosts_config_agent_status:type_name -> nbcontract.v1.FeatureState
	1,  // 13: nbcontract.v1.Configuration.custom_ca_trust_config:type_name -> nbcontract.v1.CustomCaTrustConfig
	12, // 14: nbcontract.v1.Configuration.ipv6_dual_stack_enabled:type_name -> nbcontract.v1.FeatureState
	15, // 15: nbcontract.v1.Configuration.custom_search_domain:type_name -> nbcontract.v1.CustomSearchDomain
	16, // 16: nbcontract.v1.Configuration.custom_linux_os_config:type_name -> nbcontract.v1.CustomLinuxOSConfig
	4,  // 17: nbcontract.v1.Configuration.custom_cloud_config:type_name -> nbcontract.v1.CustomCloudConfig
	12, // 18: nbcontract.v1.Configuration.artifact_streaming_enabled:type_name -> nbcontract.v1.FeatureState
	17, // 19: nbcontract.v1.Configuration.http_proxy_config:type_name -> nbcontract.v1.HTTPProxyConfig
	18, // 20: nbcontract.v1.Configuration.gpu_config:type_name -> nbcontract.v1.GPUConfig
	12, // 21: nbcontract.v1.CustomCaTrustConfig.custom_ca_trust_status:type_name -> nbcontract.v1.FeatureState
	12, // 22: nbcontract.v1.TLSBootstrapping.tls_bootstrapping:type_name -> nbcontract.v1.FeatureState
	12, // 23: nbcontract.v1.TLSBootstrapping.secure_tls_bootstrapping:type_name -> nbcontract.v1.FeatureState
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pkg_proto_nbcontract_v1_config_proto_init() }
func file_pkg_proto_nbcontract_v1_config_proto_init() {
	if File_pkg_proto_nbcontract_v1_config_proto != nil {
		return
	}
	file_pkg_proto_nbcontract_v1_httpproxyconfig_proto_init()
	file_pkg_proto_nbcontract_v1_gpuconfig_proto_init()
	file_pkg_proto_nbcontract_v1_customlinuxosconfig_proto_init()
	file_pkg_proto_nbcontract_v1_kubebinaryconfig_proto_init()
	file_pkg_proto_nbcontract_v1_customsearchdomainconfig_proto_init()
	file_pkg_proto_nbcontract_v1_containerdconfig_proto_init()
	file_pkg_proto_nbcontract_v1_networkconfig_proto_init()
	file_pkg_proto_nbcontract_v1_identityconfig_proto_init()
	file_pkg_proto_nbcontract_v1_loadbalancerconfig_proto_init()
	file_pkg_proto_nbcontract_v1_kubeletconfig_proto_init()
	file_pkg_proto_nbcontract_v1_featurestate_proto_init()
	file_pkg_proto_nbcontract_v1_teleportconfig_proto_init()
	file_pkg_proto_nbcontract_v1_runcconfig_proto_init()
	file_pkg_proto_nbcontract_v1_swapfileconfig_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_nbcontract_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCaTrustConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSBootstrapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontract_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCloudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_nbcontract_v1_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_nbcontract_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_nbcontract_v1_config_proto_goTypes,
		DependencyIndexes: file_pkg_proto_nbcontract_v1_config_proto_depIdxs,
		MessageInfos:      file_pkg_proto_nbcontract_v1_config_proto_msgTypes,
	}.Build()
	File_pkg_proto_nbcontract_v1_config_proto = out.File
	file_pkg_proto_nbcontract_v1_config_proto_rawDesc = nil
	file_pkg_proto_nbcontract_v1_config_proto_goTypes = nil
	file_pkg_proto_nbcontract_v1_config_proto_depIdxs = nil
}
