// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pkg/proto/nbcontracttester/v1/config.proto

package nbcontracttesterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterCertificateAuthority           string               `protobuf:"bytes,1,opt,name=cluster_certificate_authority,json=clusterCertificateAuthority,proto3" json:"cluster_certificate_authority,omitempty"`
	RepoDepotEndpoint                     string               `protobuf:"bytes,2,opt,name=repo_depot_endpoint,json=repoDepotEndpoint,proto3" json:"repo_depot_endpoint,omitempty"`
	LinuxAdminUsername                    string               `protobuf:"bytes,3,opt,name=linux_admin_username,json=linuxAdminUsername,proto3" json:"linux_admin_username,omitempty"`
	MobyVersion                           string               `protobuf:"bytes,4,opt,name=moby_version,json=mobyVersion,proto3" json:"moby_version,omitempty"`
	TenantId                              string               `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	KubernetesVersion                     string               `protobuf:"bytes,6,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	HyperkubeUrl                          string               `protobuf:"bytes,7,opt,name=hyperkube_url,json=hyperkubeUrl,proto3" json:"hyperkube_url,omitempty"`
	KubeBinaryUrl                         string               `protobuf:"bytes,8,opt,name=kube_binary_url,json=kubeBinaryUrl,proto3" json:"kube_binary_url,omitempty"`
	CustomKubeBinaryUrl                   string               `protobuf:"bytes,9,opt,name=custom_kube_binary_url,json=customKubeBinaryUrl,proto3" json:"custom_kube_binary_url,omitempty"`
	KubeproxyUrl                          string               `protobuf:"bytes,10,opt,name=kubeproxy_url,json=kubeproxyUrl,proto3" json:"kubeproxy_url,omitempty"`
	ApiserverPublicKey                    string               `protobuf:"bytes,11,opt,name=apiserver_public_key,json=apiserverPublicKey,proto3" json:"apiserver_public_key,omitempty"`
	SubscriptionId                        string               `protobuf:"bytes,12,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	ResourceGroup                         string               `protobuf:"bytes,13,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Location                              string               `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	VmType                                string               `protobuf:"bytes,15,opt,name=vm_type,json=vmType,proto3" json:"vm_type,omitempty"`
	Subnet                                string               `protobuf:"bytes,16,opt,name=subnet,proto3" json:"subnet,omitempty"`
	NetworkSecurityGroup                  string               `protobuf:"bytes,17,opt,name=network_security_group,json=networkSecurityGroup,proto3" json:"network_security_group,omitempty"`
	VirtualNetworkName                    string               `protobuf:"bytes,18,opt,name=virtual_network_name,json=virtualNetworkName,proto3" json:"virtual_network_name,omitempty"`
	VirtualNetworkResourceGroup           string               `protobuf:"bytes,19,opt,name=virtual_network_resource_group,json=virtualNetworkResourceGroup,proto3" json:"virtual_network_resource_group,omitempty"`
	RouteTable                            string               `protobuf:"bytes,20,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
	PrimaryAvailabilitySet                string               `protobuf:"bytes,21,opt,name=primary_availability_set,json=primaryAvailabilitySet,proto3" json:"primary_availability_set,omitempty"`
	PrimaryScaleSet                       string               `protobuf:"bytes,22,opt,name=primary_scale_set,json=primaryScaleSet,proto3" json:"primary_scale_set,omitempty"`
	ServicePrincipalClientId              string               `protobuf:"bytes,23,opt,name=service_principal_client_id,json=servicePrincipalClientId,proto3" json:"service_principal_client_id,omitempty"`
	NetworkPlugin                         string               `protobuf:"bytes,24,opt,name=network_plugin,json=networkPlugin,proto3" json:"network_plugin,omitempty"`
	NetworkPolicy                         string               `protobuf:"bytes,25,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty"`
	VnetCniPluginsUrl                     string               `protobuf:"bytes,26,opt,name=vnet_cni_plugins_url,json=vnetCniPluginsUrl,proto3" json:"vnet_cni_plugins_url,omitempty"`
	CniPluginsUrl                         string               `protobuf:"bytes,27,opt,name=cni_plugins_url,json=cniPluginsUrl,proto3" json:"cni_plugins_url,omitempty"`
	CloudProviderBackoff                  string               `protobuf:"bytes,28,opt,name=cloud_provider_backoff,json=cloudProviderBackoff,proto3" json:"cloud_provider_backoff,omitempty"`
	CloudProviderBackoffMode              string               `protobuf:"bytes,29,opt,name=cloud_provider_backoff_mode,json=cloudProviderBackoffMode,proto3" json:"cloud_provider_backoff_mode,omitempty"`
	CloudProviderBackoffRetries           string               `protobuf:"bytes,30,opt,name=cloud_provider_backoff_retries,json=cloudProviderBackoffRetries,proto3" json:"cloud_provider_backoff_retries,omitempty"`
	CloudProviderBackoffExponent          string               `protobuf:"bytes,31,opt,name=cloud_provider_backoff_exponent,json=cloudProviderBackoffExponent,proto3" json:"cloud_provider_backoff_exponent,omitempty"`
	CloudProviderBackoffDuration          string               `protobuf:"bytes,32,opt,name=cloud_provider_backoff_duration,json=cloudProviderBackoffDuration,proto3" json:"cloud_provider_backoff_duration,omitempty"`
	CloudProviderBackoffJitter            string               `protobuf:"bytes,33,opt,name=cloud_provider_backoff_jitter,json=cloudProviderBackoffJitter,proto3" json:"cloud_provider_backoff_jitter,omitempty"`
	CloudProviderRatelimit                string               `protobuf:"bytes,34,opt,name=cloud_provider_ratelimit,json=cloudProviderRatelimit,proto3" json:"cloud_provider_ratelimit,omitempty"`
	CloudProviderRatelimitQps             string               `protobuf:"bytes,35,opt,name=cloud_provider_ratelimit_qps,json=cloudProviderRatelimitQps,proto3" json:"cloud_provider_ratelimit_qps,omitempty"`
	CloudProviderRatelimitQpsWrite        string               `protobuf:"bytes,36,opt,name=cloud_provider_ratelimit_qps_write,json=cloudProviderRatelimitQpsWrite,proto3" json:"cloud_provider_ratelimit_qps_write,omitempty"`
	CloudProviderRatelimitBucket          string               `protobuf:"bytes,37,opt,name=cloud_provider_ratelimit_bucket,json=cloudProviderRatelimitBucket,proto3" json:"cloud_provider_ratelimit_bucket,omitempty"`
	CloudProviderRatelimitBucketWrite     string               `protobuf:"bytes,38,opt,name=cloud_provider_ratelimit_bucket_write,json=cloudProviderRatelimitBucketWrite,proto3" json:"cloud_provider_ratelimit_bucket_write,omitempty"`
	LoadBalancerDisableOutboundSnat       string               `protobuf:"bytes,39,opt,name=load_balancer_disable_outbound_snat,json=loadBalancerDisableOutboundSnat,proto3" json:"load_balancer_disable_outbound_snat,omitempty"`
	UseManagedIdentityExtension           string               `protobuf:"bytes,40,opt,name=use_managed_identity_extension,json=useManagedIdentityExtension,proto3" json:"use_managed_identity_extension,omitempty"`
	UseInstanceMetadata                   string               `protobuf:"bytes,41,opt,name=use_instance_metadata,json=useInstanceMetadata,proto3" json:"use_instance_metadata,omitempty"`
	LoadBalancerSku                       string               `protobuf:"bytes,42,opt,name=load_balancer_sku,json=loadBalancerSku,proto3" json:"load_balancer_sku,omitempty"`
	ExcludeMasterFromStandardLoadBalancer string               `protobuf:"bytes,43,opt,name=exclude_master_from_standard_load_balancer,json=excludeMasterFromStandardLoadBalancer,proto3" json:"exclude_master_from_standard_load_balancer,omitempty"`
	MaxLoadBalancerRuleCount              string               `protobuf:"bytes,44,opt,name=max_load_balancer_rule_count,json=maxLoadBalancerRuleCount,proto3" json:"max_load_balancer_rule_count,omitempty"`
	ContainerRuntime                      string               `protobuf:"bytes,45,opt,name=container_runtime,json=containerRuntime,proto3" json:"container_runtime,omitempty"`
	CliTool                               string               `protobuf:"bytes,46,opt,name=cli_tool,json=cliTool,proto3" json:"cli_tool,omitempty"`
	ContainerdDownloadUrlBase             string               `protobuf:"bytes,47,opt,name=containerd_download_url_base,json=containerdDownloadUrlBase,proto3" json:"containerd_download_url_base,omitempty"`
	NetworkMode                           string               `protobuf:"bytes,48,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty"`
	UserAssignedIdentityId                string               `protobuf:"bytes,49,opt,name=user_assigned_identity_id,json=userAssignedIdentityId,proto3" json:"user_assigned_identity_id,omitempty"`
	ApiServerName                         string               `protobuf:"bytes,50,opt,name=api_server_name,json=apiServerName,proto3" json:"api_server_name,omitempty"`
	IsVhd                                 string               `protobuf:"bytes,51,opt,name=is_vhd,json=isVhd,proto3" json:"is_vhd,omitempty"`
	GpuNode                               string               `protobuf:"bytes,52,opt,name=gpu_node,json=gpuNode,proto3" json:"gpu_node,omitempty"`
	SgxNode                               string               `protobuf:"bytes,53,opt,name=sgx_node,json=sgxNode,proto3" json:"sgx_node,omitempty"`
	MigNode                               string               `protobuf:"bytes,54,opt,name=mig_node,json=migNode,proto3" json:"mig_node,omitempty"`
	ConfigGpuDriverIfNeeded               string               `protobuf:"bytes,55,opt,name=config_gpu_driver_if_needed,json=configGpuDriverIfNeeded,proto3" json:"config_gpu_driver_if_needed,omitempty"`
	EnableGpuDevicePluginIfNeeded         string               `protobuf:"bytes,56,opt,name=enable_gpu_device_plugin_if_needed,json=enableGpuDevicePluginIfNeeded,proto3" json:"enable_gpu_device_plugin_if_needed,omitempty"`
	TeleportdPluginDownloadUrl            string               `protobuf:"bytes,57,opt,name=teleportd_plugin_download_url,json=teleportdPluginDownloadUrl,proto3" json:"teleportd_plugin_download_url,omitempty"`
	ContainerdVersion                     string               `protobuf:"bytes,58,opt,name=containerd_version,json=containerdVersion,proto3" json:"containerd_version,omitempty"`
	ContainerdPackageUrl                  string               `protobuf:"bytes,59,opt,name=containerd_package_url,json=containerdPackageUrl,proto3" json:"containerd_package_url,omitempty"`
	RuncVersion                           string               `protobuf:"bytes,60,opt,name=runc_version,json=runcVersion,proto3" json:"runc_version,omitempty"`
	RuncPackageUrl                        string               `protobuf:"bytes,61,opt,name=runc_package_url,json=runcPackageUrl,proto3" json:"runc_package_url,omitempty"`
	EnableHostsConfigAgent                string               `protobuf:"bytes,62,opt,name=enable_hosts_config_agent,json=enableHostsConfigAgent,proto3" json:"enable_hosts_config_agent,omitempty"`
	DisableSsh                            string               `protobuf:"bytes,63,opt,name=disable_ssh,json=disableSsh,proto3" json:"disable_ssh,omitempty"`
	NeedsContainerd                       string               `protobuf:"bytes,64,opt,name=needs_containerd,json=needsContainerd,proto3" json:"needs_containerd,omitempty"`
	TeleportEnabled                       string               `protobuf:"bytes,65,opt,name=teleport_enabled,json=teleportEnabled,proto3" json:"teleport_enabled,omitempty"`
	ShouldConfigHttpProxy                 string               `protobuf:"bytes,66,opt,name=should_config_http_proxy,json=shouldConfigHttpProxy,proto3" json:"should_config_http_proxy,omitempty"`
	ShouldConfigHttpProxyCa               string               `protobuf:"bytes,67,opt,name=should_config_http_proxy_ca,json=shouldConfigHttpProxyCa,proto3" json:"should_config_http_proxy_ca,omitempty"`
	HttpProxyTrustedCa                    string               `protobuf:"bytes,68,opt,name=http_proxy_trusted_ca,json=httpProxyTrustedCa,proto3" json:"http_proxy_trusted_ca,omitempty"`
	CustomCaTrustConfig                   *CustomCaTrustConfig `protobuf:"bytes,69,opt,name=custom_ca_trust_config,json=customCaTrustConfig,proto3" json:"custom_ca_trust_config,omitempty"`
	ProvisionOutput                       string               `protobuf:"bytes,70,opt,name=provision_output,json=provisionOutput,proto3" json:"provision_output,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontracttester_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetClusterCertificateAuthority() string {
	if x != nil {
		return x.ClusterCertificateAuthority
	}
	return ""
}

func (x *Configuration) GetRepoDepotEndpoint() string {
	if x != nil {
		return x.RepoDepotEndpoint
	}
	return ""
}

func (x *Configuration) GetLinuxAdminUsername() string {
	if x != nil {
		return x.LinuxAdminUsername
	}
	return ""
}

func (x *Configuration) GetMobyVersion() string {
	if x != nil {
		return x.MobyVersion
	}
	return ""
}

func (x *Configuration) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Configuration) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *Configuration) GetHyperkubeUrl() string {
	if x != nil {
		return x.HyperkubeUrl
	}
	return ""
}

func (x *Configuration) GetKubeBinaryUrl() string {
	if x != nil {
		return x.KubeBinaryUrl
	}
	return ""
}

func (x *Configuration) GetCustomKubeBinaryUrl() string {
	if x != nil {
		return x.CustomKubeBinaryUrl
	}
	return ""
}

func (x *Configuration) GetKubeproxyUrl() string {
	if x != nil {
		return x.KubeproxyUrl
	}
	return ""
}

func (x *Configuration) GetApiserverPublicKey() string {
	if x != nil {
		return x.ApiserverPublicKey
	}
	return ""
}

func (x *Configuration) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Configuration) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *Configuration) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Configuration) GetVmType() string {
	if x != nil {
		return x.VmType
	}
	return ""
}

func (x *Configuration) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Configuration) GetNetworkSecurityGroup() string {
	if x != nil {
		return x.NetworkSecurityGroup
	}
	return ""
}

func (x *Configuration) GetVirtualNetworkName() string {
	if x != nil {
		return x.VirtualNetworkName
	}
	return ""
}

func (x *Configuration) GetVirtualNetworkResourceGroup() string {
	if x != nil {
		return x.VirtualNetworkResourceGroup
	}
	return ""
}

func (x *Configuration) GetRouteTable() string {
	if x != nil {
		return x.RouteTable
	}
	return ""
}

func (x *Configuration) GetPrimaryAvailabilitySet() string {
	if x != nil {
		return x.PrimaryAvailabilitySet
	}
	return ""
}

func (x *Configuration) GetPrimaryScaleSet() string {
	if x != nil {
		return x.PrimaryScaleSet
	}
	return ""
}

func (x *Configuration) GetServicePrincipalClientId() string {
	if x != nil {
		return x.ServicePrincipalClientId
	}
	return ""
}

func (x *Configuration) GetNetworkPlugin() string {
	if x != nil {
		return x.NetworkPlugin
	}
	return ""
}

func (x *Configuration) GetNetworkPolicy() string {
	if x != nil {
		return x.NetworkPolicy
	}
	return ""
}

func (x *Configuration) GetVnetCniPluginsUrl() string {
	if x != nil {
		return x.VnetCniPluginsUrl
	}
	return ""
}

func (x *Configuration) GetCniPluginsUrl() string {
	if x != nil {
		return x.CniPluginsUrl
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoff() string {
	if x != nil {
		return x.CloudProviderBackoff
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoffMode() string {
	if x != nil {
		return x.CloudProviderBackoffMode
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoffRetries() string {
	if x != nil {
		return x.CloudProviderBackoffRetries
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoffExponent() string {
	if x != nil {
		return x.CloudProviderBackoffExponent
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoffDuration() string {
	if x != nil {
		return x.CloudProviderBackoffDuration
	}
	return ""
}

func (x *Configuration) GetCloudProviderBackoffJitter() string {
	if x != nil {
		return x.CloudProviderBackoffJitter
	}
	return ""
}

func (x *Configuration) GetCloudProviderRatelimit() string {
	if x != nil {
		return x.CloudProviderRatelimit
	}
	return ""
}

func (x *Configuration) GetCloudProviderRatelimitQps() string {
	if x != nil {
		return x.CloudProviderRatelimitQps
	}
	return ""
}

func (x *Configuration) GetCloudProviderRatelimitQpsWrite() string {
	if x != nil {
		return x.CloudProviderRatelimitQpsWrite
	}
	return ""
}

func (x *Configuration) GetCloudProviderRatelimitBucket() string {
	if x != nil {
		return x.CloudProviderRatelimitBucket
	}
	return ""
}

func (x *Configuration) GetCloudProviderRatelimitBucketWrite() string {
	if x != nil {
		return x.CloudProviderRatelimitBucketWrite
	}
	return ""
}

func (x *Configuration) GetLoadBalancerDisableOutboundSnat() string {
	if x != nil {
		return x.LoadBalancerDisableOutboundSnat
	}
	return ""
}

func (x *Configuration) GetUseManagedIdentityExtension() string {
	if x != nil {
		return x.UseManagedIdentityExtension
	}
	return ""
}

func (x *Configuration) GetUseInstanceMetadata() string {
	if x != nil {
		return x.UseInstanceMetadata
	}
	return ""
}

func (x *Configuration) GetLoadBalancerSku() string {
	if x != nil {
		return x.LoadBalancerSku
	}
	return ""
}

func (x *Configuration) GetExcludeMasterFromStandardLoadBalancer() string {
	if x != nil {
		return x.ExcludeMasterFromStandardLoadBalancer
	}
	return ""
}

func (x *Configuration) GetMaxLoadBalancerRuleCount() string {
	if x != nil {
		return x.MaxLoadBalancerRuleCount
	}
	return ""
}

func (x *Configuration) GetContainerRuntime() string {
	if x != nil {
		return x.ContainerRuntime
	}
	return ""
}

func (x *Configuration) GetCliTool() string {
	if x != nil {
		return x.CliTool
	}
	return ""
}

func (x *Configuration) GetContainerdDownloadUrlBase() string {
	if x != nil {
		return x.ContainerdDownloadUrlBase
	}
	return ""
}

func (x *Configuration) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *Configuration) GetUserAssignedIdentityId() string {
	if x != nil {
		return x.UserAssignedIdentityId
	}
	return ""
}

func (x *Configuration) GetApiServerName() string {
	if x != nil {
		return x.ApiServerName
	}
	return ""
}

func (x *Configuration) GetIsVhd() string {
	if x != nil {
		return x.IsVhd
	}
	return ""
}

func (x *Configuration) GetGpuNode() string {
	if x != nil {
		return x.GpuNode
	}
	return ""
}

func (x *Configuration) GetSgxNode() string {
	if x != nil {
		return x.SgxNode
	}
	return ""
}

func (x *Configuration) GetMigNode() string {
	if x != nil {
		return x.MigNode
	}
	return ""
}

func (x *Configuration) GetConfigGpuDriverIfNeeded() string {
	if x != nil {
		return x.ConfigGpuDriverIfNeeded
	}
	return ""
}

func (x *Configuration) GetEnableGpuDevicePluginIfNeeded() string {
	if x != nil {
		return x.EnableGpuDevicePluginIfNeeded
	}
	return ""
}

func (x *Configuration) GetTeleportdPluginDownloadUrl() string {
	if x != nil {
		return x.TeleportdPluginDownloadUrl
	}
	return ""
}

func (x *Configuration) GetContainerdVersion() string {
	if x != nil {
		return x.ContainerdVersion
	}
	return ""
}

func (x *Configuration) GetContainerdPackageUrl() string {
	if x != nil {
		return x.ContainerdPackageUrl
	}
	return ""
}

func (x *Configuration) GetRuncVersion() string {
	if x != nil {
		return x.RuncVersion
	}
	return ""
}

func (x *Configuration) GetRuncPackageUrl() string {
	if x != nil {
		return x.RuncPackageUrl
	}
	return ""
}

func (x *Configuration) GetEnableHostsConfigAgent() string {
	if x != nil {
		return x.EnableHostsConfigAgent
	}
	return ""
}

func (x *Configuration) GetDisableSsh() string {
	if x != nil {
		return x.DisableSsh
	}
	return ""
}

func (x *Configuration) GetNeedsContainerd() string {
	if x != nil {
		return x.NeedsContainerd
	}
	return ""
}

func (x *Configuration) GetTeleportEnabled() string {
	if x != nil {
		return x.TeleportEnabled
	}
	return ""
}

func (x *Configuration) GetShouldConfigHttpProxy() string {
	if x != nil {
		return x.ShouldConfigHttpProxy
	}
	return ""
}

func (x *Configuration) GetShouldConfigHttpProxyCa() string {
	if x != nil {
		return x.ShouldConfigHttpProxyCa
	}
	return ""
}

func (x *Configuration) GetHttpProxyTrustedCa() string {
	if x != nil {
		return x.HttpProxyTrustedCa
	}
	return ""
}

func (x *Configuration) GetCustomCaTrustConfig() *CustomCaTrustConfig {
	if x != nil {
		return x.CustomCaTrustConfig
	}
	return nil
}

func (x *Configuration) GetProvisionOutput() string {
	if x != nil {
		return x.ProvisionOutput
	}
	return ""
}

type CustomCaTrustConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomCaTrustCount int32    `protobuf:"varint,2,opt,name=custom_ca_trust_count,json=customCaTrustCount,proto3" json:"custom_ca_trust_count,omitempty"`
	CustomCaCerts      []string `protobuf:"bytes,3,rep,name=custom_ca_certs,json=customCaCerts,proto3" json:"custom_ca_certs,omitempty"`
}

func (x *CustomCaTrustConfig) Reset() {
	*x = CustomCaTrustConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCaTrustConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCaTrustConfig) ProtoMessage() {}

func (x *CustomCaTrustConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCaTrustConfig.ProtoReflect.Descriptor instead.
func (*CustomCaTrustConfig) Descriptor() ([]byte, []int) {
	return file_pkg_proto_nbcontracttester_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CustomCaTrustConfig) GetCustomCaTrustCount() int32 {
	if x != nil {
		return x.CustomCaTrustCount
	}
	return 0
}

func (x *CustomCaTrustConfig) GetCustomCaCerts() []string {
	if x != nil {
		return x.CustomCaCerts
	}
	return nil
}

var File_pkg_proto_nbcontracttester_v1_config_proto protoreflect.FileDescriptor

var file_pkg_proto_nbcontracttester_v1_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x22, 0x88, 0x1c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x62,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x62, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4b, 0x75, 0x62,
	0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75,
	0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2f, 0x0a, 0x14, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76,
	0x6e, 0x65, 0x74, 0x43, 0x6e, 0x69, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6e, 0x69, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a,
	0x1e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x70, 0x73, 0x12, 0x4a,
	0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x70, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x51, 0x70, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x50, 0x0a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x6e, 0x61,
	0x74, 0x12, 0x43, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x75, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x53, 0x6b, 0x75, 0x12, 0x59, 0x0a, 0x2a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x69, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x68, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x73, 0x56, 0x68, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x67, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x67, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x69, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x69, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x66,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66,
	0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x66, 0x4e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x75, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x75, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73, 0x68,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x12,
	0x31, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x61, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x70, 0x0a, 0x13,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x42, 0xe1,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x13,
	0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x4e, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x4e, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x4e, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_nbcontracttester_v1_config_proto_rawDescOnce sync.Once
	file_pkg_proto_nbcontracttester_v1_config_proto_rawDescData = file_pkg_proto_nbcontracttester_v1_config_proto_rawDesc
)

func file_pkg_proto_nbcontracttester_v1_config_proto_rawDescGZIP() []byte {
	file_pkg_proto_nbcontracttester_v1_config_proto_rawDescOnce.Do(func() {
		file_pkg_proto_nbcontracttester_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_nbcontracttester_v1_config_proto_rawDescData)
	})
	return file_pkg_proto_nbcontracttester_v1_config_proto_rawDescData
}

var file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_proto_nbcontracttester_v1_config_proto_goTypes = []interface{}{
	(*Configuration)(nil),       // 0: nbcontracttester.v1.Configuration
	(*CustomCaTrustConfig)(nil), // 1: nbcontracttester.v1.CustomCaTrustConfig
}
var file_pkg_proto_nbcontracttester_v1_config_proto_depIdxs = []int32{
	1, // 0: nbcontracttester.v1.Configuration.custom_ca_trust_config:type_name -> nbcontracttester.v1.CustomCaTrustConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_proto_nbcontracttester_v1_config_proto_init() }
func file_pkg_proto_nbcontracttester_v1_config_proto_init() {
	if File_pkg_proto_nbcontracttester_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCaTrustConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_nbcontracttester_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_nbcontracttester_v1_config_proto_goTypes,
		DependencyIndexes: file_pkg_proto_nbcontracttester_v1_config_proto_depIdxs,
		MessageInfos:      file_pkg_proto_nbcontracttester_v1_config_proto_msgTypes,
	}.Build()
	File_pkg_proto_nbcontracttester_v1_config_proto = out.File
	file_pkg_proto_nbcontracttester_v1_config_proto_rawDesc = nil
	file_pkg_proto_nbcontracttester_v1_config_proto_goTypes = nil
	file_pkg_proto_nbcontracttester_v1_config_proto_depIdxs = nil
}
