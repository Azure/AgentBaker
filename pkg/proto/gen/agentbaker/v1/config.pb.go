// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: agentbaker/v1/config.proto

package agentbakerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureState int32

const (
	FeatureState_FEATURE_STATE_UNSPECIFIED FeatureState = 0
	FeatureState_FEATURE_STATE_ENABLED     FeatureState = 1
	FeatureState_FEATURE_STATE_DISABLED    FeatureState = 2
)

// Enum value maps for FeatureState.
var (
	FeatureState_name = map[int32]string{
		0: "FEATURE_STATE_UNSPECIFIED",
		1: "FEATURE_STATE_ENABLED",
		2: "FEATURE_STATE_DISABLED",
	}
	FeatureState_value = map[string]int32{
		"FEATURE_STATE_UNSPECIFIED": 0,
		"FEATURE_STATE_ENABLED":     1,
		"FEATURE_STATE_DISABLED":    2,
	}
)

func (x FeatureState) Enum() *FeatureState {
	p := new(FeatureState)
	*p = x
	return p
}

func (x FeatureState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureState) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[0].Descriptor()
}

func (FeatureState) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[0]
}

func (x FeatureState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureState.Descriptor instead.
func (FeatureState) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{0}
}

type IdentityType int32

const (
	IdentityType_IDENTITY_TYPE_UNSPECIFIED       IdentityType = 0
	IdentityType_IDENTITY_TYPE_SERVICE_PRINCIPAL IdentityType = 1
	IdentityType_IDENTITY_TYPE_SYSTEM_IDENTITY   IdentityType = 2
	IdentityType_IDENTITY_TYPE_USER_IDENTITY     IdentityType = 3
)

// Enum value maps for IdentityType.
var (
	IdentityType_name = map[int32]string{
		0: "IDENTITY_TYPE_UNSPECIFIED",
		1: "IDENTITY_TYPE_SERVICE_PRINCIPAL",
		2: "IDENTITY_TYPE_SYSTEM_IDENTITY",
		3: "IDENTITY_TYPE_USER_IDENTITY",
	}
	IdentityType_value = map[string]int32{
		"IDENTITY_TYPE_UNSPECIFIED":       0,
		"IDENTITY_TYPE_SERVICE_PRINCIPAL": 1,
		"IDENTITY_TYPE_SYSTEM_IDENTITY":   2,
		"IDENTITY_TYPE_USER_IDENTITY":     3,
	}
)

func (x IdentityType) Enum() *IdentityType {
	p := new(IdentityType)
	*p = x
	return p
}

func (x IdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[1].Descriptor()
}

func (IdentityType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[1]
}

func (x IdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityType.Descriptor instead.
func (IdentityType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{1}
}

type NetworkPluginType int32

const (
	NetworkPluginType_NETWORK_PLUGIN_TYPE_UNSPECIFIED NetworkPluginType = 0
	NetworkPluginType_NETWORK_PLUGIN_TYPE_NONE        NetworkPluginType = 1
	NetworkPluginType_NETWORK_PLUGIN_TYPE_AZURE       NetworkPluginType = 2
	NetworkPluginType_NETWORK_PLUGIN_TYPE_KUBENET     NetworkPluginType = 3
)

// Enum value maps for NetworkPluginType.
var (
	NetworkPluginType_name = map[int32]string{
		0: "NETWORK_PLUGIN_TYPE_UNSPECIFIED",
		1: "NETWORK_PLUGIN_TYPE_NONE",
		2: "NETWORK_PLUGIN_TYPE_AZURE",
		3: "NETWORK_PLUGIN_TYPE_KUBENET",
	}
	NetworkPluginType_value = map[string]int32{
		"NETWORK_PLUGIN_TYPE_UNSPECIFIED": 0,
		"NETWORK_PLUGIN_TYPE_NONE":        1,
		"NETWORK_PLUGIN_TYPE_AZURE":       2,
		"NETWORK_PLUGIN_TYPE_KUBENET":     3,
	}
)

func (x NetworkPluginType) Enum() *NetworkPluginType {
	p := new(NetworkPluginType)
	*p = x
	return p
}

func (x NetworkPluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkPluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[2].Descriptor()
}

func (NetworkPluginType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[2]
}

func (x NetworkPluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkPluginType.Descriptor instead.
func (NetworkPluginType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{2}
}

type NetworkPolicyType int32

const (
	NetworkPolicyType_NETWORK_POLICY_TYPE_UNSPECIFIED NetworkPolicyType = 0
	NetworkPolicyType_NETWORK_POLICY_TYPE_NONE        NetworkPolicyType = 1
	NetworkPolicyType_NETWORK_POLICY_TYPE_AZURE       NetworkPolicyType = 2
	NetworkPolicyType_NETWORK_POLICY_TYPE_CALICO      NetworkPolicyType = 3
)

// Enum value maps for NetworkPolicyType.
var (
	NetworkPolicyType_name = map[int32]string{
		0: "NETWORK_POLICY_TYPE_UNSPECIFIED",
		1: "NETWORK_POLICY_TYPE_NONE",
		2: "NETWORK_POLICY_TYPE_AZURE",
		3: "NETWORK_POLICY_TYPE_CALICO",
	}
	NetworkPolicyType_value = map[string]int32{
		"NETWORK_POLICY_TYPE_UNSPECIFIED": 0,
		"NETWORK_POLICY_TYPE_NONE":        1,
		"NETWORK_POLICY_TYPE_AZURE":       2,
		"NETWORK_POLICY_TYPE_CALICO":      3,
	}
)

func (x NetworkPolicyType) Enum() *NetworkPolicyType {
	p := new(NetworkPolicyType)
	*p = x
	return p
}

func (x NetworkPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[3].Descriptor()
}

func (NetworkPolicyType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[3]
}

func (x NetworkPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkPolicyType.Descriptor instead.
func (NetworkPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{3}
}

type KubeletDiskType int32

const (
	KubeletDiskType_KUBELET_DISK_TYPE_UNSPECIFIED KubeletDiskType = 0
	KubeletDiskType_KUBELET_DISK_TYPE_OS_DISK     KubeletDiskType = 1
	KubeletDiskType_KUBELET_DISK_TYPE_TEMP_DISK   KubeletDiskType = 2
)

// Enum value maps for KubeletDiskType.
var (
	KubeletDiskType_name = map[int32]string{
		0: "KUBELET_DISK_TYPE_UNSPECIFIED",
		1: "KUBELET_DISK_TYPE_OS_DISK",
		2: "KUBELET_DISK_TYPE_TEMP_DISK",
	}
	KubeletDiskType_value = map[string]int32{
		"KUBELET_DISK_TYPE_UNSPECIFIED": 0,
		"KUBELET_DISK_TYPE_OS_DISK":     1,
		"KUBELET_DISK_TYPE_TEMP_DISK":   2,
	}
)

func (x KubeletDiskType) Enum() *KubeletDiskType {
	p := new(KubeletDiskType)
	*p = x
	return p
}

func (x KubeletDiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeletDiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[4].Descriptor()
}

func (KubeletDiskType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[4]
}

func (x KubeletDiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeletDiskType.Descriptor instead.
func (KubeletDiskType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{4}
}

type LoadBalancerSku int32

const (
	LoadBalancerSku_LOAD_BALANCER_SKU_UNSPECIFIED LoadBalancerSku = 0
	LoadBalancerSku_LOAD_BALANCER_SKU_BASIC       LoadBalancerSku = 1 // to be confirmed
	LoadBalancerSku_LOAD_BALANCER_SKU_STANDARD    LoadBalancerSku = 2
)

// Enum value maps for LoadBalancerSku.
var (
	LoadBalancerSku_name = map[int32]string{
		0: "LOAD_BALANCER_SKU_UNSPECIFIED",
		1: "LOAD_BALANCER_SKU_BASIC",
		2: "LOAD_BALANCER_SKU_STANDARD",
	}
	LoadBalancerSku_value = map[string]int32{
		"LOAD_BALANCER_SKU_UNSPECIFIED": 0,
		"LOAD_BALANCER_SKU_BASIC":       1,
		"LOAD_BALANCER_SKU_STANDARD":    2,
	}
)

func (x LoadBalancerSku) Enum() *LoadBalancerSku {
	p := new(LoadBalancerSku)
	*p = x
	return p
}

func (x LoadBalancerSku) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerSku) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[5].Descriptor()
}

func (LoadBalancerSku) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[5]
}

func (x LoadBalancerSku) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerSku.Descriptor instead.
func (LoadBalancerSku) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{5}
}

type NetworkMode int32

const (
	NetworkMode_NETWORK_MODE_UNSPECIFIED NetworkMode = 0
	NetworkMode_NETWORK_MODE_L2BRIDGE    NetworkMode = 1 //could be more. Needs to check.
)

// Enum value maps for NetworkMode.
var (
	NetworkMode_name = map[int32]string{
		0: "NETWORK_MODE_UNSPECIFIED",
		1: "NETWORK_MODE_L2BRIDGE",
	}
	NetworkMode_value = map[string]int32{
		"NETWORK_MODE_UNSPECIFIED": 0,
		"NETWORK_MODE_L2BRIDGE":    1,
	}
)

func (x NetworkMode) Enum() *NetworkMode {
	p := new(NetworkMode)
	*p = x
	return p
}

func (x NetworkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[6].Descriptor()
}

func (NetworkMode) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[6]
}

func (x NetworkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkMode.Descriptor instead.
func (NetworkMode) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{6}
}

// illustrative division only
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterCertificateAuthority string `protobuf:"bytes,1,opt,name=cluster_certificate_authority,json=clusterCertificateAuthority,proto3" json:"cluster_certificate_authority,omitempty"`
	// only required until Secure TLS bootstrapping in place
	// would use kubelet identity after that.
	TlsBootstrapToken string `protobuf:"bytes,2,opt,name=tls_bootstrap_token,json=tlsBootstrapToken,proto3" json:"tls_bootstrap_token,omitempty"`
	// cluster/user config
	KubernetesVersion string `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"` // Q: can this be auto-detected? Or is this part of specifying the desired node version?
	// removed kubernetesHyperkubeSpec
	KubeBinaryUrl          string                 `protobuf:"bytes,4,opt,name=kube_binary_url,json=kubeBinaryUrl,proto3" json:"kube_binary_url,omitempty"` // maybe we can combine this and custom_kube_binary_url later once we figure out the logic of how they are used.
	CustomKubeBinaryUrl    string                 `protobuf:"bytes,5,opt,name=custom_kube_binary_url,json=customKubeBinaryUrl,proto3" json:"custom_kube_binary_url,omitempty"`
	KubeproxyUrl           string                 `protobuf:"bytes,6,opt,name=kubeproxy_url,json=kubeproxyUrl,proto3" json:"kubeproxy_url,omitempty"`
	ApiserverConfig        *ApiServerConfig       `protobuf:"bytes,7,opt,name=apiserver_config,json=apiserverConfig,proto3" json:"apiserver_config,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,8,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	ResourceGroup          string                 `protobuf:"bytes,9,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Location               string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	VmType                 string                 `protobuf:"bytes,11,opt,name=vm_type,json=vmType,proto3" json:"vm_type,omitempty"`
	PrimaryAvailabilitySet string                 `protobuf:"bytes,12,opt,name=primary_availability_set,json=primaryAvailabilitySet,proto3" json:"primary_availability_set,omitempty"`
	PrimaryScaleSet        string                 `protobuf:"bytes,13,opt,name=primary_scale_set,json=primaryScaleSet,proto3" json:"primary_scale_set,omitempty"`
	CloudProviderConfig    *CloudProviderConfig   `protobuf:"bytes,14,opt,name=cloud_provider_config,json=cloudProviderConfig,proto3" json:"cloud_provider_config,omitempty"`
	IdentityConfiguration  *IdentityConfiguration `protobuf:"bytes,15,opt,name=identity_configuration,json=identityConfiguration,proto3" json:"identity_configuration,omitempty"`
	RuncConfig             *RuncConfig            `protobuf:"bytes,16,opt,name=runc_config,json=runcConfig,proto3" json:"runc_config,omitempty"`
	// ... and a bunch of user-specified config
	RepoDepotEndpoint  string `protobuf:"bytes,17,opt,name=repo_depot_endpoint,json=repoDepotEndpoint,proto3" json:"repo_depot_endpoint,omitempty"`
	LinuxAdminUsername string `protobuf:"bytes,18,opt,name=linux_admin_username,json=linuxAdminUsername,proto3" json:"linux_admin_username,omitempty"`
	// removed mobyVersion
	TenantId            string              `protobuf:"bytes,19,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	UseInstanceMetadata bool                `protobuf:"varint,20,opt,name=use_instance_metadata,json=useInstanceMetadata,proto3" json:"use_instance_metadata,omitempty"`
	LoadBalancerConfig  *LoadBalancerConfig `protobuf:"bytes,21,opt,name=load_balancer_config,json=loadBalancerConfig,proto3" json:"load_balancer_config,omitempty"`
	// removed containerRuntime
	// removed cliTool because docker is deprecated. Only "ctr" will be supported.
	ContainerdConfig        *ContainerdConfig     `protobuf:"bytes,22,opt,name=containerd_config,json=containerdConfig,proto3" json:"containerd_config,omitempty"`
	IsVhd                   bool                  `protobuf:"varint,23,opt,name=is_vhd,json=isVhd,proto3" json:"is_vhd,omitempty"`
	GpuConfig               *GpuConfig            `protobuf:"bytes,24,opt,name=gpu_config,json=gpuConfig,proto3" json:"gpu_config,omitempty"`
	IsSgxNode               bool                  `protobuf:"varint,25,opt,name=is_sgx_node,json=isSgxNode,proto3" json:"is_sgx_node,omitempty"`
	TeleportConfig          *TeleportConfig       `protobuf:"bytes,26,opt,name=teleport_config,json=teleportConfig,proto3" json:"teleport_config,omitempty"` // removed NEEDS_CONTAINERD because it's always needed now
	HttpProxyConfiguration  *HttpProxyConfig      `protobuf:"bytes,27,opt,name=http_proxy_configuration,json=httpProxyConfiguration,proto3" json:"http_proxy_configuration,omitempty"`
	SshStatus               FeatureState          `protobuf:"varint,28,opt,name=ssh_status,json=sshStatus,proto3,enum=agentbaker.v1.FeatureState" json:"ssh_status,omitempty"`
	UnattendedUpgradeStatus FeatureState          `protobuf:"varint,29,opt,name=unattended_upgrade_status,json=unattendedUpgradeStatus,proto3,enum=agentbaker.v1.FeatureState" json:"unattended_upgrade_status,omitempty"`
	MessageOfTheDay         string                `protobuf:"bytes,30,opt,name=message_of_the_day,json=messageOfTheDay,proto3" json:"message_of_the_day,omitempty"`
	SwapFileSizeMb          string                `protobuf:"bytes,31,opt,name=swap_file_size_mb,json=swapFileSizeMb,proto3" json:"swap_file_size_mb,omitempty"`
	Sysctls                 *SysctlConfig         `protobuf:"bytes,32,opt,name=sysctls,proto3" json:"sysctls,omitempty"`
	KubeletConfiguration    *KubeletConfiguration `protobuf:"bytes,33,opt,name=kubelet_configuration,json=kubeletConfiguration,proto3" json:"kubelet_configuration,omitempty"`
	GpuInstanceProfile      *string               `protobuf:"bytes,34,opt,name=gpu_instance_profile,json=gpuInstanceProfile,proto3,oneof" json:"gpu_instance_profile,omitempty"`
	HostsConfigAgentStatus  FeatureState          `protobuf:"varint,35,opt,name=hosts_config_agent_status,json=hostsConfigAgentStatus,proto3,enum=agentbaker.v1.FeatureState" json:"hosts_config_agent_status,omitempty"`
	CustomCaTrustConfig     *CustomCaTrustConfig  `protobuf:"bytes,36,opt,name=custom_ca_trust_config,json=customCaTrustConfig,proto3" json:"custom_ca_trust_config,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetClusterCertificateAuthority() string {
	if x != nil {
		return x.ClusterCertificateAuthority
	}
	return ""
}

func (x *Configuration) GetTlsBootstrapToken() string {
	if x != nil {
		return x.TlsBootstrapToken
	}
	return ""
}

func (x *Configuration) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *Configuration) GetKubeBinaryUrl() string {
	if x != nil {
		return x.KubeBinaryUrl
	}
	return ""
}

func (x *Configuration) GetCustomKubeBinaryUrl() string {
	if x != nil {
		return x.CustomKubeBinaryUrl
	}
	return ""
}

func (x *Configuration) GetKubeproxyUrl() string {
	if x != nil {
		return x.KubeproxyUrl
	}
	return ""
}

func (x *Configuration) GetApiserverConfig() *ApiServerConfig {
	if x != nil {
		return x.ApiserverConfig
	}
	return nil
}

func (x *Configuration) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Configuration) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *Configuration) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Configuration) GetVmType() string {
	if x != nil {
		return x.VmType
	}
	return ""
}

func (x *Configuration) GetPrimaryAvailabilitySet() string {
	if x != nil {
		return x.PrimaryAvailabilitySet
	}
	return ""
}

func (x *Configuration) GetPrimaryScaleSet() string {
	if x != nil {
		return x.PrimaryScaleSet
	}
	return ""
}

func (x *Configuration) GetCloudProviderConfig() *CloudProviderConfig {
	if x != nil {
		return x.CloudProviderConfig
	}
	return nil
}

func (x *Configuration) GetIdentityConfiguration() *IdentityConfiguration {
	if x != nil {
		return x.IdentityConfiguration
	}
	return nil
}

func (x *Configuration) GetRuncConfig() *RuncConfig {
	if x != nil {
		return x.RuncConfig
	}
	return nil
}

func (x *Configuration) GetRepoDepotEndpoint() string {
	if x != nil {
		return x.RepoDepotEndpoint
	}
	return ""
}

func (x *Configuration) GetLinuxAdminUsername() string {
	if x != nil {
		return x.LinuxAdminUsername
	}
	return ""
}

func (x *Configuration) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Configuration) GetUseInstanceMetadata() bool {
	if x != nil {
		return x.UseInstanceMetadata
	}
	return false
}

func (x *Configuration) GetLoadBalancerConfig() *LoadBalancerConfig {
	if x != nil {
		return x.LoadBalancerConfig
	}
	return nil
}

func (x *Configuration) GetContainerdConfig() *ContainerdConfig {
	if x != nil {
		return x.ContainerdConfig
	}
	return nil
}

func (x *Configuration) GetIsVhd() bool {
	if x != nil {
		return x.IsVhd
	}
	return false
}

func (x *Configuration) GetGpuConfig() *GpuConfig {
	if x != nil {
		return x.GpuConfig
	}
	return nil
}

func (x *Configuration) GetIsSgxNode() bool {
	if x != nil {
		return x.IsSgxNode
	}
	return false
}

func (x *Configuration) GetTeleportConfig() *TeleportConfig {
	if x != nil {
		return x.TeleportConfig
	}
	return nil
}

func (x *Configuration) GetHttpProxyConfiguration() *HttpProxyConfig {
	if x != nil {
		return x.HttpProxyConfiguration
	}
	return nil
}

func (x *Configuration) GetSshStatus() FeatureState {
	if x != nil {
		return x.SshStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetUnattendedUpgradeStatus() FeatureState {
	if x != nil {
		return x.UnattendedUpgradeStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetMessageOfTheDay() string {
	if x != nil {
		return x.MessageOfTheDay
	}
	return ""
}

func (x *Configuration) GetSwapFileSizeMb() string {
	if x != nil {
		return x.SwapFileSizeMb
	}
	return ""
}

func (x *Configuration) GetSysctls() *SysctlConfig {
	if x != nil {
		return x.Sysctls
	}
	return nil
}

func (x *Configuration) GetKubeletConfiguration() *KubeletConfiguration {
	if x != nil {
		return x.KubeletConfiguration
	}
	return nil
}

func (x *Configuration) GetGpuInstanceProfile() string {
	if x != nil && x.GpuInstanceProfile != nil {
		return *x.GpuInstanceProfile
	}
	return ""
}

func (x *Configuration) GetHostsConfigAgentStatus() FeatureState {
	if x != nil {
		return x.HostsConfigAgentStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetCustomCaTrustConfig() *CustomCaTrustConfig {
	if x != nil {
		return x.CustomCaTrustConfig
	}
	return nil
}

type KubeletConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(ace): remove these/make api defensible
	KubeletFlags      []string          `protobuf:"bytes,1,rep,name=kubelet_flags,json=kubeletFlags,proto3" json:"kubelet_flags,omitempty"`
	KubeletNodeLabels map[string]string `protobuf:"bytes,2,rep,name=kubelet_node_labels,json=kubeletNodeLabels,proto3" json:"kubelet_node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints            []*Taint          `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
	StartupTaints     []*Taint          `protobuf:"bytes,4,rep,name=startup_taints,json=startupTaints,proto3" json:"startup_taints,omitempty"`
	KubeletDiskType   KubeletDiskType   `protobuf:"varint,5,opt,name=kubelet_disk_type,json=kubeletDiskType,proto3,enum=agentbaker.v1.KubeletDiskType" json:"kubelet_disk_type,omitempty"`
}

func (x *KubeletConfiguration) Reset() {
	*x = KubeletConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeletConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletConfiguration) ProtoMessage() {}

func (x *KubeletConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletConfiguration.ProtoReflect.Descriptor instead.
func (*KubeletConfiguration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *KubeletConfiguration) GetKubeletFlags() []string {
	if x != nil {
		return x.KubeletFlags
	}
	return nil
}

func (x *KubeletConfiguration) GetKubeletNodeLabels() map[string]string {
	if x != nil {
		return x.KubeletNodeLabels
	}
	return nil
}

func (x *KubeletConfiguration) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KubeletConfiguration) GetStartupTaints() []*Taint {
	if x != nil {
		return x.StartupTaints
	}
	return nil
}

func (x *KubeletConfiguration) GetKubeletDiskType() KubeletDiskType {
	if x != nil {
		return x.KubeletDiskType
	}
	return KubeletDiskType_KUBELET_DISK_TYPE_UNSPECIFIED
}

type SysctlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sysctls []*Sysctl `protobuf:"bytes,1,rep,name=sysctls,proto3" json:"sysctls,omitempty"`
}

func (x *SysctlConfig) Reset() {
	*x = SysctlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysctlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysctlConfig) ProtoMessage() {}

func (x *SysctlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysctlConfig.ProtoReflect.Descriptor instead.
func (*SysctlConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *SysctlConfig) GetSysctls() []*Sysctl {
	if x != nil {
		return x.Sysctls
	}
	return nil
}

type IdentityConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityType           IdentityType `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=agentbaker.v1.IdentityType" json:"identity_type,omitempty"` // Q: I am assuming this is a better pattern than Oneof?
	ServicePrincipalId     string       `protobuf:"bytes,2,opt,name=service_principal_id,json=servicePrincipalId,proto3" json:"service_principal_id,omitempty"`
	ServicePrincipalSecret string       `protobuf:"bytes,3,opt,name=service_principal_secret,json=servicePrincipalSecret,proto3" json:"service_principal_secret,omitempty"`
	AssignedIdentityId     string       `protobuf:"bytes,4,opt,name=assigned_identity_id,json=assignedIdentityId,proto3" json:"assigned_identity_id,omitempty"` //could be user or system assigned, depending on the type
}

func (x *IdentityConfiguration) Reset() {
	*x = IdentityConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConfiguration) ProtoMessage() {}

func (x *IdentityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConfiguration.ProtoReflect.Descriptor instead.
func (*IdentityConfiguration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *IdentityConfiguration) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_IDENTITY_TYPE_UNSPECIFIED
}

func (x *IdentityConfiguration) GetServicePrincipalId() string {
	if x != nil {
		return x.ServicePrincipalId
	}
	return ""
}

func (x *IdentityConfiguration) GetServicePrincipalSecret() string {
	if x != nil {
		return x.ServicePrincipalSecret
	}
	return ""
}

func (x *IdentityConfiguration) GetAssignedIdentityId() string {
	if x != nil {
		return x.AssignedIdentityId
	}
	return ""
}

type HttpProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy                   *string      `protobuf:"bytes,1,opt,name=http_proxy,json=httpProxy,proto3,oneof" json:"http_proxy,omitempty"`
	HttpsProxy                  *string      `protobuf:"bytes,2,opt,name=https_proxy,json=httpsProxy,proto3,oneof" json:"https_proxy,omitempty"`
	NoProxy                     []string     `protobuf:"bytes,3,rep,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty"`
	TrustedCertificateAuthority *string      `protobuf:"bytes,4,opt,name=trusted_certificate_authority,json=trustedCertificateAuthority,proto3,oneof" json:"trusted_certificate_authority,omitempty"`
	HttpProxyConfigStatus       FeatureState `protobuf:"varint,5,opt,name=http_proxy_config_status,json=httpProxyConfigStatus,proto3,enum=agentbaker.v1.FeatureState" json:"http_proxy_config_status,omitempty"`
	HttpProxyCaConfigStatus     FeatureState `protobuf:"varint,6,opt,name=http_proxy_ca_config_status,json=httpProxyCaConfigStatus,proto3,enum=agentbaker.v1.FeatureState" json:"http_proxy_ca_config_status,omitempty"`
	HttpProxyTrustedCa          string       `protobuf:"bytes,7,opt,name=http_proxy_trusted_ca,json=httpProxyTrustedCa,proto3" json:"http_proxy_trusted_ca,omitempty"`
}

func (x *HttpProxyConfig) Reset() {
	*x = HttpProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxyConfig) ProtoMessage() {}

func (x *HttpProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxyConfig.ProtoReflect.Descriptor instead.
func (*HttpProxyConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *HttpProxyConfig) GetHttpProxy() string {
	if x != nil && x.HttpProxy != nil {
		return *x.HttpProxy
	}
	return ""
}

func (x *HttpProxyConfig) GetHttpsProxy() string {
	if x != nil && x.HttpsProxy != nil {
		return *x.HttpsProxy
	}
	return ""
}

func (x *HttpProxyConfig) GetNoProxy() []string {
	if x != nil {
		return x.NoProxy
	}
	return nil
}

func (x *HttpProxyConfig) GetTrustedCertificateAuthority() string {
	if x != nil && x.TrustedCertificateAuthority != nil {
		return *x.TrustedCertificateAuthority
	}
	return ""
}

func (x *HttpProxyConfig) GetHttpProxyConfigStatus() FeatureState {
	if x != nil {
		return x.HttpProxyConfigStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *HttpProxyConfig) GetHttpProxyCaConfigStatus() FeatureState {
	if x != nil {
		return x.HttpProxyCaConfigStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *HttpProxyConfig) GetHttpProxyTrustedCa() string {
	if x != nil {
		return x.HttpProxyTrustedCa
	}
	return ""
}

type CustomCaTrustConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomCaTrustStatus FeatureState `protobuf:"varint,1,opt,name=custom_ca_trust_status,json=customCaTrustStatus,proto3,enum=agentbaker.v1.FeatureState" json:"custom_ca_trust_status,omitempty"`
	CustomCaTrustCount  int32        `protobuf:"varint,2,opt,name=custom_ca_trust_count,json=customCaTrustCount,proto3" json:"custom_ca_trust_count,omitempty"`
	CustomCaCerts       []string     `protobuf:"bytes,3,rep,name=custom_ca_certs,json=customCaCerts,proto3" json:"custom_ca_certs,omitempty"`
}

func (x *CustomCaTrustConfig) Reset() {
	*x = CustomCaTrustConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCaTrustConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCaTrustConfig) ProtoMessage() {}

func (x *CustomCaTrustConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCaTrustConfig.ProtoReflect.Descriptor instead.
func (*CustomCaTrustConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *CustomCaTrustConfig) GetCustomCaTrustStatus() FeatureState {
	if x != nil {
		return x.CustomCaTrustStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *CustomCaTrustConfig) GetCustomCaTrustCount() int32 {
	if x != nil {
		return x.CustomCaTrustCount
	}
	return 0
}

func (x *CustomCaTrustConfig) GetCustomCaCerts() []string {
	if x != nil {
		return x.CustomCaCerts
	}
	return nil
}

type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Effect string `protobuf:"bytes,2,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type Sysctl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sysctl) Reset() {
	*x = Sysctl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sysctl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sysctl) ProtoMessage() {}

func (x *Sysctl) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sysctl.ProtoReflect.Descriptor instead.
func (*Sysctl) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *Sysctl) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Sysctl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VirtualNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
}

func (x *VirtualNetworkConfig) Reset() {
	*x = VirtualNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetworkConfig) ProtoMessage() {}

func (x *VirtualNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetworkConfig.ProtoReflect.Descriptor instead.
func (*VirtualNetworkConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *VirtualNetworkConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualNetworkConfig) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

type CloudProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudProviderBackoffConfig       *CloudProviderBackoffConfig   `protobuf:"bytes,1,opt,name=cloud_provider_backoff_config,json=cloudProviderBackoffConfig,proto3" json:"cloud_provider_backoff_config,omitempty"`
	CloudProviderRateLimitConfig     *CloudProviderRateLimitConfig `protobuf:"bytes,2,opt,name=cloud_provider_rate_limit_config,json=cloudProviderRateLimitConfig,proto3" json:"cloud_provider_rate_limit_config,omitempty"`
	CloudProviderDisableOutBoundSnat bool                          `protobuf:"varint,3,opt,name=cloud_provider_disable_out_bound_snat,json=cloudProviderDisableOutBoundSnat,proto3" json:"cloud_provider_disable_out_bound_snat,omitempty"`
}

func (x *CloudProviderConfig) Reset() {
	*x = CloudProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProviderConfig) ProtoMessage() {}

func (x *CloudProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProviderConfig.ProtoReflect.Descriptor instead.
func (*CloudProviderConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *CloudProviderConfig) GetCloudProviderBackoffConfig() *CloudProviderBackoffConfig {
	if x != nil {
		return x.CloudProviderBackoffConfig
	}
	return nil
}

func (x *CloudProviderConfig) GetCloudProviderRateLimitConfig() *CloudProviderRateLimitConfig {
	if x != nil {
		return x.CloudProviderRateLimitConfig
	}
	return nil
}

func (x *CloudProviderConfig) GetCloudProviderDisableOutBoundSnat() bool {
	if x != nil {
		return x.CloudProviderDisableOutBoundSnat
	}
	return false
}

type CloudProviderBackoffConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   FeatureState `protobuf:"varint,1,opt,name=status,proto3,enum=agentbaker.v1.FeatureState" json:"status,omitempty"`
	Mode     string       `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Retries  int32        `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
	Exponent float64      `protobuf:"fixed64,4,opt,name=exponent,proto3" json:"exponent,omitempty"`
	Duration int32        `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Jitter   float64      `protobuf:"fixed64,6,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *CloudProviderBackoffConfig) Reset() {
	*x = CloudProviderBackoffConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProviderBackoffConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProviderBackoffConfig) ProtoMessage() {}

func (x *CloudProviderBackoffConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProviderBackoffConfig.ProtoReflect.Descriptor instead.
func (*CloudProviderBackoffConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *CloudProviderBackoffConfig) GetStatus() FeatureState {
	if x != nil {
		return x.Status
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *CloudProviderBackoffConfig) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CloudProviderBackoffConfig) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *CloudProviderBackoffConfig) GetExponent() float64 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

func (x *CloudProviderBackoffConfig) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CloudProviderBackoffConfig) GetJitter() float64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type CloudProviderRateLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      FeatureState `protobuf:"varint,1,opt,name=status,proto3,enum=agentbaker.v1.FeatureState" json:"status,omitempty"`
	Qps         float64      `protobuf:"fixed64,2,opt,name=qps,proto3" json:"qps,omitempty"`
	QpsWrite    float64      `protobuf:"fixed64,3,opt,name=qps_write,json=qpsWrite,proto3" json:"qps_write,omitempty"`
	Bucket      int32        `protobuf:"varint,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	BucketWrite int32        `protobuf:"varint,5,opt,name=bucket_write,json=bucketWrite,proto3" json:"bucket_write,omitempty"`
}

func (x *CloudProviderRateLimitConfig) Reset() {
	*x = CloudProviderRateLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudProviderRateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudProviderRateLimitConfig) ProtoMessage() {}

func (x *CloudProviderRateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudProviderRateLimitConfig.ProtoReflect.Descriptor instead.
func (*CloudProviderRateLimitConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *CloudProviderRateLimitConfig) GetStatus() FeatureState {
	if x != nil {
		return x.Status
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *CloudProviderRateLimitConfig) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

func (x *CloudProviderRateLimitConfig) GetQpsWrite() float64 {
	if x != nil {
		return x.QpsWrite
	}
	return 0
}

func (x *CloudProviderRateLimitConfig) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *CloudProviderRateLimitConfig) GetBucketWrite() int32 {
	if x != nil {
		return x.BucketWrite
	}
	return 0
}

type LoadBalancerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerSku                       LoadBalancerSku `protobuf:"varint,1,opt,name=load_balancer_sku,json=loadBalancerSku,proto3,enum=agentbaker.v1.LoadBalancerSku" json:"load_balancer_sku,omitempty"`
	ExcludeMasterFromStandardLoadBalancer bool            `protobuf:"varint,2,opt,name=exclude_master_from_standard_load_balancer,json=excludeMasterFromStandardLoadBalancer,proto3" json:"exclude_master_from_standard_load_balancer,omitempty"`
	MaxLoadBalancerRuleCount              int32           `protobuf:"varint,3,opt,name=max_load_balancer_rule_count,json=maxLoadBalancerRuleCount,proto3" json:"max_load_balancer_rule_count,omitempty"`
}

func (x *LoadBalancerConfig) Reset() {
	*x = LoadBalancerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerConfig) ProtoMessage() {}

func (x *LoadBalancerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerConfig.ProtoReflect.Descriptor instead.
func (*LoadBalancerConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *LoadBalancerConfig) GetLoadBalancerSku() LoadBalancerSku {
	if x != nil {
		return x.LoadBalancerSku
	}
	return LoadBalancerSku_LOAD_BALANCER_SKU_UNSPECIFIED
}

func (x *LoadBalancerConfig) GetExcludeMasterFromStandardLoadBalancer() bool {
	if x != nil {
		return x.ExcludeMasterFromStandardLoadBalancer
	}
	return false
}

func (x *LoadBalancerConfig) GetMaxLoadBalancerRuleCount() int32 {
	if x != nil {
		return x.MaxLoadBalancerRuleCount
	}
	return 0
}

type ApiServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiserverPublicKey string `protobuf:"bytes,1,opt,name=apiserver_public_key,json=apiserverPublicKey,proto3" json:"apiserver_public_key,omitempty"`
	ApiserverName      string `protobuf:"bytes,2,opt,name=apiserver_name,json=apiserverName,proto3" json:"apiserver_name,omitempty"`
	ApiServerEndpoint  string `protobuf:"bytes,3,opt,name=api_server_endpoint,json=apiServerEndpoint,proto3" json:"api_server_endpoint,omitempty"`
}

func (x *ApiServerConfig) Reset() {
	*x = ApiServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiServerConfig) ProtoMessage() {}

func (x *ApiServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiServerConfig.ProtoReflect.Descriptor instead.
func (*ApiServerConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *ApiServerConfig) GetApiserverPublicKey() string {
	if x != nil {
		return x.ApiserverPublicKey
	}
	return ""
}

func (x *ApiServerConfig) GetApiserverName() string {
	if x != nil {
		return x.ApiserverName
	}
	return ""
}

func (x *ApiServerConfig) GetApiServerEndpoint() string {
	if x != nil {
		return x.ApiServerEndpoint
	}
	return ""
}

type GpuConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                        FeatureState `protobuf:"varint,1,opt,name=status,proto3,enum=agentbaker.v1.FeatureState" json:"status,omitempty"`
	IsMigNode                     FeatureState `protobuf:"varint,2,opt,name=is_mig_node,json=isMigNode,proto3,enum=agentbaker.v1.FeatureState" json:"is_mig_node,omitempty"`
	ConfigGpuDriverIfNeeded       FeatureState `protobuf:"varint,3,opt,name=config_gpu_driver_if_needed,json=configGpuDriverIfNeeded,proto3,enum=agentbaker.v1.FeatureState" json:"config_gpu_driver_if_needed,omitempty"`                     //we can revise this name later when we clearly understand what it's doing
	EnableGpuDevicePluginIfNeeded FeatureState `protobuf:"varint,4,opt,name=enable_gpu_device_plugin_if_needed,json=enableGpuDevicePluginIfNeeded,proto3,enum=agentbaker.v1.FeatureState" json:"enable_gpu_device_plugin_if_needed,omitempty"` //we can revise this name later when we clearly understand what it's doing
	FabricManagerStatus           FeatureState `protobuf:"varint,5,opt,name=fabric_manager_status,json=fabricManagerStatus,proto3,enum=agentbaker.v1.FeatureState" json:"fabric_manager_status,omitempty"`                                     //consider just extracting vm_size since both GPUNeedsFabricManager and getGPUDriverVersion are just depending ont vm_size.
}

func (x *GpuConfig) Reset() {
	*x = GpuConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuConfig) ProtoMessage() {}

func (x *GpuConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuConfig.ProtoReflect.Descriptor instead.
func (*GpuConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *GpuConfig) GetStatus() FeatureState {
	if x != nil {
		return x.Status
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *GpuConfig) GetIsMigNode() FeatureState {
	if x != nil {
		return x.IsMigNode
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *GpuConfig) GetConfigGpuDriverIfNeeded() FeatureState {
	if x != nil {
		return x.ConfigGpuDriverIfNeeded
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *GpuConfig) GetEnableGpuDevicePluginIfNeeded() FeatureState {
	if x != nil {
		return x.EnableGpuDevicePluginIfNeeded
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *GpuConfig) GetFabricManagerStatus() FeatureState {
	if x != nil {
		return x.FabricManagerStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

type ContainerdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerdDownloadUrlBase string `protobuf:"bytes,1,opt,name=containerd_download_url_base,json=containerdDownloadUrlBase,proto3" json:"containerd_download_url_base,omitempty"`
	ContainerdVersion         string `protobuf:"bytes,2,opt,name=containerd_version,json=containerdVersion,proto3" json:"containerd_version,omitempty"`
	ContainerdPackageUrl      string `protobuf:"bytes,3,opt,name=containerd_package_url,json=containerdPackageUrl,proto3" json:"containerd_package_url,omitempty"`
}

func (x *ContainerdConfig) Reset() {
	*x = ContainerdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerdConfig) ProtoMessage() {}

func (x *ContainerdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerdConfig.ProtoReflect.Descriptor instead.
func (*ContainerdConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *ContainerdConfig) GetContainerdDownloadUrlBase() string {
	if x != nil {
		return x.ContainerdDownloadUrlBase
	}
	return ""
}

func (x *ContainerdConfig) GetContainerdVersion() string {
	if x != nil {
		return x.ContainerdVersion
	}
	return ""
}

func (x *ContainerdConfig) GetContainerdPackageUrl() string {
	if x != nil {
		return x.ContainerdPackageUrl
	}
	return ""
}

type TeleportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                     FeatureState `protobuf:"varint,1,opt,name=status,proto3,enum=agentbaker.v1.FeatureState" json:"status,omitempty"`
	TeleportdPluginDownloadUrl string       `protobuf:"bytes,2,opt,name=teleportd_plugin_download_url,json=teleportdPluginDownloadUrl,proto3" json:"teleportd_plugin_download_url,omitempty"`
}

func (x *TeleportConfig) Reset() {
	*x = TeleportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleportConfig) ProtoMessage() {}

func (x *TeleportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleportConfig.ProtoReflect.Descriptor instead.
func (*TeleportConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *TeleportConfig) GetStatus() FeatureState {
	if x != nil {
		return x.Status
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *TeleportConfig) GetTeleportdPluginDownloadUrl() string {
	if x != nil {
		return x.TeleportdPluginDownloadUrl
	}
	return ""
}

type RuncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuncVersion    string `protobuf:"bytes,1,opt,name=runc_version,json=runcVersion,proto3" json:"runc_version,omitempty"`
	RuncPackageUrl string `protobuf:"bytes,2,opt,name=runc_package_url,json=runcPackageUrl,proto3" json:"runc_package_url,omitempty"`
}

func (x *RuncConfig) Reset() {
	*x = RuncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuncConfig) ProtoMessage() {}

func (x *RuncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuncConfig.ProtoReflect.Descriptor instead.
func (*RuncConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *RuncConfig) GetRuncVersion() string {
	if x != nil {
		return x.RuncVersion
	}
	return ""
}

func (x *RuncConfig) GetRuncPackageUrl() string {
	if x != nil {
		return x.RuncPackageUrl
	}
	return ""
}

type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkPlugin        NetworkPluginType     `protobuf:"varint,1,opt,name=network_plugin,json=networkPlugin,proto3,enum=agentbaker.v1.NetworkPluginType" json:"network_plugin,omitempty"`
	NetworkPolicy        NetworkPolicyType     `protobuf:"varint,2,opt,name=network_policy,json=networkPolicy,proto3,enum=agentbaker.v1.NetworkPolicyType" json:"network_policy,omitempty"`
	NetworkMode          NetworkMode           `protobuf:"varint,3,opt,name=network_mode,json=networkMode,proto3,enum=agentbaker.v1.NetworkMode" json:"network_mode,omitempty"`
	NetworkSecurityGroup string                `protobuf:"bytes,4,opt,name=network_security_group,json=networkSecurityGroup,proto3" json:"network_security_group,omitempty"`
	VirtualNetworkConfig *VirtualNetworkConfig `protobuf:"bytes,5,opt,name=virtual_network_config,json=virtualNetworkConfig,proto3" json:"virtual_network_config,omitempty"`
	VnetCniPluginsUrl    string                `protobuf:"bytes,6,opt,name=vnet_cni_plugins_url,json=vnetCniPluginsUrl,proto3" json:"vnet_cni_plugins_url,omitempty"`
	CniPluginsUrl        string                `protobuf:"bytes,7,opt,name=cni_plugins_url,json=cniPluginsUrl,proto3" json:"cni_plugins_url,omitempty"`
	Subnet               string                `protobuf:"bytes,8,opt,name=subnet,proto3" json:"subnet,omitempty"`
	RouteTable           string                `protobuf:"bytes,9,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *NetworkConfig) GetNetworkPlugin() NetworkPluginType {
	if x != nil {
		return x.NetworkPlugin
	}
	return NetworkPluginType_NETWORK_PLUGIN_TYPE_UNSPECIFIED
}

func (x *NetworkConfig) GetNetworkPolicy() NetworkPolicyType {
	if x != nil {
		return x.NetworkPolicy
	}
	return NetworkPolicyType_NETWORK_POLICY_TYPE_UNSPECIFIED
}

func (x *NetworkConfig) GetNetworkMode() NetworkMode {
	if x != nil {
		return x.NetworkMode
	}
	return NetworkMode_NETWORK_MODE_UNSPECIFIED
}

func (x *NetworkConfig) GetNetworkSecurityGroup() string {
	if x != nil {
		return x.NetworkSecurityGroup
	}
	return ""
}

func (x *NetworkConfig) GetVirtualNetworkConfig() *VirtualNetworkConfig {
	if x != nil {
		return x.VirtualNetworkConfig
	}
	return nil
}

func (x *NetworkConfig) GetVnetCniPluginsUrl() string {
	if x != nil {
		return x.VnetCniPluginsUrl
	}
	return ""
}

func (x *NetworkConfig) GetCniPluginsUrl() string {
	if x != nil {
		return x.CniPluginsUrl
	}
	return ""
}

func (x *NetworkConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *NetworkConfig) GetRouteTable() string {
	if x != nil {
		return x.RouteTable
	}
	return ""
}

var File_agentbaker_v1_config_proto protoreflect.FileDescriptor

var file_agentbaker_v1_config_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xc2, 0x10, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4b, 0x75, 0x62, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x6b, 0x75, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5b, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0b, 0x72, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72,
	0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x70, 0x6f,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x14,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x68, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x56, 0x68, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x67, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x67, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x46, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x18, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x73, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a,
	0x19, 0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x75,
	0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x77, 0x61, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x12, 0x35,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x63, 0x74, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x14, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57,
	0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xa4, 0x03, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62,
	0x65, 0x6c, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x6a,
	0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x44, 0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x63, 0x74,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x63, 0x74,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x52,
	0x07, 0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0f, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x47, 0x0a, 0x1d, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x1b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x18, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x1b, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x68, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22, 0x31,
	0x0a, 0x05, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x6c, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x73, 0x0a, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x25, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x6e, 0x61, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x70, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x70, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x70, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x5f, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6b, 0x75, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x6b, 0x75, 0x12, 0x59, 0x0a, 0x2a, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x25, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61,
	0x78, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x67,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x69, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x67, 0x70,
	0x75, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x70, 0x75,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x66,
	0x0a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x70, 0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x66,
	0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x1c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x64, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x59, 0x0a,
	0x0a, 0x52, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x75, 0x6e, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x75, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x83, 0x04, 0x0a, 0x0d, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x59, 0x0a, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x14,
	0x76, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6e, 0x65, 0x74,
	0x43, 0x6e, 0x69, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6e, 0x69, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6e, 0x69, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2a, 0x64,
	0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x2a, 0x96, 0x01,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x55, 0x42,
	0x45, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x95, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x43, 0x4f, 0x10, 0x03, 0x2a, 0x74,
	0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x55, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x55, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x32, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x01, 0x42,
	0xad, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x65,
	0x72, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41,
	0x58, 0x58, 0xaa, 0x02, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agentbaker_v1_config_proto_rawDescOnce sync.Once
	file_agentbaker_v1_config_proto_rawDescData = file_agentbaker_v1_config_proto_rawDesc
)

func file_agentbaker_v1_config_proto_rawDescGZIP() []byte {
	file_agentbaker_v1_config_proto_rawDescOnce.Do(func() {
		file_agentbaker_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_agentbaker_v1_config_proto_rawDescData)
	})
	return file_agentbaker_v1_config_proto_rawDescData
}

var file_agentbaker_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_agentbaker_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_agentbaker_v1_config_proto_goTypes = []interface{}{
	(FeatureState)(0),                    // 0: agentbaker.v1.FeatureState
	(IdentityType)(0),                    // 1: agentbaker.v1.IdentityType
	(NetworkPluginType)(0),               // 2: agentbaker.v1.NetworkPluginType
	(NetworkPolicyType)(0),               // 3: agentbaker.v1.NetworkPolicyType
	(KubeletDiskType)(0),                 // 4: agentbaker.v1.KubeletDiskType
	(LoadBalancerSku)(0),                 // 5: agentbaker.v1.LoadBalancerSku
	(NetworkMode)(0),                     // 6: agentbaker.v1.NetworkMode
	(*Configuration)(nil),                // 7: agentbaker.v1.Configuration
	(*KubeletConfiguration)(nil),         // 8: agentbaker.v1.KubeletConfiguration
	(*SysctlConfig)(nil),                 // 9: agentbaker.v1.SysctlConfig
	(*IdentityConfiguration)(nil),        // 10: agentbaker.v1.IdentityConfiguration
	(*HttpProxyConfig)(nil),              // 11: agentbaker.v1.HttpProxyConfig
	(*CustomCaTrustConfig)(nil),          // 12: agentbaker.v1.CustomCaTrustConfig
	(*Taint)(nil),                        // 13: agentbaker.v1.Taint
	(*Sysctl)(nil),                       // 14: agentbaker.v1.Sysctl
	(*VirtualNetworkConfig)(nil),         // 15: agentbaker.v1.VirtualNetworkConfig
	(*CloudProviderConfig)(nil),          // 16: agentbaker.v1.CloudProviderConfig
	(*CloudProviderBackoffConfig)(nil),   // 17: agentbaker.v1.CloudProviderBackoffConfig
	(*CloudProviderRateLimitConfig)(nil), // 18: agentbaker.v1.CloudProviderRateLimitConfig
	(*LoadBalancerConfig)(nil),           // 19: agentbaker.v1.LoadBalancerConfig
	(*ApiServerConfig)(nil),              // 20: agentbaker.v1.ApiServerConfig
	(*GpuConfig)(nil),                    // 21: agentbaker.v1.GpuConfig
	(*ContainerdConfig)(nil),             // 22: agentbaker.v1.ContainerdConfig
	(*TeleportConfig)(nil),               // 23: agentbaker.v1.TeleportConfig
	(*RuncConfig)(nil),                   // 24: agentbaker.v1.RuncConfig
	(*NetworkConfig)(nil),                // 25: agentbaker.v1.NetworkConfig
	nil,                                  // 26: agentbaker.v1.KubeletConfiguration.KubeletNodeLabelsEntry
}
var file_agentbaker_v1_config_proto_depIdxs = []int32{
	20, // 0: agentbaker.v1.Configuration.apiserver_config:type_name -> agentbaker.v1.ApiServerConfig
	16, // 1: agentbaker.v1.Configuration.cloud_provider_config:type_name -> agentbaker.v1.CloudProviderConfig
	10, // 2: agentbaker.v1.Configuration.identity_configuration:type_name -> agentbaker.v1.IdentityConfiguration
	24, // 3: agentbaker.v1.Configuration.runc_config:type_name -> agentbaker.v1.RuncConfig
	19, // 4: agentbaker.v1.Configuration.load_balancer_config:type_name -> agentbaker.v1.LoadBalancerConfig
	22, // 5: agentbaker.v1.Configuration.containerd_config:type_name -> agentbaker.v1.ContainerdConfig
	21, // 6: agentbaker.v1.Configuration.gpu_config:type_name -> agentbaker.v1.GpuConfig
	23, // 7: agentbaker.v1.Configuration.teleport_config:type_name -> agentbaker.v1.TeleportConfig
	11, // 8: agentbaker.v1.Configuration.http_proxy_configuration:type_name -> agentbaker.v1.HttpProxyConfig
	0,  // 9: agentbaker.v1.Configuration.ssh_status:type_name -> agentbaker.v1.FeatureState
	0,  // 10: agentbaker.v1.Configuration.unattended_upgrade_status:type_name -> agentbaker.v1.FeatureState
	9,  // 11: agentbaker.v1.Configuration.sysctls:type_name -> agentbaker.v1.SysctlConfig
	8,  // 12: agentbaker.v1.Configuration.kubelet_configuration:type_name -> agentbaker.v1.KubeletConfiguration
	0,  // 13: agentbaker.v1.Configuration.hosts_config_agent_status:type_name -> agentbaker.v1.FeatureState
	12, // 14: agentbaker.v1.Configuration.custom_ca_trust_config:type_name -> agentbaker.v1.CustomCaTrustConfig
	26, // 15: agentbaker.v1.KubeletConfiguration.kubelet_node_labels:type_name -> agentbaker.v1.KubeletConfiguration.KubeletNodeLabelsEntry
	13, // 16: agentbaker.v1.KubeletConfiguration.taints:type_name -> agentbaker.v1.Taint
	13, // 17: agentbaker.v1.KubeletConfiguration.startup_taints:type_name -> agentbaker.v1.Taint
	4,  // 18: agentbaker.v1.KubeletConfiguration.kubelet_disk_type:type_name -> agentbaker.v1.KubeletDiskType
	14, // 19: agentbaker.v1.SysctlConfig.sysctls:type_name -> agentbaker.v1.Sysctl
	1,  // 20: agentbaker.v1.IdentityConfiguration.identity_type:type_name -> agentbaker.v1.IdentityType
	0,  // 21: agentbaker.v1.HttpProxyConfig.http_proxy_config_status:type_name -> agentbaker.v1.FeatureState
	0,  // 22: agentbaker.v1.HttpProxyConfig.http_proxy_ca_config_status:type_name -> agentbaker.v1.FeatureState
	0,  // 23: agentbaker.v1.CustomCaTrustConfig.custom_ca_trust_status:type_name -> agentbaker.v1.FeatureState
	17, // 24: agentbaker.v1.CloudProviderConfig.cloud_provider_backoff_config:type_name -> agentbaker.v1.CloudProviderBackoffConfig
	18, // 25: agentbaker.v1.CloudProviderConfig.cloud_provider_rate_limit_config:type_name -> agentbaker.v1.CloudProviderRateLimitConfig
	0,  // 26: agentbaker.v1.CloudProviderBackoffConfig.status:type_name -> agentbaker.v1.FeatureState
	0,  // 27: agentbaker.v1.CloudProviderRateLimitConfig.status:type_name -> agentbaker.v1.FeatureState
	5,  // 28: agentbaker.v1.LoadBalancerConfig.load_balancer_sku:type_name -> agentbaker.v1.LoadBalancerSku
	0,  // 29: agentbaker.v1.GpuConfig.status:type_name -> agentbaker.v1.FeatureState
	0,  // 30: agentbaker.v1.GpuConfig.is_mig_node:type_name -> agentbaker.v1.FeatureState
	0,  // 31: agentbaker.v1.GpuConfig.config_gpu_driver_if_needed:type_name -> agentbaker.v1.FeatureState
	0,  // 32: agentbaker.v1.GpuConfig.enable_gpu_device_plugin_if_needed:type_name -> agentbaker.v1.FeatureState
	0,  // 33: agentbaker.v1.GpuConfig.fabric_manager_status:type_name -> agentbaker.v1.FeatureState
	0,  // 34: agentbaker.v1.TeleportConfig.status:type_name -> agentbaker.v1.FeatureState
	2,  // 35: agentbaker.v1.NetworkConfig.network_plugin:type_name -> agentbaker.v1.NetworkPluginType
	3,  // 36: agentbaker.v1.NetworkConfig.network_policy:type_name -> agentbaker.v1.NetworkPolicyType
	6,  // 37: agentbaker.v1.NetworkConfig.network_mode:type_name -> agentbaker.v1.NetworkMode
	15, // 38: agentbaker.v1.NetworkConfig.virtual_network_config:type_name -> agentbaker.v1.VirtualNetworkConfig
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_agentbaker_v1_config_proto_init() }
func file_agentbaker_v1_config_proto_init() {
	if File_agentbaker_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agentbaker_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeletConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysctlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCaTrustConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sysctl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProviderBackoffConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudProviderRateLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agentbaker_v1_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_agentbaker_v1_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agentbaker_v1_config_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agentbaker_v1_config_proto_goTypes,
		DependencyIndexes: file_agentbaker_v1_config_proto_depIdxs,
		EnumInfos:         file_agentbaker_v1_config_proto_enumTypes,
		MessageInfos:      file_agentbaker_v1_config_proto_msgTypes,
	}.Build()
	File_agentbaker_v1_config_proto = out.File
	file_agentbaker_v1_config_proto_rawDesc = nil
	file_agentbaker_v1_config_proto_goTypes = nil
	file_agentbaker_v1_config_proto_depIdxs = nil
}
