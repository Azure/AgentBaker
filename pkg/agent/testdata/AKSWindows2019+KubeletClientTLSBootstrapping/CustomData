<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--bootstrap-kubeconfig=c:\k\bootstrap-config", "--cert-dir=c:\k\pki", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = "07401b.f395accd246ae52d"

$global:IsNotRebootWindowsNode = [System.Convert]::ToBoolean("false");

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

if ($useContainerD) {
    $global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")
}

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.19.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }
    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
    }

    if ($useContainerD) {
        Write-Log "Installing ContainerD"
        $cniBinPath = $global:AzureCNIBinDir
        $cniConfigPath = $global:AzureCNIConfDir
        if ($global:NetworkPlugin -eq "kubenet") {
            $cniBinPath = $global:CNIPath
            $cniConfigPath = $global:CNIConfigPath
        }
        Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    } else {
        Write-Log "Install docker"
        Install-Docker -DockerVersion $global:DockerVersion
        Set-DockerLogFileOptions
    }

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
            Write-Log "Starting hosts config agent"
            New-HostsConfigService
        }

    Write-Log "Create the Pause Container kubletwin/pause"
    New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime

    if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
        Write-Log "Could not find container with name kubletwin/pause"
        if ($useContainerD) {
            $o = ctr -n k8s.io image list
            Write-Log $o
        } else {
            $o = docker image list
            Write-Log $o
        }
        Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir `
        -ContainerRuntime $global:ContainerRuntime

    Get-LogCollectionScripts

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:IsNotRebootWindowsNode) {
        Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    } else {
        # Postpone restart-computer so we can generate CSE response before restarting computer
        Write-Log "Setup Complete, reboot computer"
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
