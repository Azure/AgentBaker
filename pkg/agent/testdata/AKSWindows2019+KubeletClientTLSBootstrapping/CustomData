<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TLSBootstrapToken,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [string]
    $UserAssignedClientID
)

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "19.03.14"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

# To support newer Windows OS version, we need to support set ContainerRuntime,
# ContainerdWindowsRuntimeHandlers and DefaultContainerdWindowsSandboxIsolation per agent pool but
# current code does not support this. Below is a workaround to set contianer
# runtime variables per Windows OS version.
#
# Set default values for container runtime variables for AKS Windows 2004
if ($([System.Environment]::OSVersion.Version).Build -eq "19041") {
    $global:ContainerRuntime = "containerd"
    $global:ContainerdWindowsRuntimeHandlers = "17763,19041"
    $global:DefaultContainerdWindowsSandboxIsolation = "process"
}

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "kubernetes.azure.com/role=agent,agentpool=wpool2,storageprofile=managed,storagetier=Premium_LRS,kubernetes.azure.com/cluster=resourceGroupName,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--bootstrap-kubeconfig=c:\k\bootstrap-config", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--image-pull-progress-deadline=20m", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--non-masquerade-cidr=0.0.0.0/0", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false

# Telemetry settings
$global:EnableTelemetry = [System.Convert]::ToBoolean("false");
$global:TelemetryKey = "";

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

$global:ProvisioningScriptsPackageUrl = "https://acs-mirror.azureedge.net/aks-engine/windows/provisioning/signedscripts-v0.0.4.zip";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# Base64 representation of ZIP archive
$zippedFiles = "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"

# Extract ZIP from script
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source scripts with functions that are called in this script
. c:\AzureData\windows\kuberneteswindowsfunctions.ps1
. c:\AzureData\windows\windowsconfigfunc.ps1
. c:\AzureData\windows\windowskubeletfunc.ps1
. c:\AzureData\windows\windowscnifunc.ps1
. c:\AzureData\windows\windowsazurecnifunc.ps1
. c:\AzureData\windows\windowscsiproxyfunc.ps1
. c:\AzureData\windows\windowsinstallopensshfunc.ps1
. c:\AzureData\windows\windowscontainerdfunc.ps1
. c:\AzureData\windows\windowshostsconfigagentfunc.ps1
. c:\AzureData\windows\windowscalicofunc.ps1

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"

try
{
    # Set to false for debugging.  This will output the start script to
    # c:\AzureData\CustomDataSetupScript.log, and then you can RDP
    # to the windows machine, and run the script manually to watch
    # the output.
    if ($true) {
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

        if ($global:EnableTelemetry) {
            $global:globalTimer = [System.Diagnostics.Stopwatch]::StartNew()

            $configAppInsightsClientTimer = [System.Diagnostics.Stopwatch]::StartNew()
            # Get app insights binaries and set up app insights client
            mkdir c:\k\appinsights
            DownloadFileOverHttp -Url "https://globalcdn.nuget.org/packages/microsoft.applicationinsights.2.11.0.nupkg" -DestinationPath "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip"
            Expand-Archive -Path "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip" -DestinationPath "c:\k\appinsights"
            $appInsightsDll = "c:\k\appinsights\lib\net46\Microsoft.ApplicationInsights.dll"
            [Reflection.Assembly]::LoadFile($appInsightsDll)
            $conf = New-Object "Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration"
            $conf.DisableTelemetry = -not $global:EnableTelemetry
            $conf.InstrumentationKey = $global:TelemetryKey
            $global:AppInsightsClient = New-Object "Microsoft.ApplicationInsights.TelemetryClient"($conf)

            $global:AppInsightsClient.Context.Properties["correlation_id"] = New-Guid
            $global:AppInsightsClient.Context.Properties["cri"] = $global:ContainerRuntime
            # TODO: Update once containerd versioning story is decided
            $global:AppInsightsClient.Context.Properties["cri_version"] = if ($global:ContainerRuntime -eq "docker") { $global:DockerVersion } else { "" }
            $global:AppInsightsClient.Context.Properties["k8s_version"] = $global:KubeBinariesVersion
            $global:AppInsightsClient.Context.Properties["lb_sku"] = $global:LoadBalancerSku
            $global:AppInsightsClient.Context.Properties["location"] = $Location
            $global:AppInsightsClient.Context.Properties["os_type"] = "windows"
            $global:AppInsightsClient.Context.Properties["os_version"] = Get-WindowsVersion
            $global:AppInsightsClient.Context.Properties["network_plugin"] = $global:NetworkPlugin
            $global:AppInsightsClient.Context.Properties["network_plugin_version"] = Get-CniVersion
            $global:AppInsightsClient.Context.Properties["network_mode"] = $global:NetworkMode
            $global:AppInsightsClient.Context.Properties["subscription_id"] = $global:SubscriptionId

            $vhdId = ""
            if (Test-Path "c:\vhd-id.txt") {
                $vhdId = Get-Content "c:\vhd-id.txt"
            }
            $global:AppInsightsClient.Context.Properties["vhd_id"] = $vhdId

            $imdsProperties = Get-InstanceMetadataServiceTelemetry
            foreach ($key in $imdsProperties.keys) {
                $global:AppInsightsClient.Context.Properties[$key] = $imdsProperties[$key]
            }

            $configAppInsightsClientTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Config-AppInsightsClient", $configAppInsightsClientTimer.Elapsed.TotalSeconds)
        }

        # Install OpenSSH if SSH enabled
        $sshEnabled = [System.Convert]::ToBoolean("true")

        if ( $sshEnabled ) {
            Write-Log "Install OpenSSH"
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-OpenSSH -SSHKeys $SSHKeys
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-OpenSSH", $installOpenSSHTimer.Elapsed.TotalSeconds)
            }
        }

        Write-Log "Apply telemetry data setting"
        Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

        Write-Log "Resize os drive if possible"
        if ($global:EnableTelemetry) {
            $resizeTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        Resize-OSDrive
        if ($global:EnableTelemetry) {
            $resizeTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Resize-OSDrive", $resizeTimer.Elapsed.TotalSeconds)
        }

        Write-Log "Initialize data disks"
        Initialize-DataDisks

        Write-Log "Create required data directories as needed"
        Initialize-DataDirectories

        New-Item -ItemType Directory -Path "c:\k" -Force | Out-Null
        Get-ProvisioningScripts

        Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

        if ($useContainerD) {
            Write-Log "Installing ContainerD"
            if ($global:EnableTelemetry) {
                $containerdTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            $cniBinPath = $global:AzureCNIBinDir
            $cniConfigPath = $global:AzureCNIConfDir
            if ($global:NetworkPlugin -eq "kubenet") {
                $cniBinPath = $global:CNIPath
                $cniConfigPath = $global:CNIConfigPath
            }
            Install-Containerd -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath
            if ($global:EnableTelemetry) {
                $containerdTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-ContainerD", $containerdTimer.Elapsed.TotalSeconds)
            }
            # TODO: disable/uninstall Docker later
        } else {
            Write-Log "Install docker"
            if ($global:EnableTelemetry) {
                $dockerTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-Docker -DockerVersion $global:DockerVersion
            Set-DockerLogFileOptions
            if ($global:EnableTelemetry) {
                $dockerTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-Docker", $dockerTimer.Elapsed.TotalSeconds)
            }
        }

        Write-Log "Download kubelet binaries and unzip"
        Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

        # this overwrite the binaries that are download from the custom packge with binaries
        # The custom package has a few files that are nessary for future steps (nssm.exe)
        # this is a temporary work around to get the binaries until we depreciate
        # custom package and nssm.exe as defined in #3851.
        if ($global:WindowsKubeBinariesURL){
            Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
            Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        }

        # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
        Write-Log "Write Azure cloud provider config"
        Write-AzureConfig `
            -KubeDir $global:KubeDir `
            -AADClientId $AADClientId `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -Location $Location `
            -VmType $global:VmType `
            -SubnetName $global:SubnetName `
            -SecurityGroupName $global:SecurityGroupName `
            -VNetName $global:VNetName `
            -RouteTableName $global:RouteTableName `
            -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
            -PrimaryScaleSetName $global:PrimaryScaleSetName `
            -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
            -UserAssignedClientID $UserAssignedClientID `
            -UseInstanceMetadata $global:UseInstanceMetadata `
            -LoadBalancerSku $global:LoadBalancerSku `
            -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
            -TargetEnvironment $TargetEnvironment 

        # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
        # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
        

        Write-Log "Write ca root"
        Write-CACert -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir

        if ($global:EnableCsiProxy) {
            New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        }

        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $TLSBootstrapToken

        if ($global:EnableHostsConfigAgent) {
             Write-Log "Starting hosts config agent"
             New-HostsConfigService
         }

        Write-Log "Create the Pause Container kubletwin/pause"
        if ($global:EnableTelemetry) {
            $infraContainerTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime
        if ($global:EnableTelemetry) {
            $infraContainerTimer.Stop()
            $global:AppInsightsClient.TrackMetric("New-InfraContainer", $infraContainerTimer.Elapsed.TotalSeconds)
        }

        if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
            Write-Log "Could not find container with name kubletwin/pause"
            if ($useContainerD) {
                $o = ctr -n k8s.io image list
                Write-Log $o
            } else {
                $o = docker image list
                Write-Log $o
            }
            throw "kubletwin/pause container does not exist!"
        }

        Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

        # Configure network policy.
        Get-HnsPsm1 -HNSModule $global:HNSModule
        Import-Module $global:HNSModule

        if ($global:NetworkPlugin -eq "azure") {
            Write-Log "Installing Azure VNet plugins"
            Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
                -AzureCNIBinDir $global:AzureCNIBinDir `
                -VNetCNIPluginsURL $global:VNetCNIPluginsURL

            Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
                -KubeDnsSearchPath $global:KubeDnsSearchPath `
                -KubeClusterCIDR $global:KubeClusterCIDR `
                -KubeServiceCIDR $global:KubeServiceCIDR `
                -VNetCIDR $global:VNetCIDR `
                -IsDualStackEnabled $global:IsDualStackEnabled

            if ($TargetEnvironment -ieq "AzureStackCloud") {
                GenerateAzureStackCNIConfig `
                    -TenantId $global:TenantId `
                    -SubscriptionId $global:SubscriptionId `
                    -ResourceGroup $global:ResourceGroup `
                    -AADClientId $AADClientId `
                    -KubeDir $global:KubeDir `
                    -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
                    -NetworkAPIVersion $NetworkAPIVersion `
                    -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
                    -IdentitySystem "azure_ad"
            }
        }
        elseif ($global:NetworkPlugin -eq "kubenet") {
            Write-Log "Fetching additional files needed for kubenet"
            if ($useContainerD) {
                # TODO: CNI may need to move to c:\program files\containerd\cni\bin with ContainerD
                Install-SdnBridge -Url $global:ContainerdSdnPluginUrl -CNIPath $global:CNIPath
            } else {
                Update-WinCNI -CNIPath $global:CNIPath
            }
        }

        New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

        Install-KubernetesServices `
            -KubeDir $global:KubeDir

        Get-LogCollectionScripts

        Write-Log "Disable Internet Explorer compat mode and set homepage"
        Set-Explorer

        Write-Log "Adjust pagefile size"
        Adjust-PageFileSize

        Write-Log "Start preProvisioning script"
        

        Write-Log "Update service failure actions"
        Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime

        Adjust-DynamicPortRange
        Register-LogsCleanupScriptTask
        Register-NodeResetScriptTask
        Register-NodeLabelSyncScriptTask
        Update-DefenderPreferences

        Check-APIServerConnectivity -MasterIP $MasterIP

        if ($global:WindowsCalicoPackageURL) {
            Write-Log "Start calico installation"
            Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        }

        if (Test-Path $CacheDir)
        {
            Write-Log "Removing aks-engine bits cache directory"
            Remove-Item $CacheDir -Recurse -Force
        }

        if ($global:EnableTelemetry) {
            $global:globalTimer.Stop()
            $global:AppInsightsClient.TrackMetric("TotalDuration", $global:globalTimer.Elapsed.TotalSeconds)
            $global:AppInsightsClient.Flush()
        }

        Write-Log "Setup Complete, reboot computer"
        Restart-Computer
    }
    else
    {
        # keep for debugging purposes
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AgentKey $AgentKey -AADClientId $AADClientId -AADClientSecret $AADClientSecret -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"
    }
}
catch
{
    if ($global:EnableTelemetry) {
        $exceptionTelemtry = New-Object "Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry"
        $exceptionTelemtry.Exception = $_.Exception
        $global:AppInsightsClient.TrackException($exceptionTelemtry)
        $global:AppInsightsClient.Flush()
    }

    # Add timestamp in the logs
    Write-Log $_
    throw $_
}

