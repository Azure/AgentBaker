<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.6"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "kubernetes.azure.com/role=agent,agentpool=wpool2,storageprofile=managed,storagetier=Premium_LRS,kubernetes.azure.com/cluster=resourceGroupName,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--bootstrap-kubeconfig=c:\k\bootstrap-config", "--cert-dir=c:\k\pki", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--image-pull-progress-deadline=20m", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--non-masquerade-cidr=0.0.0.0/0", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false

# Telemetry settings
$global:EnableTelemetry = [System.Convert]::ToBoolean("false");
$global:TelemetryKey = "";

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

$global:ProvisioningScriptsPackageUrl = "https://acs-mirror.azureedge.net/aks-engine/windows/provisioning/signedscripts-v0.0.4.zip";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = "07401b.f395accd246ae52d"

# Base64 representation of ZIP archive
$zippedFiles = "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"

# Extract ZIP from script
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source scripts with functions that are called in this script
. c:\AzureData\windows\kuberneteswindowsfunctions.ps1
. c:\AzureData\windows\windowsconfigfunc.ps1
. c:\AzureData\windows\windowskubeletfunc.ps1
. c:\AzureData\windows\windowscnifunc.ps1
. c:\AzureData\windows\windowsazurecnifunc.ps1
. c:\AzureData\windows\windowscsiproxyfunc.ps1
. c:\AzureData\windows\windowsinstallopensshfunc.ps1
. c:\AzureData\windows\windowscontainerdfunc.ps1
. c:\AzureData\windows\windowshostsconfigagentfunc.ps1
. c:\AzureData\windows\windowscalicofunc.ps1
. c:\AzureData\windows\windowscsehelper.ps1

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")
$windowsSecureTlsEnabled = [System.Convert]::ToBoolean("false");

try
{
    # Set to false for debugging.  This will output the start script to
    # c:\AzureData\CustomDataSetupScript.log, and then you can RDP
    # to the windows machine, and run the script manually to watch
    # the output.
    if ($true) {
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

        if ($global:EnableTelemetry) {
            $global:globalTimer = [System.Diagnostics.Stopwatch]::StartNew()

            $configAppInsightsClientTimer = [System.Diagnostics.Stopwatch]::StartNew()
            # Get app insights binaries and set up app insights client
            Create-Directory -FullPath c:\k\appinsights -DirectoryUsage "storing appinsights"
            DownloadFileOverHttp -Url "https://globalcdn.nuget.org/packages/microsoft.applicationinsights.2.11.0.nupkg" -DestinationPath "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip"
            Expand-Archive -Path "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip" -DestinationPath "c:\k\appinsights"
            $appInsightsDll = "c:\k\appinsights\lib\net46\Microsoft.ApplicationInsights.dll"
            [Reflection.Assembly]::LoadFile($appInsightsDll)
            $conf = New-Object "Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration"
            $conf.DisableTelemetry = -not $global:EnableTelemetry
            $conf.InstrumentationKey = $global:TelemetryKey
            $global:AppInsightsClient = New-Object "Microsoft.ApplicationInsights.TelemetryClient"($conf)

            $global:AppInsightsClient.Context.Properties["correlation_id"] = New-Guid
            $global:AppInsightsClient.Context.Properties["cri"] = $global:ContainerRuntime
            # TODO: Update once containerd versioning story is decided
            $global:AppInsightsClient.Context.Properties["cri_version"] = if ($global:ContainerRuntime -eq "docker") { $global:DockerVersion } else { "" }
            $global:AppInsightsClient.Context.Properties["k8s_version"] = $global:KubeBinariesVersion
            $global:AppInsightsClient.Context.Properties["lb_sku"] = $global:LoadBalancerSku
            $global:AppInsightsClient.Context.Properties["location"] = $Location
            $global:AppInsightsClient.Context.Properties["os_type"] = "windows"
            $global:AppInsightsClient.Context.Properties["os_version"] = Get-WindowsVersion
            $global:AppInsightsClient.Context.Properties["network_plugin"] = $global:NetworkPlugin
            $global:AppInsightsClient.Context.Properties["network_plugin_version"] = Get-CniVersion
            $global:AppInsightsClient.Context.Properties["network_mode"] = $global:NetworkMode
            $global:AppInsightsClient.Context.Properties["subscription_id"] = $global:SubscriptionId

            $vhdId = ""
            if (Test-Path "c:\vhd-id.txt") {
                $vhdId = Get-Content "c:\vhd-id.txt"
            }
            $global:AppInsightsClient.Context.Properties["vhd_id"] = $vhdId

            $imdsProperties = Get-InstanceMetadataServiceTelemetry
            foreach ($key in $imdsProperties.keys) {
                $global:AppInsightsClient.Context.Properties[$key] = $imdsProperties[$key]
            }

            $configAppInsightsClientTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Config-AppInsightsClient", $configAppInsightsClientTimer.Elapsed.TotalSeconds)
        }

        # Install OpenSSH if SSH enabled
        $sshEnabled = [System.Convert]::ToBoolean("true")

        if ( $sshEnabled ) {
            Write-Log "Install OpenSSH"
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-OpenSSH -SSHKeys $SSHKeys
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-OpenSSH", $installOpenSSHTimer.Elapsed.TotalSeconds)
            }
        }

        Write-Log "Apply telemetry data setting"
        Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

        Write-Log "Resize os drive if possible"
        if ($global:EnableTelemetry) {
            $resizeTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        Resize-OSDrive
        if ($global:EnableTelemetry) {
            $resizeTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Resize-OSDrive", $resizeTimer.Elapsed.TotalSeconds)
        }

        Write-Log "Initialize data disks"
        Initialize-DataDisks

        Write-Log "Create required data directories as needed"
        Initialize-DataDirectories

        Create-Directory -FullPath "c:\k"
        Get-ProvisioningScripts

        Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

        Write-Log "Download kubelet binaries and unzip"
        Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

        # This overwrites the binaries that are downloaded from the custom packge with binaries.
        # The custom package has a few files that are necessary for future steps (nssm.exe)
        # this is a temporary work around to get the binaries until we depreciate
        # custom package and nssm.exe as defined in aks-engine#3851.
        if ($global:WindowsKubeBinariesURL){
            Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
            Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        }

        if ($useContainerD) {
            Write-Log "Installing ContainerD"
            if ($global:EnableTelemetry) {
                $containerdTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            $cniBinPath = $global:AzureCNIBinDir
            $cniConfigPath = $global:AzureCNIConfDir
            if ($global:NetworkPlugin -eq "kubenet") {
                $cniBinPath = $global:CNIPath
                $cniConfigPath = $global:CNIConfigPath
            }
            Install-Containerd -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir
            if ($global:EnableTelemetry) {
                $containerdTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-ContainerD", $containerdTimer.Elapsed.TotalSeconds)
            }
        } else {
            Write-Log "Install docker"
            if ($global:EnableTelemetry) {
                $dockerTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-Docker -DockerVersion $global:DockerVersion
            Set-DockerLogFileOptions
            if ($global:EnableTelemetry) {
                $dockerTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-Docker", $dockerTimer.Elapsed.TotalSeconds)
            }
        }

        # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
        Write-Log "Write Azure cloud provider config"
        Write-AzureConfig `
            -KubeDir $global:KubeDir `
            -AADClientId $AADClientId `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -Location $Location `
            -VmType $global:VmType `
            -SubnetName $global:SubnetName `
            -SecurityGroupName $global:SecurityGroupName `
            -VNetName $global:VNetName `
            -RouteTableName $global:RouteTableName `
            -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
            -PrimaryScaleSetName $global:PrimaryScaleSetName `
            -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
            -UserAssignedClientID $UserAssignedClientID `
            -UseInstanceMetadata $global:UseInstanceMetadata `
            -LoadBalancerSku $global:LoadBalancerSku `
            -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
            -TargetEnvironment $TargetEnvironment 

        # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
        # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
        

        Write-Log "Write ca root"
        Write-CACert -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir

        if ($global:EnableCsiProxy) {
            New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Write TLS bootstrap kubeconfig"
            Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
                -KubeDir $global:KubeDir `
                -MasterFQDNPrefix $MasterFQDNPrefix `
                -MasterIP $MasterIP `
                -TLSBootstrapToken $global:TLSBootstrapToken

            # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
            #       This kubeconfig will deleted after calico installation.
            # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
            Write-Log "Write temporary kube config"
        } else {
            Write-Log "Write kube config"
        }

        Write-KubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -AgentKey $AgentKey `
            -AgentCertificate $global:AgentCertificate

        if ($global:EnableHostsConfigAgent) {
             Write-Log "Starting hosts config agent"
             New-HostsConfigService
         }

        Write-Log "Create the Pause Container kubletwin/pause"
        if ($global:EnableTelemetry) {
            $infraContainerTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime
        if ($global:EnableTelemetry) {
            $infraContainerTimer.Stop()
            $global:AppInsightsClient.TrackMetric("New-InfraContainer", $infraContainerTimer.Elapsed.TotalSeconds)
        }

        if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
            Write-Log "Could not find container with name kubletwin/pause"
            if ($useContainerD) {
                $o = ctr -n k8s.io image list
                Write-Log $o
            } else {
                $o = docker image list
                Write-Log $o
            }
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
        }

        Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

        # Configure network policy.
        Get-HnsPsm1 -HNSModule $global:HNSModule
        Import-Module $global:HNSModule

        if ($global:NetworkPlugin -eq "azure") {
            Write-Log "Installing Azure VNet plugins"
            Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
                -AzureCNIBinDir $global:AzureCNIBinDir `
                -VNetCNIPluginsURL $global:VNetCNIPluginsURL

            Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
                -KubeDnsSearchPath $global:KubeDnsSearchPath `
                -KubeClusterCIDR $global:KubeClusterCIDR `
                -KubeServiceCIDR $global:KubeServiceCIDR `
                -VNetCIDR $global:VNetCIDR `
                -IsDualStackEnabled $global:IsDualStackEnabled

            if ($TargetEnvironment -ieq "AzureStackCloud") {
                GenerateAzureStackCNIConfig `
                    -TenantId $global:TenantId `
                    -SubscriptionId $global:SubscriptionId `
                    -ResourceGroup $global:ResourceGroup `
                    -AADClientId $AADClientId `
                    -KubeDir $global:KubeDir `
                    -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
                    -NetworkAPIVersion $NetworkAPIVersion `
                    -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
                    -IdentitySystem "azure_ad"
            }
        }
        elseif ($global:NetworkPlugin -eq "kubenet") {
            Write-Log "Fetching additional files needed for kubenet"
            if ($useContainerD) {
                # TODO: CNI may need to move to c:\program files\containerd\cni\bin with ContainerD
                Install-SdnBridge -Url $global:ContainerdSdnPluginUrl -CNIPath $global:CNIPath
            } else {
                Update-WinCNI -CNIPath $global:CNIPath
            }
        }

        New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

        Install-KubernetesServices `
            -KubeDir $global:KubeDir `
            -ContainerRuntime $global:ContainerRuntime

        Get-LogCollectionScripts

        Write-Log "Disable Internet Explorer compat mode and set homepage"
        Set-Explorer

        Write-Log "Adjust pagefile size"
        Adjust-PageFileSize

        Write-Log "Start preProvisioning script"
        

        Write-Log "Update service failure actions"
        Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
        Adjust-DynamicPortRange
        Register-LogsCleanupScriptTask
        Register-NodeResetScriptTask
        Update-DefenderPreferences

        if ($windowsSecureTlsEnabled) {
            Write-Host "Enable secure TLS protocols"
            try {
                . C:\k\windowssecuretls.ps1
                Enable-SecureTls
            }
            catch {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
            }
        }

        Enable-FIPSMode -FipsEnabled $fipsEnabled
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl

        Check-APIServerConnectivity -MasterIP $MasterIP

        if ($global:WindowsCalicoPackageURL) {
            Write-Log "Start calico installation"
            Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        }

        if (Test-Path $CacheDir)
        {
            Write-Log "Removing aks-engine bits cache directory"
            Remove-Item $CacheDir -Recurse -Force
        }

        if ($global:EnableTelemetry) {
            $global:globalTimer.Stop()
            $global:AppInsightsClient.TrackMetric("TotalDuration", $global:globalTimer.Elapsed.TotalSeconds)
            $global:AppInsightsClient.Flush()
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Removing temporary kube config"
            $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
            Remove-Item $kubeConfigFile
        }

        # Postpone restart-computer so we can generate CSE response before restarting computer
        Write-Log "Setup Complete, reboot computer"
        Postpone-RestartComputer
    }
    else
    {
        # keep for debugging purposes
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AgentKey $AgentKey -AADClientId $AADClientId -AADClientSecret $AADClientSecret -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"
    }
}
catch
{
    if ($global:EnableTelemetry) {
        $exceptionTelemtry = New-Object "Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry"
        $exceptionTelemtry.Exception = $_.Exception
        $global:AppInsightsClient.TrackException($exceptionTelemtry)
        $global:AppInsightsClient.Flush()
    }

    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8
}

