<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""
Start-Transcript -Path $LogFile
# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.17.7-hotfix.20200714/windowszip/v1.17.7-hotfix.20200714-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.17.7"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAcAAAAd2luZG93cy93aW5kb3dzY3NlaGVscGVyLnBzMdRc3XLbOLK+91OgGJ2NXRPKf3Ey0RRPDUPRNtcSqSIpO9nYxaFJSMKGInQA0I43k3c/BfAPlChazs5ebC5smeyvu9FoAP0BUF4Bf4EooBFBKwYQBRmFMWAYxHCGUgjuQ4oikDGUgFmWRgzhlO69ApaQvYeMQSJJVyIApYAtYKGXgiyNIQGUhXOUzg8jCg8fURrjR9rf23sFhjk6TBIAvyEGIhxDoeImFwKGZ+ZGlxllYBmyaAH++KKr/wjufvljrzdP8H2YDG4se+jceIHhmYE3NQzT87Sj1rem6zpuMLWvbOfG1o7BK3COCchS+G0FIwZjAAnBBERhNl8wcP8k2hIJs/cJjr5y375m95CkkEFaNIVClq36K3rcYXLo3NgjRx8G59bIDG4s/zJwTd/9rJ10gCz72rkyA/OTaUx9/ePI1E47pIVm2/ED85Pl+drbDlHj0jSuAn1iBZ7pXptuYDi2bRq+dW35n7WzDuREn3pmYI31C9nWuw7EhekH3vSjbfrBxDXPrU/a+05p23R13wx858q0g3PHDXR3rP3aAbFN/8ZxrwLL9k33XDdMT/Lsww5AfahPfNOVUMdd2TPWbf3CHJu2H1gTGdTV/4Y+sgxHhNsyzEA3DGdq+zK6KxEMx/Z1yzbdoUBYtufro5E51I67EmIN5U5t27IvtOOuzHAmpu15l+tmulKihJxbrnmjj0YCazj2uXUxdTm4Kzss+1ofWcNgorv62OS9YNmB/o+paxYqtOOudLGdYOgYV6Yb+E7wcWqNhkWGVm3XjrtyhyenoQeG6frWuWXovulpx105U43jddRJV8qY44n/eRPSlTCmzQd84JkGj4U/8rSTrgy5GHt6YH6a6PYw0F3j0ro2tZOu5MgBuZGJc2O63qU5GgUT17q2RuaFqZ10pYlAe6YfuOaF5fnu52BiumPL8yzH1k66smUTea2PpjwanZMIR1njieP6gWFcmNem7XvaSedM0oToV9eTyWh6YdkluHNOcfzg3Jnaw+Zo104655MKlGeiPR1/NF3ttCszaszEda4tHj/Lvgg8w7UmvqeddqWI5+sun0KGZuCaPKQ5KvB170o77cqWOos9M5joxpV+YWqnXelSIa6mH03XNn3Tq4FdmVKbsq0a0ZUhFeLS9oKxM5zyda8rOaQxKSbZykpXelQgkScVpCsppKhZvLs+fa5xu80Z9YRcAt92JQfvU9+YBMPPtj62jEDksqvbHNeVGHn6FRPj+nz4tisxJlM+B9RrvPa2KylyO75+0YR0Vh51CD5atu5+LquVrowo42B+MkbTodmIQ1dicNx02B6/rtwocW32umeNwJh6vjMOhrqv8wZqbz+AV8CFLCO8Lka0LDBxDHktGVEYLWNeO4LHBUyBMbjV/5UROAxZeGtklOEl/9i/RymIMaQgxYyXypQ944Yn5oTpyA9GzoV2dvRveOGZLqRZwvoJnu/uhOFMPnPbgeGMRry0dOxqVjvrSl7X9Kx/mIHjBUOXr2JnncveZJqLuWW1ogtL57rF65azzhVwC9a3xqYz9bWzzgVwC/h6HAj3+bzuTSc8c7gfnSviFlVTNy+lPNPXzjoXx8k08K6mgWWfO/WCop11ro5bjNY8RbdGU9fUzjrLJ1lLXsh51oWt+wLZNSdus29+MswJ/6S965oZn4uZ+cnU3h1zijlJYEghCOMYpPBRTvwZJiDGj2mCwxilc/F6FUZfw3nOQd1JLscwrjwxOdzAMbTDJaRAA7/v7wEAgCK7WFBQ5c3mq9z7gn9uF9jGFrcjNqjidtEmT9wu10kSt8NaGeJ28Q162CXaxg23y3cRw+dRG6xwO2QLI+wI7TNssAO5hQnujChY4Hb5Vgb4vPgW9teZsd3Mr6OLnmV93fm2RsR2GIc7I1qZXof4OsvrcHyT4T0nvJ3dPYPcwuxegspZ3TOIdUa3s/g6m+vKlVYmtwtAZnG7yLcxuO24Lva2S0bWzG0H6U3WtgNIYmw7SNdsbQfhJlPbASCztB3ENxjaLpgNdtbReVuZ2XZMFyvbjlpnZM/pX2NjO60LMhN7vs2brKgb087Anse8xM4m8+qWbdCjrhhtJTHbQWsEpmNO6yQvL8cVxOXlwFbS8nI1EmHpBm+SlZcbWycqO2pYIyk7otoIysuhEjlR9g44ObEd3xyAq+pA6RoSirBE9SOcshClQHlQKg4yRilahskG6gaxxShkkDIjR0ESAw0ox/2TX/tHCngFblCSgGgRpnMIEAMM58dbmBAYMfBQGBdbAI8Q0Gy1woQJXlSex0W15kK8cstj4X0Ca9OTnEpxDx6O++/6J8dq+K+MwP7x4T1KQ4IgPazVqWsyanG2pobL+N3bPgtJf/4vZe8V8BcQJKKVXc6sx6HpzPv+h+d8kUS2uPKcrRkmJ6eXJ/8Rk+YDTBkd4fkcpfMhItyIMbgtekns3dyO8JzeTpJsjlJ6O0YRwRTPWN/Ay1XGYD/fXPLEMa35jcGUx+82V3xbJ5sf0q+c63ILzac+WkKPhctV/mqvOFCeoYRBAghc4geexFmeciSMGCQU7N8eHYDHBYoWICQQROGKZQTGnG+nlC778BsEOGOrjOV5mOD5HMaALQjO5guwwo+Q0AVMkr3CkCsM2VmSUPAd9AKgErhKwgiC17dHr9+A16/Bj71SmPtMhc/fgdLbv4BMHYYMAvUck2XIAD4YgF6gCERxog1uCGJQHeH5fm8JKQ3n8AB8F0O/t6RzoIHyMfiz1i/e50gnbw0X3pP1Douth3OUQOcBkkvGVoXiSUjCZb6xwP99EX9DBsn+OEzjkGHyxO0yksGDuy+UEZTO7yrx3pQkb34aPISUoTTkLk5CtthZEUqZpMX8hpiBYyieHOyJX6/AOSJ82C5g9JVPPhRCgGYg5DkDwSNii/zqAE+3lP9AFIQJgWH8BKIwWsAY4Px2wfXlMO8BjizS84vl9LnHd4PBBWTnxYt9Ho3CgR6FIYkWYtfmQDxBM7DvQ8pUDgRldhvc1hCRsp+bWG5niPiMiclTbYzur8Pf1O69EShPqHBWPLZ3g4GeJKUeBGnu0I+9yq/CYt/AWcqAmkJwJDtUpSVQphSl8zJC5SyOZ1J0VGDg1ROXEqGeEbwEvdLCl6O7A94d612vVLY4WLUYXIIiUBUQqBJoQ4MYVxEsWsZ/woTCZlSjjMAJwQxHOKFS14jXKG0T+OI9UQaXfRuyvsffI/ZUSvhPK3g3GOQSQzgLs4S9AbsgaHJa5An/N8MEhtEC7PdWhRyfoko9Zpot866/DpMM0uddOpD7DpRdvNk+NcWsWBYoqGyvg1tj94tWAxrSP/Y2PzUdJg8oghOMUjYO03AOCQ/IWjP4WF8zWYerh5N4QvCcQEonBM4ggWnER2Vv82kNakW89lACU5Y88RUVpRl8LZkp92v5RMtXvbIZQxTOU0wZimjfY3j1GLKIzwQeCwmz4aOUVIw8rUWzF5K5yKzvU4I0PmH8BsaQLXCsKReQKb8BJxNjXFtP8B8NPS5k5Ek18HIZpjGoPihW+oC/QtWFlOVqFaDq3GRuWOU4BCk4yz8+DWESPnkwwmlMwfFR3XvFTaSm9x5kajndgvpTT3pGCCbjYpFSzkOU5AuuvPnNW90HQlIsgS0p0wy+CPO+NGJEQhdToL5aWSlF8wWjRoJgMX/1eDGwnso9yEsOoAEbPqrO/T95JarU5Yq+WiUoEgEvNfaHIQt5cvCagvZFyeLDBC557JQW5f2ygOF9WC67rYITgleQMATpF6VcQZQ7nsblVNqGGvP+i+gXZZgR4emY5qBmwMwkXFEYj1GSIJr3blPbtuD1fRJGX0U793OTB1L3PDOc2kdm2zJSRgbG+SrBU2L7uvCjUczISbi3cxGjdRcP3bWHtrWEkfNdPM3DJTXVgwxU44M3sfqDD1j4DbF6LMja8qZXVXgB0prlzitOnjLK68GQ5hUNXIWEO80fhOARk68hwVkaA4p4LykAE/AaxFhwPv6aC1Z3EleQCDVM9MOcNp2Q3NP2G97KpfCfvBT+n/fG6zwW4rZl7bbclRNM2Qqn+XwVElYQBgKKfuW8QvWxKvIRqBVBUPQrr18wEMMz+6WeNTVKDqmmIzFD8z6ICOSleJgCbpyhJQQspKJQJLmKvPQbF50Q5u7mE4fHa58sgTHXredvVPMbjDIGgVKzBs4v8tk3W3L3lXqa/kMpPFWrFuflyx9KYXFFUBqhVZi0GZ1UL9UphcSKgffZ880x4BmHU14EgGKh1aMor+ncLB3BB5iASzRfQMqK9GEEzeeizxHNY4DLIdsr3+Ue/B3f+8UDVWcAVIzmoK/HcbGE7B+fHfA5E/JpCKhOpUvc3UXbogjUIo5lpNW6iVIo1NKByjVeEgpayUFlUEFUBjWc8Z8rgh8QL1T54iP3qwvniDJI1p2p86zIBjWqM8pKVxkrFg+pWevD3hApFu+UY/KQyHFqVfX/xAy3MUmdZ0nyPMHSerMwoe1ErfRmSoudjTlMIQkTsMrICtNissrHu/jBV2jVxqzBeUo/DraQi7ztIC6t1QhxgL7mRr2q8nzKKQP/KdK/EgVrtsH/5rVBvrCskwR5idrNi/xyCpUWqldgwdiKDg4PKQujr/gBklmCH/sRXh6Gh6dvz84+nJ29PXz34f3xybu643kjfLhcYRKSp9p4Qf9XIclLl7IKbTBQjuN/FaVn2YGglxZ8tQBdZCi+Gwxs+Mg/FdI7RG//7xilRSALT4Tqg0bqNmvSnfNWIvbXYYLikEEbMztLEoeYyxV72m9LycLMznsG21UvQroQ+4mSdl4y/wWqm7VGUXv/R/Q2CvliMIpfPGX3ewho4Og38BuQR94mO3kFhnldkOA5ELQhLxrEx2X4VO0RU5hSxNADBHHIwoYOaQgJx0APgQHoRXl/NUthkl8T+1vVneB3bqqSqQlBGxvpoV9+aTzIeS5Q57AKdhubZQuCH0EvaLxo0itRKaheAuFqW3xrULM8LRhYXhDwtNp9JHSUmZW25+bwhoYvd82cHiHKdlTwbJmMUtZUnyT4EcalZL59cnTQRGyOBp6YnTJNiqqB463Zzbs+qbv+N5EgW5YaLgvcLBU1gRTeKkyg3+/Xyfq3VpnqtUi8ke755ifLN5yhKfZWULoZlfV8lF2SLOQDA8YgS2kWRZDSWZYkT/nGZfX1JdCwqWzNYLWMXkcq839RsQvSMv7W1kmwg+uy423DfmMUiV8v3WIwvy3CjPJKixQJJRbplt5q1lk6pZAwlTNvU6zguw/Tri1tro+vjDtP8s/vZbeXUoWdRin10thVWtau2raxbl7tF4zrY4aS2M6W95AUxot5XFACXkQUextPQLm8Go0Ht55z7t/orlmfDZXnR8D2b42M8JKiOFpUDvrFA2FnmxPl8WVRH91LPmlbnBWS9BExsdcqIeQYKsfv3787VcD3slHK8a9HHxRpKCgnR6dvf5UlEkajk6OTk6bU2emHhtTJ6WVD4nsvEEuVkPygAJWvf/xZAoFyenT64b3yQ4JzRn5ydHImqyg2nXfcpeu4xN12DWnLZh7DYIbSWJCX4ugQiFiCVARz0OiM9c29rUk1CTMK//s6tU3qhR3bpuK/vWOtlLIwSdT6pFr9GFIYq06q1pcJVLm/pYn3BZNur7ZQHUW+CG5bH1E6ROSnoAZOZz+F5TH4aWDjJsZesU7sulVW9EwdNtEvTrqheOvmGco1gErFENxzHQDL31cuDwf7oNFDg/rks9FxmxdTakn+6mNxj6F0jjf5FbDyI9pVSNmbdsXiXBfwGgRM3ZH4Fnmx9dx2z6S4kt8Xys1v4XKVwAFQSj4fRlRdIj52+uLyBIznsJ9CJl2uKL9yfvhw1D/qv33XfgEjf7fl5gW37ePqSswySxhaJbDlCgp9Ax4hwGnyBCjMt5NgGq8wShngxWdbQP6KtuU+3kimN2PYlRP5dYv2/oK8ThVlrnKoAIql20EDYRaA4z4oKgRwDxfhA8IkP+LPQ1B2diF90ufzJhPH1pteohQwPJ8n+Vc0xFWfYksLYAIWmM3Qt72iwG/G0UxjeoPYYl85VKoqTN7MqqXdEU/DJr7Y543Wr/Joz9xxEjDuzv6XIpp3m5PCgbh6ExLoY0nsJ+50HYiFrHEZoMPlLbeTKqgUnavNpNhsBo/aXOwJEsAWYcq7BP5fFuZHRT/RHJ5PrOtSV0vryv+voiiKm0zoZ1qUQErz5vw7TaA5ufmZJrQsnHy5aT74pUXPXg7+6aXmBUvK5rKxMXo2awygNtuw1iS1WuyldV88LdZxeU0HarFGV4t1o8BpxuAvoY5lHHemjq0aNs8i82NccfijKVY6E9fPEE7DYg6SD9Pr6nL9DlBDi6gfy2ySjNDyIFv7Uh4CObMZhexuMJiyyMaPfR9PU/SNv5EPp4ut6F6Uz+v8tdZyZ055enp6UsdjNY7B5eVguRxQ2p/NZop08tBLQsqaVwkbj8uDc6CBo432Ny8b8iAoSiMKa8rXry5uCkrmevtijx8tIV2FKVDz9N9i2uScQQpH485Wy43JXsOFbZcnZY176yvWhla1kVJFHOURrIF9GC1w8+GffOg+QMJ8rP6d4rTo2uLmIn8CNPB7rk2iaJeYMnEHYgCUHkwfBuWZW8of1oNCGUldIITlPmkTLLugIVw9lABFVSG3ebA5qn7sKb+3NakIhfywPRQ5+J8Up54Ywa3hqK53Cq/bulP23FnBvDlWLMvLjyXpsogeAOW4f3wkv2oEdi0fZDmzmg3y/qr/lISkIEpRaQYxD5oUjD8FzeUztzhm+r7lGvKP3vfmlPOjz5Xs/fj/AAAA//9QSwcI77VEAPYTAABtSgAAUEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAUAAAAd2luZG93cy9zZW5kbG9ncy5wczGsU09P204Qve+nmN+SQyL97NhBRIXWLTSlYJU/EYZKLeWwjSf2ivWutTt2WyG+e7U2IVBA6qF78sy8eTNvZvxmgwEAhNmXk9N5lmad5d9FrYzIHQhQpoDvjc4VAhmgEqE0jmBpLFgkK7EVClop4KBBR5+Pj0zhQtbTftjPZmfp/Dw9Pfm3zP6di2v0NLWwokJCC2YJAr6mc1hKhaBF1RE3XcH/4UcpFyVIBw41rSoeGkd7BWq6p/UFfWTcVl3gyBSAOq+N1BSyjbfsclblCum91LnUxXB0xboOhh3DpSMrdXHVGYO5oJKNGJNLGP43PEdHgXf1gdEIbjqYRWqsZreMDQ6MUBkJwj1bOEhgt0fwY6TS5DzhB0j8de+7sJInvCSqd8bjePoqnG6G8WQ7jKfjSixKqXH8bmGqOimMUM6TrjIPUeRoHU92b/jPoHJBi9ZJo3nCJ1E8CeI42Iz4Lbt90BAkMBimujXXGJyho74j2H3U8Si8Nxkb9Jt+Scm8+QslO5uTrcn0wSpWKan+KBXypJvkU1n323xG31YQbQdRfMe0Bi2URE3BwliLSpA0Wvo+X8L58+IJ3/uUzbL9uWoKqV+CrstHYRxGT2FGk5AarS+4Hnk4W/nXX2n+Z3JbCT8bZYogx1qZXxVq8kTDZ5nOjMJUOxJ6gUfS0SOHxy1l0dhO/p114v+jwNVKEvBvIR9dRv15+wN55iLWa/8dAAD//1BLBwiFX+NRIQIAAF4EAABQSwECFAAUAAgACAAAAAAA77VEAPYTAABtSgAAHAAAAAAAAAAAAAAAAAAAAAAAd2luZG93cy93aW5kb3dzY3NlaGVscGVyLnBzMVBLAQIUABQACAAIAAAAAACFX+NRIQIAAF4EAAAUAAAAAAAAAAAAAAAAAEAUAAB3aW5kb3dzL3NlbmRsb2dzLnBzMVBLBQYAAAAAAgACAIwAAACjFgAAAAA="

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.39.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"
    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 
    # Please not use Write-Log or Logs-To-Events after Stop-Transcript
    Stop-Transcript

    # Remove the parameters in the log file to avoid leaking secrets
    $logs=Get-Content $LogFile | Where-Object {$_ -notmatch "^Host Application: "}
    $logs | Set-Content $LogFile

    Upload-GuestVMLogs -ExitCode $global:ExitCode
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        throw "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
}
