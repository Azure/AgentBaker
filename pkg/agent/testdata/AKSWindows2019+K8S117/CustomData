<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.17.7-hotfix.20200714/windowszip/v1.17.7-hotfix.20200714-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.17.7"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.37.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion

    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
