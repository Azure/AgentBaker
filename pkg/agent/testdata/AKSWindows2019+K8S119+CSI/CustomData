<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    # C:\AzureData\provision.complete
    # MUST keep generating this file when CSE is done and do not change the name
    #  - It is used to avoid running CSE multiple times
    #  - Some customers use this file to check if CSE is done
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath
)

# In an ideal world, all these values would be passed to this script in parameters. However, we don't live in an ideal world.
# https://learn.microsoft.com/en-gb/troubleshoot/windows-client/shell-experience/command-line-string-limitation

$MasterIP = "uttestdom-dns-5d7c849e.hcp.southcentralus.azmk8s.io"
$KubeDnsServiceIp="10.0.0.10"
$MasterFQDNPrefix="uttestdom"
$Location="southcentralus"

$TargetEnvironment="AzurePublicCloud"
$AADClientId="ClientID"
$NetworkAPIVersion="2018-08-01"

# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = ""
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false
$global:CiliumDataplaneEnabled = $false
$global:IsIMDSRestrictionEnabled = $false

# Kubelet credential provider
$global:CredentialProviderURL = ""

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("true");
$global:CsiProxyUrl = "https://acs-mirror.azureedge.net/csi-proxy/v0.1.0/binaries/csi-proxy.tar.gz";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

$global:IsSkipCleanupNetwork = [System.Convert]::ToBoolean("false");

$global:EnableKubeletServingCertificateRotation = [System.Convert]::ToBoolean("false")

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment -CSEResultFilePath $CSEResultFilePath"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-current.zip"
    # CSEScriptsPackage is cached on VHD. Previously the cse package version was managed in components.json, whereas RP set the package URL which is a storage account.
    # From 2025-06 The CSE packages is eleased on the VHD. RP can use fully qualified URL to download CSE scripts package when required out of VHD release cycle. 
    # In the transition period, it is important that when deal with older VHD versions, the agentbaker runtime provision script needs to be compatible with the latest known storage account package, 0.0.52.
    Write-Log "Requested CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $search = @()
        if ($global:CacheDir -and (Test-Path $global:CacheDir)) {
            $search = [IO.Directory]::GetFiles($global:CacheDir, $WindowsCSEScriptsPackage, [IO.SearchOption]::AllDirectories)
            # list files in the cache directory. 
            Write-Log "the directory $global:CacheDir contains the following files:"
            Get-ChildItem -Path $global:CacheDir | ForEach-Object { Write-Log "  $_" }
        }
 
        if ($search.Count -eq 0) {
            Write-Log "Could not find windows cse package on VHD. Use remote version instead."
            $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.52.zip"
        }
        Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
    }
    Write-Log "CSEScriptsPackageUrl used for provision is $global:CSEScriptsPackageUrl"

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive

    Initialize-DataDisks

    Initialize-DataDirectories

    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    # NOTE: this function MUST be called before Write-KubeClusterConfig since it has the potential
    # to mutate both kubelet config args and kubelet node labels.
    Configure-KubeletServingCertificateRotation

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Install-CredentialProvider -KubeDir $global:KubeDir -CustomCloudContainerRegistryDNSSuffix ""

    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion

    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud.
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled


    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"

    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage."

    # $CSEResultFilePath is used to avoid running CSE multiple times
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        Set-Content -Path $CSEResultFilePath -Value "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
    else {
        Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    }

    if ($global:ExitCode -eq $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE) {
        Write-Log "Do not call Upload-GuestVMLogs because there is no cse script package downloaded"
    }
    else {
        Upload-GuestVMLogs -ExitCode $global:ExitCode
    }
}
