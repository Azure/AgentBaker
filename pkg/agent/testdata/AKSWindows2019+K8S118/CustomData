<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.18.2-hotfix.20200624/windowszip/v1.18.2-hotfix.20200624-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.18.2"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.6"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "kubernetes.azure.com/role=agent,agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,storageprofile=managed,storagetier=Premium_LRS,kubernetes.azure.com/storageprofile=managed,kubernetes.azure.com/storagetier=Premium_LRS,kubernetes.azure.com/cluster=resourceGroupName,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--image-pull-progress-deadline=20m", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--non-masquerade-cidr=0.0.0.0/0", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

$global:ProvisioningScriptsPackageUrl = "https://acs-mirror.azureedge.net/aks-engine/windows/provisioning/signedscripts-v0.0.4.zip";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Base64 representation of ZIP archive
$zippedFiles = "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"

# Extract ZIP from script
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source scripts with functions that are called in this script
. c:\AzureData\windows\kuberneteswindowsfunctions.ps1
. c:\AzureData\windows\windowsconfigfunc.ps1
. c:\AzureData\windows\windowskubeletfunc.ps1
. c:\AzureData\windows\windowscnifunc.ps1
. c:\AzureData\windows\windowsazurecnifunc.ps1
. c:\AzureData\windows\windowscsiproxyfunc.ps1
. c:\AzureData\windows\windowsinstallopensshfunc.ps1
. c:\AzureData\windows\windowscontainerdfunc.ps1
. c:\AzureData\windows\windowshostsconfigagentfunc.ps1
. c:\AzureData\windows\windowscalicofunc.ps1
. c:\AzureData\windows\windowscsehelper.ps1

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")
$windowsSecureTlsEnabled = [System.Convert]::ToBoolean("false");

try
{
        # Exit early if the script has been executed
        if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
            Write-Log "The script has been executed before, will exit without doing anything."
            return
        }

        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

        # Install OpenSSH if SSH enabled
        $sshEnabled = [System.Convert]::ToBoolean("true")

        if ( $sshEnabled ) {
            Write-Log "Install OpenSSH"
            Install-OpenSSH -SSHKeys $SSHKeys
        }

        Write-Log "Apply telemetry data setting"
        Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

        Write-Log "Resize os drive if possible"
        Resize-OSDrive

        Write-Log "Initialize data disks"
        Initialize-DataDisks

        Write-Log "Create required data directories as needed"
        Initialize-DataDirectories

        Create-Directory -FullPath "c:\k"
        Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
        icacls.exe "c:\k" /inheritance:r
        icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
        icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
        icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
        Write-Log "c:\k permissions: "
        icacls.exe "c:\k"
        Get-ProvisioningScripts

        Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

        Write-Log "Download kubelet binaries and unzip"
        Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

        # This overwrites the binaries that are downloaded from the custom packge with binaries.
        # The custom package has a few files that are necessary for future steps (nssm.exe)
        # this is a temporary work around to get the binaries until we depreciate
        # custom package and nssm.exe as defined in aks-engine#3851.
        if ($global:WindowsKubeBinariesURL){
            Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
            Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        }

        if ($useContainerD) {
            Write-Log "Installing ContainerD"
            $cniBinPath = $global:AzureCNIBinDir
            $cniConfigPath = $global:AzureCNIConfDir
            if ($global:NetworkPlugin -eq "kubenet") {
                $cniBinPath = $global:CNIPath
                $cniConfigPath = $global:CNIConfigPath
            }
            Install-Containerd -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir
        } else {
            Write-Log "Install docker"
            Install-Docker -DockerVersion $global:DockerVersion
            Set-DockerLogFileOptions
        }

        # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
        Write-Log "Write Azure cloud provider config"
        Write-AzureConfig `
            -KubeDir $global:KubeDir `
            -AADClientId $AADClientId `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -Location $Location `
            -VmType $global:VmType `
            -SubnetName $global:SubnetName `
            -SecurityGroupName $global:SecurityGroupName `
            -VNetName $global:VNetName `
            -RouteTableName $global:RouteTableName `
            -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
            -PrimaryScaleSetName $global:PrimaryScaleSetName `
            -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
            -UserAssignedClientID $UserAssignedClientID `
            -UseInstanceMetadata $global:UseInstanceMetadata `
            -LoadBalancerSku $global:LoadBalancerSku `
            -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
            -TargetEnvironment $TargetEnvironment 

        # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
        # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
        

        Write-Log "Write ca root"
        Write-CACert -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir

        if ($global:EnableCsiProxy) {
            New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Write TLS bootstrap kubeconfig"
            Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
                -KubeDir $global:KubeDir `
                -MasterFQDNPrefix $MasterFQDNPrefix `
                -MasterIP $MasterIP `
                -TLSBootstrapToken $global:TLSBootstrapToken

            # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
            #       This kubeconfig will deleted after calico installation.
            # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
            Write-Log "Write temporary kube config"
        } else {
            Write-Log "Write kube config"
        }

        Write-KubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -AgentKey $AgentKey `
            -AgentCertificate $global:AgentCertificate

        if ($global:EnableHostsConfigAgent) {
             Write-Log "Starting hosts config agent"
             New-HostsConfigService
         }

        Write-Log "Create the Pause Container kubletwin/pause"
        New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime

        if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
            Write-Log "Could not find container with name kubletwin/pause"
            if ($useContainerD) {
                $o = ctr -n k8s.io image list
                Write-Log $o
            } else {
                $o = docker image list
                Write-Log $o
            }
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
        }

        Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

        # Configure network policy.
        Get-HnsPsm1 -HNSModule $global:HNSModule
        Import-Module $global:HNSModule

        Write-Log "Installing Azure VNet plugins"
        Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
            -AzureCNIBinDir $global:AzureCNIBinDir `
            -VNetCNIPluginsURL $global:VNetCNIPluginsURL

        Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
            -KubeDnsSearchPath $global:KubeDnsSearchPath `
            -KubeClusterCIDR $global:KubeClusterCIDR `
            -KubeServiceCIDR $global:KubeServiceCIDR `
            -VNetCIDR $global:VNetCIDR `
            -IsDualStackEnabled $global:IsDualStackEnabled

        if ($TargetEnvironment -ieq "AzureStackCloud") {
            GenerateAzureStackCNIConfig `
                -TenantId $global:TenantId `
                -SubscriptionId $global:SubscriptionId `
                -ResourceGroup $global:ResourceGroup `
                -AADClientId $AADClientId `
                -KubeDir $global:KubeDir `
                -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
                -NetworkAPIVersion $NetworkAPIVersion `
                -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
                -IdentitySystem "azure_ad"
        }

        New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

        Install-KubernetesServices `
            -KubeDir $global:KubeDir `
            -ContainerRuntime $global:ContainerRuntime

        Get-LogCollectionScripts

        Write-Log "Disable Internet Explorer compat mode and set homepage"
        Set-Explorer

        Write-Log "Adjust pagefile size"
        Adjust-PageFileSize

        Write-Log "Start preProvisioning script"
        

        Write-Log "Update service failure actions"
        Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
        Adjust-DynamicPortRange
        Register-LogsCleanupScriptTask
        Register-NodeResetScriptTask
        Update-DefenderPreferences

        if ($windowsSecureTlsEnabled) {
            Write-Host "Enable secure TLS protocols"
            try {
                . C:\k\windowssecuretls.ps1
                Enable-SecureTls
            }
            catch {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
            }
        }

        Enable-FIPSMode -FipsEnabled $fipsEnabled
        if ($global:WindowsGmsaPackageUrl) {
            Write-Log "Start to install Windows gmsa package"
            Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
        }

        Check-APIServerConnectivity -MasterIP $MasterIP

        if ($global:WindowsCalicoPackageURL) {
            Write-Log "Start calico installation"
            Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        }

        if (Test-Path $CacheDir)
        {
            Write-Log "Removing aks-engine bits cache directory"
            Remove-Item $CacheDir -Recurse -Force
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Removing temporary kube config"
            $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
            Remove-Item $kubeConfigFile
        }

        # Postpone restart-computer so we can generate CSE response before restarting computer
        Write-Log "Setup Complete, reboot computer"
        Postpone-RestartComputer
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8
}

