<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [string]
    $UserAssignedClientID
)

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.18.2-hotfix.20200624/windowszip/v1.18.2-hotfix.20200624-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.18.2"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "19.03.11"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

# To support newer Windows OS version, we need to support set ContainerRuntime,
# ContainerdWindowsRuntimeHandlers and DefaultContainerdWindowsSandboxIsolation per agent pool but
# current code does not support this. Below is a workaround to set contianer
# runtime variables per Windows OS version.
#
# Set default values for container runtime variables for AKS Windows 2004
if ($([System.Environment]::OSVersion.Version).Build -eq "19041") {
    $global:ContainerRuntime = "containerd"
    $global:ContainerdWindowsRuntimeHandlers = "17763,19041"
    $global:DefaultContainerdWindowsSandboxIsolation = "process"
}

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "kubernetes.azure.com/role=agent,agentpool=wpool2,storageprofile=managed,storagetier=Premium_LRS,kubernetes.azure.com/cluster=resourceGroupName,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--image-pull-progress-deadline=20m", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--non-masquerade-cidr=0.0.0.0/0", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false

# Telemetry settings
$global:EnableTelemetry = [System.Convert]::ToBoolean("false");
$global:TelemetryKey = "";

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

$global:ProvisioningScriptsPackageUrl = "https://acs-mirror.azureedge.net/aks-engine/windows/provisioning/signedscripts-v0.0.4.zip";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# Base64 representation of ZIP archive
$zippedFiles = ""

# Extract ZIP from script
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source scripts with functions that are called in this script
. c:\AzureData\windows\kuberneteswindowsfunctions.ps1
. c:\AzureData\windows\windowsconfigfunc.ps1
. c:\AzureData\windows\windowskubeletfunc.ps1
. c:\AzureData\windows\windowscnifunc.ps1
. c:\AzureData\windows\windowsazurecnifunc.ps1
. c:\AzureData\windows\windowscsiproxyfunc.ps1
. c:\AzureData\windows\windowsinstallopensshfunc.ps1
. c:\AzureData\windows\windowscontainerdfunc.ps1
. c:\AzureData\windows\windowshostsconfigagentfunc.ps1
. c:\AzureData\windows\windowscalicofunc.ps1

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"

try
{
    # Set to false for debugging.  This will output the start script to
    # c:\AzureData\CustomDataSetupScript.log, and then you can RDP
    # to the windows machine, and run the script manually to watch
    # the output.
    if ($true) {
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

        if ($global:EnableTelemetry) {
            $global:globalTimer = [System.Diagnostics.Stopwatch]::StartNew()

            $configAppInsightsClientTimer = [System.Diagnostics.Stopwatch]::StartNew()
            # Get app insights binaries and set up app insights client
            mkdir c:\k\appinsights
            DownloadFileOverHttp -Url "https://globalcdn.nuget.org/packages/microsoft.applicationinsights.2.11.0.nupkg" -DestinationPath "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip"
            Expand-Archive -Path "c:\k\appinsights\microsoft.applicationinsights.2.11.0.zip" -DestinationPath "c:\k\appinsights"
            $appInsightsDll = "c:\k\appinsights\lib\net46\Microsoft.ApplicationInsights.dll"
            [Reflection.Assembly]::LoadFile($appInsightsDll)
            $conf = New-Object "Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration"
            $conf.DisableTelemetry = -not $global:EnableTelemetry
            $conf.InstrumentationKey = $global:TelemetryKey
            $global:AppInsightsClient = New-Object "Microsoft.ApplicationInsights.TelemetryClient"($conf)

            $global:AppInsightsClient.Context.Properties["correlation_id"] = New-Guid
            $global:AppInsightsClient.Context.Properties["cri"] = $global:ContainerRuntime
            # TODO: Update once containerd versioning story is decided
            $global:AppInsightsClient.Context.Properties["cri_version"] = if ($global:ContainerRuntime -eq "docker") { $global:DockerVersion } else { "" }
            $global:AppInsightsClient.Context.Properties["k8s_version"] = $global:KubeBinariesVersion
            $global:AppInsightsClient.Context.Properties["lb_sku"] = $global:LoadBalancerSku
            $global:AppInsightsClient.Context.Properties["location"] = $Location
            $global:AppInsightsClient.Context.Properties["os_type"] = "windows"
            $global:AppInsightsClient.Context.Properties["os_version"] = Get-WindowsVersion
            $global:AppInsightsClient.Context.Properties["network_plugin"] = $global:NetworkPlugin
            $global:AppInsightsClient.Context.Properties["network_plugin_version"] = Get-CniVersion
            $global:AppInsightsClient.Context.Properties["network_mode"] = $global:NetworkMode
            $global:AppInsightsClient.Context.Properties["subscription_id"] = $global:SubscriptionId

            $vhdId = ""
            if (Test-Path "c:\vhd-id.txt") {
                $vhdId = Get-Content "c:\vhd-id.txt"
            }
            $global:AppInsightsClient.Context.Properties["vhd_id"] = $vhdId

            $imdsProperties = Get-InstanceMetadataServiceTelemetry
            foreach ($key in $imdsProperties.keys) {
                $global:AppInsightsClient.Context.Properties[$key] = $imdsProperties[$key]
            }

            $configAppInsightsClientTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Config-AppInsightsClient", $configAppInsightsClientTimer.Elapsed.TotalSeconds)
        }

        # Install OpenSSH if SSH enabled
        $sshEnabled = [System.Convert]::ToBoolean("true")

        if ( $sshEnabled ) {
            Write-Log "Install OpenSSH"
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-OpenSSH -SSHKeys $SSHKeys
            if ($global:EnableTelemetry) {
                $installOpenSSHTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-OpenSSH", $installOpenSSHTimer.Elapsed.TotalSeconds)
            }
        }

        Write-Log "Apply telemetry data setting"
        Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

        Write-Log "Resize os drive if possible"
        if ($global:EnableTelemetry) {
            $resizeTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        Resize-OSDrive
        if ($global:EnableTelemetry) {
            $resizeTimer.Stop()
            $global:AppInsightsClient.TrackMetric("Resize-OSDrive", $resizeTimer.Elapsed.TotalSeconds)
        }

        Write-Log "Initialize data disks"
        Initialize-DataDisks

        Write-Log "Create required data directories as needed"
        Initialize-DataDirectories

        New-Item -ItemType Directory -Path "c:\k" -Force | Out-Null
        Get-ProvisioningScripts

        Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

        if ($useContainerD) {
            Write-Log "Installing ContainerD"
            if ($global:EnableTelemetry) {
                $containerdTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            $cniBinPath = $global:AzureCNIBinDir
            $cniConfigPath = $global:AzureCNIConfDir
            if ($global:NetworkPlugin -eq "kubenet") {
                $cniBinPath = $global:CNIPath
                $cniConfigPath = $global:CNIConfigPath
            }
            Install-Containerd -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath
            if ($global:EnableTelemetry) {
                $containerdTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-ContainerD", $containerdTimer.Elapsed.TotalSeconds)
            }
            # TODO: disable/uninstall Docker later
        } else {
            Write-Log "Install docker"
            if ($global:EnableTelemetry) {
                $dockerTimer = [System.Diagnostics.Stopwatch]::StartNew()
            }
            Install-Docker -DockerVersion $global:DockerVersion
            Set-DockerLogFileOptions
            if ($global:EnableTelemetry) {
                $dockerTimer.Stop()
                $global:AppInsightsClient.TrackMetric("Install-Docker", $dockerTimer.Elapsed.TotalSeconds)
            }
        }

        Write-Log "Download kubelet binaries and unzip"
        Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

        # this overwrite the binaries that are download from the custom packge with binaries
        # The custom package has a few files that are nessary for future steps (nssm.exe)
        # this is a temporary work around to get the binaries until we depreciate
        # custom package and nssm.exe as defined in #3851.
        if ($global:WindowsKubeBinariesURL){
            Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
            Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        }

        # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
        Write-Log "Write Azure cloud provider config"
        Write-AzureConfig `
            -KubeDir $global:KubeDir `
            -AADClientId $AADClientId `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -Location $Location `
            -VmType $global:VmType `
            -SubnetName $global:SubnetName `
            -SecurityGroupName $global:SecurityGroupName `
            -VNetName $global:VNetName `
            -RouteTableName $global:RouteTableName `
            -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
            -PrimaryScaleSetName $global:PrimaryScaleSetName `
            -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
            -UserAssignedClientID $UserAssignedClientID `
            -UseInstanceMetadata $global:UseInstanceMetadata `
            -LoadBalancerSku $global:LoadBalancerSku `
            -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
            -TargetEnvironment $TargetEnvironment 

        # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
        # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
        

        Write-Log "Write ca root"
        Write-CACert -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir

        if ($global:EnableCsiProxy) {
            New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        }

        Write-Log "Write kube config"
        Write-KubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -AgentKey $AgentKey `
            -AgentCertificate $global:AgentCertificate

        if ($global:EnableHostsConfigAgent) {
             Write-Log "Starting hosts config agent"
             New-HostsConfigService
         }

        Write-Log "Create the Pause Container kubletwin/pause"
        if ($global:EnableTelemetry) {
            $infraContainerTimer = [System.Diagnostics.Stopwatch]::StartNew()
        }
        New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime
        if ($global:EnableTelemetry) {
            $infraContainerTimer.Stop()
            $global:AppInsightsClient.TrackMetric("New-InfraContainer", $infraContainerTimer.Elapsed.TotalSeconds)
        }

        if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
            Write-Log "Could not find container with name kubletwin/pause"
            if ($useContainerD) {
                $o = ctr -n k8s.io image list
                Write-Log $o
            } else {
                $o = docker image list
                Write-Log $o
            }
            throw "kubletwin/pause container does not exist!"
        }

        Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

        # Configure network policy.
        Get-HnsPsm1 -HNSModule $global:HNSModule
        Import-Module $global:HNSModule

        if ($global:NetworkPlugin -eq "azure") {
            Write-Log "Installing Azure VNet plugins"
            Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
                -AzureCNIBinDir $global:AzureCNIBinDir `
                -VNetCNIPluginsURL $global:VNetCNIPluginsURL

            Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
                -KubeDnsSearchPath $global:KubeDnsSearchPath `
                -KubeClusterCIDR $global:KubeClusterCIDR `
                -KubeServiceCIDR $global:KubeServiceCIDR `
                -VNetCIDR $global:VNetCIDR `
                -IsDualStackEnabled $global:IsDualStackEnabled

            if ($TargetEnvironment -ieq "AzureStackCloud") {
                GenerateAzureStackCNIConfig `
                    -TenantId $global:TenantId `
                    -SubscriptionId $global:SubscriptionId `
                    -ResourceGroup $global:ResourceGroup `
                    -AADClientId $AADClientId `
                    -KubeDir $global:KubeDir `
                    -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
                    -NetworkAPIVersion $NetworkAPIVersion `
                    -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
                    -IdentitySystem "azure_ad"
            }
        }
        elseif ($global:NetworkPlugin -eq "kubenet") {
            Write-Log "Fetching additional files needed for kubenet"
            if ($useContainerD) {
                # TODO: CNI may need to move to c:\program files\containerd\cni\bin with ContainerD
                Install-SdnBridge -Url $global:ContainerdSdnPluginUrl -CNIPath $global:CNIPath
            } else {
                Update-WinCNI -CNIPath $global:CNIPath
            }
        }

        New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

        Install-KubernetesServices `
            -KubeDir $global:KubeDir

        Get-LogCollectionScripts

        Write-Log "Disable Internet Explorer compat mode and set homepage"
        Set-Explorer

        Write-Log "Adjust pagefile size"
        Adjust-PageFileSize

        Write-Log "Start preProvisioning script"
        

        Write-Log "Update service failure actions"
        Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime

        Adjust-DynamicPortRange
        Register-LogsCleanupScriptTask
        Register-NodeResetScriptTask
        Register-NodeLabelSyncScriptTask
        Update-DefenderPreferences

        if ($global:WindowsCalicoPackageURL) {
            Write-Log "Start calico installation"
            Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        }

        if (Test-Path $CacheDir)
        {
            Write-Log "Removing aks-engine bits cache directory"
            Remove-Item $CacheDir -Recurse -Force
        }

        if ($global:EnableTelemetry) {
            $global:globalTimer.Stop()
            $global:AppInsightsClient.TrackMetric("TotalDuration", $global:globalTimer.Elapsed.TotalSeconds)
            $global:AppInsightsClient.Flush()
        }

        Write-Log "Setup Complete, reboot computer"
        Restart-Computer
    }
    else
    {
        # keep for debugging purposes
        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AgentKey $AgentKey -AADClientId $AADClientId -AADClientSecret $AADClientSecret -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"
    }
}
catch
{
    if ($global:EnableTelemetry) {
        $exceptionTelemtry = New-Object "Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry"
        $exceptionTelemtry.Exception = $_.Exception
        $global:AppInsightsClient.TrackException($exceptionTelemtry)
        $global:AppInsightsClient.Flush()
    }

    Write-Error $_
    throw $_
}

