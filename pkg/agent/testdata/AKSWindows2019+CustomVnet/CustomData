<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    # C:\AzureData\provision.complete
    # MUST keep generating this file when CSE is done and do not change the name
    #  - It is used to avoid running CSE multiple times
    #  - Some customers use this file to check if CSE is done
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath
)

# In an ideal world, all these values would be passed to this script in parameters. However, we don't live in an ideal world.
# https://learn.microsoft.com/en-gb/troubleshoot/windows-client/shell-experience/command-line-string-limitation

$MasterIP = "uttestdom-dns-5d7c849e.hcp.southcentralus.azmk8s.io"
$KubeDnsServiceIp="10.0.0.10"
$MasterFQDNPrefix="uttestdom"
$Location="southcentralus"

$TargetEnvironment="AzurePublicCloud"
$AADClientId="ClientID"
$NetworkAPIVersion="2018-08-01"

# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = ""
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "subnet2"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-07752737"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "172.17.0.0/24"
$global:KubeServiceCIDR = "172.17.255.0/24"
$global:VNetCIDR = "172.17.0.0/16"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=172.17.255.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false
$global:CiliumDataplaneEnabled = $false

# Kubelet credential provider
$global:CredentialProviderURL = ""

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

$global:IsSkipCleanupNetwork = [System.Convert]::ToBoolean("false");

$global:EnableKubeletServingCertificateRotation = [System.Convert]::ToBoolean("false")

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid
$global:PACKAGE_DOWNLOAD_BASE_URL= ResolvePackagesSourceUrl

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment -CSEResultFilePath $CSEResultFilePath"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    ReplaceBaseUrl $CSEScriptsPackageUrl $PACKAGE_DOWNLOAD_BASE_URL
    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.51.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    # NOTE: this function MUST be called before Write-KubeClusterConfig since it has the potential
    # to mutate both kubelet config args and kubelet node labels.
    Configure-KubeletServingCertificateRotation
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Install-CredentialProvider -KubeDir $global:KubeDir -CustomCloudContainerRegistryDNSSuffix "" 

    ReplaceBaseUrl $global:KubeBinariesPackageSASURL $PACKAGE_DOWNLOAD_BASE_URL
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    ReplaceBaseUrl $global:ContainerdUrl $PACKAGE_DOWNLOAD_BASE_URL
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    ReplaceBaseUrl $global:VNetCNIPluginsURL $PACKAGE_DOWNLOAD_BASE_URL
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
        
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        ReplaceBaseUrl $global:WindowsGmsaPackageUrl $PACKAGE_DOWNLOAD_BASE_URL
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        ReplaceBaseUrl $global:WindowsCalicoPackageURL $PACKAGE_DOWNLOAD_BASE_URL
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"

    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 

    # $CSEResultFilePath is used to avoid running CSE multiple times
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        Set-Content -Path $CSEResultFilePath -Value "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
    else {
        Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    }

    if ($global:ExitCode -eq $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE) {
        Write-Log "Do not call Upload-GuestVMLogs because there is no cse script package downloaded"
    }
    else {
        Upload-GuestVMLogs -ExitCode $global:ExitCode
    }
}
