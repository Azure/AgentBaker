<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""
Start-Transcript -Path $LogFile
# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("true")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.37.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion

    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"
    Stop-Transcript

    # Remove the parameters in the log file to avoid leaking secrets
    $logs=Get-Content $LogFile | Where-Object {$_ -notmatch "^Host Application: "}
    $logs | Set-Content $LogFile

    Upload-GuestVMLogs -ExitCode $global:ExitCode
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        throw "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
}
