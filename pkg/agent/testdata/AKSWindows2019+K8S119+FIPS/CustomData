<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    # C:\AzureData\provision.complete
    # MUST keep generating this file when CSE is done and do not change the name
    #  - It is used to avoid running CSE multiple times
    #  - Some customers use this file to check if CSE is done
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = ""
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror-euadb5gkdbg5c7f6.z01.azurefd.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# Kubelet credential provider
$global:CredentialProviderURL = ""

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("true")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

$global:IsSkipCleanupNetwork = [System.Convert]::ToBoolean("false");

$global:EnableKubeletServingCertificateRotation = [System.Convert]::ToBoolean("false")

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment -CSEResultFilePath $CSEResultFilePath"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.50.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror-euadb5gkdbg5c7f6.z01.azurefd.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror-euadb5gkdbg5c7f6.z01.azurefd.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    # NOTE: this function MUST be called before Write-KubeClusterConfig since it has the potential
    # to mutate both kubelet config args and kubelet node labels.
    Configure-KubeletServingCertificateRotation
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Install-CredentialProvider -KubeDir $global:KubeDir -CustomCloudContainerRegistryDNSSuffix "" 

    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"

    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 

    # $CSEResultFilePath is used to avoid running CSE multiple times
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        Set-Content -Path $CSEResultFilePath -Value "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
    else {
        Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    }

    if ($global:ExitCode -eq $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE) {
        Write-Log "Do not call Upload-GuestVMLogs because there is no cse script package downloaded"
    }
    else {
        Upload-GuestVMLogs -ExitCode $global:ExitCode
    }
}
