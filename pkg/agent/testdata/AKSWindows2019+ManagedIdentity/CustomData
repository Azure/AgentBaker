<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "true"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "UEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAcAAAAd2luZG93cy93aW5kb3dzY3NlaGVscGVyLnBzMbRabVPburb+zq9YEzKnMLsOL4XuvdnjO8d1BPUhsTO2A+1tGR9hi0S3juUryVB2b//7HckvsUNw2T3n8AGCrWetpaVH60XKLoRLKkDEnOYSqIBCkAQkg4Tc0YzALRY0hkLSFO6KLJaUZWJnFxw99pZISXhrdDMEaAZySSq5AoosIRyExAuaLQ5iQQ4eaJawBzHa2dmFcYnGaQrkK5UQs4RoEdflILADtDNcpOwWp2fXjjv2roPIDlCEfN/zo7l76XrXrnkEu3DOOBQZ+ZqTWJIECOeMQ4yLxVLC7aO2KcYyXsJtyuIvSseX4pbwjEgiKpMEkUU+ysVRj8qxd+1OPGscnTsTFF074fvIR6H/0TzuATnulXeJIvQB2fPQejdB5pue0Vqy64UR+uAEoXnSM9R+j+zLyJo5UYD8K+RHtue6yA6dKyf8aJ72IGfWPECRM7Uu2rre9iAuUBgF83cuCqOZj86dD+avvaNd5FshikLvErnRuedHlj81f+uBuCi89vzLyHFD5J9bNgpalv3+AqA1tmYh8luoo8Me2NRyrQs0RW4YObM2qG/9bWvi2J52t2OjyLJtb+6GbXQfEWzPDS3HRf5YIxw3CK3JBI3Noz5CbKD8ues67oV51McMb4bcIHi/qaaPEjXk3PHRtTWZaKztuefOxdxX4D52OO6VNXHG0czyrSlSq+C4kfXfcx9VIsyjPrq4XjT27EvkR6EXvZs7k3HF0Gbu5lEfdxQ5bSuykR86545thSgwj/o40+zjTdRxH2XQdBZ+fArpIwxy1YaPAmQrX4STwDzuY8jFNLAi9GFmuePI8u33zhUyj/vIUQJKJTPvGvnBezSZRDPfuXIm6AKZx3000egAhZGPLpwg9D9GM+RPnSBwPNc87mPLU+SVNZkrb/QGEYVypjPPDyPbvkBXyA0D87g3knQh1uXVbDaZXzhuDe6NKV4YnXtzd9zd7eZxbzxpQCUT3fn0HfLNN33MWGNmvnflKP857kUU2L4zCwPzTR9FgtDyVQgZo8hHyqUlKgqt4NJ808eWNYsDFM0s+9K6QOabPro0iMv5O+S7KETBGtjHlLUq11kj+hjSIN67QTT1xnOV9/rI0dqTOsg2Wvro0YA0TxpIHylaXnPUcn34uMa9LGasA3INPOkjh1rT0J5F44+uNXXsSHPZt1yF6yNGSb8qMG7Gw5M+YszmKgasc7x50keKUk9oXXQhvZXH2gXvHNfyP9bVSh8jaj+gD/ZkPkYdP/QRQ+Hm4+3+6+NGjdumrz9qRPY8CL1pNLZCS03QPPkddsEnsuCqvqWiLjBZQlQtGQsSrxJVO8LDkmRgn322/iw4GWOJP9uFkGylPo5uaQYJIwIyJlXJK+QPzAh0TJhPwmjiXZinh/+CFQHyiShSOUrZ4uVG2N7so9Id2d5kokpLz22i2mlvpTy3Jiq02ZdqIuiDZYdReO1FziwwT/u4W5dzY3RuqYn73jxsF6mnfVRuishZZI3HPgqCThl5eqLaDtcL0RlcNvX/FeGCstbKxCyTmGYwuB80uqY0oyucPkFdU7mcYEmEtEsU4QmYMDganRyODgewC9c0TSFe4mxBgErVNeluhHFOYgn3lXK9Yg8ERJHnjEvIyEPTBsVrydXwxqxA4tuUrFXPcPwFL4iy4P5wdDg6fXtwSzPMKREHazFG9c6oWh8Dr5K3JyOJ+Wjx52BHNYekrTWvpGZ4RWCFH+GWVDNKFPHuCllw0ti06Y62TUejw9HJMzaV77bbBLr37NIWcJaodpRl6SPcMQ5Krf6QsYednarFvaOpalY5WbF7hS7K1eA4loQL2Pt8uA8PSxovAXPVJOZqLnpamRCrEflKgBUyL2S5RClbqFnLJWfFYgk5eyBcLEma7lSKfK3ILdJUwDcYRmBwkqc4JvDq8+Gr1/DqFXzfqQeHdEWExKscvsFguHdBpDHGkoBxzvgKS2D7ZzCMBhpR9dhwzakkxoQt9oYrIgRekH34tgMAMFyJBZhQP4b/W8vX70ukV85GDd5pyx2zhyxlODmnKfHuCX8vZV4JnmGOV3v6o/r5pP8nkvC9Kc4SLBl/VHolL8j+zSchOc0WN83w4Zynr38aPCZC0gwrE2dYLl8siGayJQV9pdJmCdFP9nf0n104p1xIiJck/qL2pSAE6B1gxRkCD1Quy8MMxXpNfSoAp5zg5BFiHC9JAqw877h6Py5XQCFdNdSET443UhbfnJ1dEHlevdhT3qgMGAqCebwEE/6+t6+f0DvYC4mQhgJCvaFspWtMeb3OXazSM6YqmDD+uFYm9jbhr9fmvdaoQIvwcuXbm7MzK01rOZSI0qDvO41dlcaRzYpMgpEROGwb1NASBnNBs0XtoTrAsbuWdwywWf6oRmlX33G2gmGt4dPhzb5ajs2lHzS6FNhwJFlB5agGCEYL9ESC3lcxqWamfpNUkK5X44KTGWeSxSwVraXRr2m2bcCn4FFIshq5RI4C9Z7Kx3pE+JiTm7OzcsSY3OEila/hJQiRvql4on7uGCc4XsLeMK/GqRBVy0FZsSqX/gqnBRE/Nmm/vXZQL/HT+RkZk1WQFtDo3gRv9d0v5hrQGf195+mnrsH8nsZkxmgmpzjDC8KVQzamofb6hsq1u4YsTWacLTgRYsbJHeEki9WuHD59ugZtRbwKaEoymT6qjEazgrxqqUmqoKkCLVebsZrGmOJFxoSksRgFkuUPWMYqEgQSc+mShxapJH/c8OYQ84Vm1rc5p6YKGH/AlMglS8zBBZGDP8Ar9B43Nwn+vSPHJ5I/GjZbrVSmbD4MnOyefSGGT4QsxQ7AsJTKUrGhcJQIOC0/Po5Jih8DErMsEXB0uF696ky1a31ApFGHW1h/GraeqbJ1WiWpwTmmaZlwa2equKBmPQI9UqfALZTpOl+7ea+1YzShqxBo5bmTCbpYSmGnlFTxa6iKgU0qD8m9em+CSx4M7/Z/VJE2mNKYM8Hu5MjK85TG2uG1xJEqsBU5VE0hRkjhQ5KSlfLdYIvwUZUhBmoN67S7deCMs5xwSYn4NKgzyOBG0bgOpdtQU7V+sfg0GBdcWzoVJajrMJTiXJBkStOUinJ1u9Kec94o5Dj+oue5V6rcby3PD7bT9p25LY3UniFJmSUUJZ7PC987xUybhDsvLmLM/uKhv/Ywny1h2nzXT0t3taYaEAnN/lBTbP5RG5Z8pXK9F9rSyqnXC1WDzG6507xuAc2nRukrmDWy7c0ZEzJnWRkyMJc2W+WFJLzybGsiNidYqv2LM1AASVcEJBa6vuIluqyYppXtuFRR7rdAlQxFSpIQiy9W+cZAX0lcSAKDdbGtyvIyaBUrtVsH6+j2z0FlpFFbWWX9fw4qjTmnWUxznG5TOmteGnNBuJNA8DEI0RTU/FimcidU+cmK47IU8otsQu5JCu/pYkmE1Gp2QXK6WBBeturaB6xm+rB+V1rwD3YbVg8MSwI0jcD+yEqSKvLuHZ3uq1BD1O4Fw2tk6Us4+pwXwaj8WHvaWE+x5QqjNqAxTVVS+hpPgWqnQlw7Fd+p3zln91TVd2rN2+vqkwUVkvBNY9RvHf4GFRuMWuIADCfLC1nF3Na0tpKMJC/iWJvGJc5oiuWfCAxP9vZ5kaY/7kvM4R1Oxfb+prZmLqomeUEywnEKecFzJqo9XoYM/UslNsNlstMq1HbsP1OTl3OHpNa2RuiOecOMdTJSfCorbfVb078ZChu64b/KlFrG483auh3ZX2ZF2eaLVnzfhaWUuTg7OBASx1/YPeF3KXsYxWx1gA/enJye/n56enLw9vdfj47frhdeTSIkq5xxzB/XyquuOce8zPh18dZp3BRO/VdVbPUCwjCr2rwKdFHQ5ObszCUP6lM1+gXe2/sHo1nlyMoSLXq/Q91uKfdi3rb64Suc0gRL4jLpFmnqcbTK5ePeNkpWal7caj8veonFUp9QtaSrSvPfILqboquS9T8it1P/VptR/1GU3RtSMOHwD/gD2jvvaVG/C2Omz65StgBdbQuqKiL9cYUfm1NHQTJBJb0nkGCJOzJaW0gbBkMKZzCMy/XqVpC8PCf+W7Oc8HelqhmzrqO3FfFD+ssvnQdlewjGgjTO3tYEyiVnDzCMOi+6XYlugYwgJSR/zr9rULeqqxqXsiBQtHr5TuipzhppP4rhHQmfbrqcnlAhXyjgh9UlzWRXfJqyB5LUI8tTh8P9LuLpblDE7B3T7exMOHqW3Wrp0/XS/6EJ8kyqUWPBLzJdE7Tc27gJRqPRmqx/2zqmea2JN7GCEH1wQtsbI30kQbOnXtnkY9ukloZyY5AEikwUcUyEuCvS9LE872u+hwQdnYNnGWzU3uuhsvqJq8ODLftvI0/CC0xvG75t2z/ZRfrPX+3M0dclLoSqtHhFKJ2kt6xWt86yhCBcGqphRTqDv3yb9p0EK3kqM744yP/4CHh7KVXp6ZRSf9V3jZSNS4ttzaqq9qu7nvouqipNbguaJm6xutWtgm4LVCFRHQs8wuD95WR69jnwzsNry0efm3OKz/XdkRt+tguuyopK9GB/VD14p4RrPeKBSn222NLXnvzg6Ndf374ZwLc6qwyOfjv8fdDi8OD48M3Jb+0RqRTx8eHxcXtUdf75wgOjnpvRbd/QeOZcSTK4o1miG4Lqagn0NCHT8zzreHnznGkz/wiJ09RY320Z77AgieFlxvpm0GgvYovzf4Hvw7WG5vLkL8Fd5x3NxpT/FNRm2d1PYZUPfhrYuVbdqbboLjjlDUuOhXy9vhFpu0dfy4CKhTD3J/prqdXJ0bYb1Oouc6SFo694lafkDAZ1X4FjYayoItII/1lwQpIFGWVEtm4q6++wHuhb1OduMw97bjO17pA1l72rIpU0T8mWm17xGh5IecUpSNnWkizJGc0kqCS4zSH/jrmVNl63VG+5D75V5AfW/jJt90J7+3oRlS91uh0cDECw1r33mVYLcDSCKkrBLVnie8p4eUNXuqBe7Gr08UgFEX3utMVKmoFki0VK1pfEVWsNjMOSyTv6dacqNLp+RFkirqlc7g0OBk02aDfV69H+RNGwi6/Om+LNm3DzB7f3TWra+1R58+bpDtkf2WylGsaQtYb9xLcV9nVR37rL6zH4mav9CtjyzOVTQjydgvLYQp9LcJBLnKnlIP9b4PKU9yemorik6JHq51t205a51V9+rxJztxr7mRmlRIhyOv/KFERZYP3MFLZkEBV3uw9+2SJnpwQ/zXJgdMEbsowm3bQyj35aZZJ2VgGjyhJNutj5vvP/AQAA//9QSwcIoVcpDW0PAACPMAAAUEsDBBQACAAIAAAAAAAAAAAAAAAAAAAAAAAUAAAAd2luZG93cy9zZW5kbG9ncy5wczGsU09P204Qve+nmN+SQyL97NhBRIXWLTSlYJU/EYZKLeWwjSf2ivWutTt2WyG+e7U2IVBA6qF78sy8eTNvZvxmgwEAhNmXk9N5lmad5d9FrYzIHQhQpoDvjc4VAhmgEqE0jmBpLFgkK7EVClop4KBBR5+Pj0zhQtbTftjPZmfp/Dw9Pfm3zP6di2v0NLWwokJCC2YJAr6mc1hKhaBF1RE3XcH/4UcpFyVIBw41rSoeGkd7BWq6p/UFfWTcVl3gyBSAOq+N1BSyjbfsclblCum91LnUxXB0xboOhh3DpSMrdXHVGYO5oJKNGJNLGP43PEdHgXf1gdEIbjqYRWqsZreMDQ6MUBkJwj1bOEhgt0fwY6TS5DzhB0j8de+7sJInvCSqd8bjePoqnG6G8WQ7jKfjSixKqXH8bmGqOimMUM6TrjIPUeRoHU92b/jPoHJBi9ZJo3nCJ1E8CeI42Iz4Lbt90BAkMBimujXXGJyho74j2H3U8Si8Nxkb9Jt+Scm8+QslO5uTrcn0wSpWKan+KBXypJvkU1n323xG31YQbQdRfMe0Bi2URE3BwliLSpA0Wvo+X8L58+IJ3/uUzbL9uWoKqV+CrstHYRxGT2FGk5AarS+4Hnk4W/nXX2n+Z3JbCT8bZYogx1qZXxVq8kTDZ5nOjMJUOxJ6gUfS0SOHxy1l0dhO/p114v+jwNVKEvBvIR9dRv15+wN55iLWa/8dAAD//1BLBwiFX+NRIQIAAF4EAABQSwECFAAUAAgACAAAAAAAoVcpDW0PAACPMAAAHAAAAAAAAAAAAAAAAAAAAAAAd2luZG93cy93aW5kb3dzY3NlaGVscGVyLnBzMVBLAQIUABQACAAIAAAAAACFX+NRIQIAAF4EAAAUAAAAAAAAAAAAAAAAALcPAAB3aW5kb3dzL3NlbmRsb2dzLnBzMVBLBQYAAAAAAgACAIwAAAAaEgAAAAA="

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

if ($useContainerD) {
    $global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")
}

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.22.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }
    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
    }

    if ($useContainerD) {
        Write-Log "Installing ContainerD"
        $cniBinPath = $global:AzureCNIBinDir
        $cniConfigPath = $global:AzureCNIConfDir
        if ($global:NetworkPlugin -eq "kubenet") {
            $cniBinPath = $global:CNIPath
            $cniConfigPath = $global:CNIConfigPath
        }
        Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    } else {
        Write-Log "Install docker"
        Install-Docker -DockerVersion $global:DockerVersion
        Set-DockerLogFileOptions
    }

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
            Write-Log "Starting hosts config agent"
            New-HostsConfigService
        }

    Write-Log "Create the Pause Container kubletwin/pause"
    New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime

    if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
        Write-Log "Could not find container with name kubletwin/pause"
        if ($useContainerD) {
            $o = ctr -n k8s.io image list
            Write-Log $o
        } else {
            $o = docker image list
            Write-Log $o
        }
        Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir `
        -ContainerRuntime $global:ContainerRuntime

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
