<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""
Start-Transcript -Path $LogFile
# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("true");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.38.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment "AzureStackCloud" 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    
    $azureStackConfigFile = [io.path]::Combine($global:KubeDir, "azurestackcloud.json")
    $envJSON = "eyJuYW1lIjoiQXp1cmVTdGFja0Nsb3VkIiwiTmFtZSI6IkF6dXJlU3RhY2tDbG91ZCIsIm1jclVSTCI6Im1jci5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkIiwicmVwb0RlcG90RW5kcG9pbnQiOiJodHRwczovL3JlcG9kZXBvdC5henVyZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkL3VidW50dSIsIm1hbmFnZW1lbnRQb3J0YWxVUkwiOiJodHRwczovL3BvcnRhbC5henVyZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInNlcnZpY2VNYW5hZ2VtZW50RW5kcG9pbnQiOiJodHRwczovL21hbmFnZW1lbnQuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInJlc291cmNlTWFuYWdlckVuZHBvaW50IjoiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiYWN0aXZlRGlyZWN0b3J5RW5kcG9pbnQiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsImtleVZhdWx0RW5kcG9pbnQiOiJodHRwczovL3ZhdWx0LmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiZ3JhcGhFbmRwb2ludCI6Imh0dHBzOi8vZ3JhcGguY2xvdWRhcGkubWljcm9zb2Z0LmZha2VjdXN0b21jbG91ZC8iLCJzdG9yYWdlRW5kcG9pbnRTdWZmaXgiOiJjb3JlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJzcWxEYXRhYmFzZUROU1N1ZmZpeCI6ImRhdGFiYXNlLmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJrZXlWYXVsdEROU1N1ZmZpeCI6InZhdWx0LmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJyZXNvdXJjZU1hbmFnZXJWTUROU1N1ZmZpeCI6ImNsb3VkYXBwLmF6dXJlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiY29udGFpbmVyUmVnaXN0cnlETlNTdWZmaXgiOiIuYXp1cmVjci5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkIiwiY29zbW9zREJETlNTdWZmaXgiOiJkb2N1bWVudHMuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInRva2VuQXVkaWVuY2UiOiJodHRwczovL21hbmFnZW1lbnQuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInJlc291cmNlSWRlbnRpZmllcnMiOnt9fQ=="
    [io.file]::WriteAllBytes($azureStackConfigFile, [System.Convert]::FromBase64String($envJSON))

    Get-CACertificates
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"
    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 
    # Please not use Write-Log or Logs-To-Events after Stop-Transcript
    Stop-Transcript

    # Remove the parameters in the log file to avoid leaking secrets
    $logs=Get-Content $LogFile | Where-Object {$_ -notmatch "^Host Application: "}
    $logs | Set-Content $LogFile

    Upload-GuestVMLogs -ExitCode $global:ExitCode
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        throw "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
}
