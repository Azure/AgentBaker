<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    # C:\AzureData\provision.complete
    # MUST keep generating this file when CSE is done and do not change the name
    #  - It is used to avoid running CSE multiple times
    #  - Some customers use this file to check if CSE is done
    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.29.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-credential-provider-bin-dir=c:\var\lib\kubelet\credential-provider", "--image-credential-provider-config=c:\var\lib\kubelet\credential-provider-config.yaml", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# Kubelet credential provider
$global:CredentialProviderURL = "https://acs-mirror.azureedge.net/cloud-provider-azure/v1.29.0/binaries/azure-acr-credential-provider-windows-amd64-v1.29.0.tar.gz"

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("true");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

$global:IsSkipCleanupNetwork = [System.Convert]::ToBoolean("false");

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment -CSEResultFilePath $CSEResultFilePath"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.46.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Install-CredentialProvider -KubeDir $global:KubeDir -CustomCloudContainerRegistryDNSSuffix ".azurecr.microsoft.fakecustomcloud" 

    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment "AzureStackCloud" 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    
    $azureStackConfigFile = [io.path]::Combine($global:KubeDir, "azurestackcloud.json")
    $envJSON = "eyJuYW1lIjoiQXp1cmVTdGFja0Nsb3VkIiwiTmFtZSI6IkF6dXJlU3RhY2tDbG91ZCIsIm1jclVSTCI6Im1jci5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkIiwicmVwb0RlcG90RW5kcG9pbnQiOiJodHRwczovL3JlcG9kZXBvdC5henVyZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkL3VidW50dSIsIm1hbmFnZW1lbnRQb3J0YWxVUkwiOiJodHRwczovL3BvcnRhbC5henVyZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInNlcnZpY2VNYW5hZ2VtZW50RW5kcG9pbnQiOiJodHRwczovL21hbmFnZW1lbnQuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInJlc291cmNlTWFuYWdlckVuZHBvaW50IjoiaHR0cHM6Ly9tYW5hZ2VtZW50LmF6dXJlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiYWN0aXZlRGlyZWN0b3J5RW5kcG9pbnQiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsImtleVZhdWx0RW5kcG9pbnQiOiJodHRwczovL3ZhdWx0LmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiZ3JhcGhFbmRwb2ludCI6Imh0dHBzOi8vZ3JhcGguY2xvdWRhcGkubWljcm9zb2Z0LmZha2VjdXN0b21jbG91ZC8iLCJzdG9yYWdlRW5kcG9pbnRTdWZmaXgiOiJjb3JlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJzcWxEYXRhYmFzZUROU1N1ZmZpeCI6ImRhdGFiYXNlLmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJrZXlWYXVsdEROU1N1ZmZpeCI6InZhdWx0LmNsb3VkYXBpLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQiLCJyZXNvdXJjZU1hbmFnZXJWTUROU1N1ZmZpeCI6ImNsb3VkYXBwLmF6dXJlLm1pY3Jvc29mdC5mYWtlY3VzdG9tY2xvdWQvIiwiY29udGFpbmVyUmVnaXN0cnlETlNTdWZmaXgiOiIuYXp1cmVjci5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkIiwiY29zbW9zREJETlNTdWZmaXgiOiJkb2N1bWVudHMuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInRva2VuQXVkaWVuY2UiOiJodHRwczovL21hbmFnZW1lbnQuY29yZS5taWNyb3NvZnQuZmFrZWN1c3RvbWNsb3VkLyIsInJlc291cmNlSWRlbnRpZmllcnMiOnt9fQ=="
    [io.file]::WriteAllBytes($azureStackConfigFile, [System.Convert]::FromBase64String($envJSON))

    Get-CACertificates
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"

    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 

    # $CSEResultFilePath is used to avoid running CSE multiple times
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        Set-Content -Path $CSEResultFilePath -Value "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
    else {
        Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    }

    if ($global:ExitCode -eq $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE) {
        Write-Log "Do not call Upload-GuestVMLogs because there is no cse script package downloaded"
    }
    else {
        Upload-GuestVMLogs -ExitCode $global:ExitCode
    }
}
