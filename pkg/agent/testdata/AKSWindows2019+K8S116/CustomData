<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.16.15/windowszip/v1.16.15-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.16.15"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.36.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
    }

    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion

    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
