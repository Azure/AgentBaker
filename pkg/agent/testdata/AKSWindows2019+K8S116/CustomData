<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""
Start-Transcript -Path $LogFile
# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.16.15/windowszip/v1.16.15-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.16.15"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @(  )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\" -Force

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Logs-To-Event -TaskName "AKS.WindowsCSE.ExecuteCustomDataSetupScript" -TaskMessage ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.40.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -TaskMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows" -Force
    Remove-Item -Path $tempfile -Force
    
    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Resize-OSDrive
    
    Initialize-DataDisks
    
    Initialize-DataDirectories
    
    Logs-To-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -TaskMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    
    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    
    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    if ($global:TLSBootstrapToken) {
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        
        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    
    if ($global:EnableHostsConfigAgent) {
        New-HostsConfigService
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    
    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    
    Install-KubernetesServices `
        -KubeDir $global:KubeDir

    Set-Explorer
    Adjust-PageFileSize
    Logs-To-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -TaskMessage "Start preProvisioning script"
    
    Update-ServiceFailureActions
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences

    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -TaskMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    
    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    if ($global:RebootNeeded) {
        Logs-To-Event -TaskName "AKS.WindowsCSE.RestartComputer" -TaskMessage "Setup Complete, calling Postpone-RestartComputer with reboot"
        Postpone-RestartComputer
    } else {
        Logs-To-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -TaskMessage "Setup Complete, start NodeResetScriptTask to register Windows node without reboot"
        Start-ScheduledTask -TaskName "k8s-restart-job"

        $timeout = 180 ##  seconds
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
            # The task `k8s-restart-job` needs ~8 seconds.
            if ($timer.Elapsed.TotalSeconds -gt $timeout) {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
            }

            Write-Log -Message "Waiting on NodeResetScriptTask..."
            Start-Sleep -Seconds 3
        }
        $timer.Stop()
        Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration. ExitCode: $global:ExitCode"
    # $CSEResultFilePath is used to avoid running CSE multiple times
    Set-Content -Path $CSEResultFilePath -Value $global:ExitCode -Force
    Logs-To-Event -TaskName "AKS.WindowsCSE.cse_main" -TaskMessage "ExitCode: $global:ExitCode. ErrorMessage: $global:ErrorMessage." 
    # Please not use Write-Log or Logs-To-Events after Stop-Transcript
    Stop-Transcript

    # Remove the parameters in the log file to avoid leaking secrets
    $logs=Get-Content $LogFile | Where-Object {$_ -notmatch "^Host Application: "}
    $logs | Set-Content $LogFile

    Upload-GuestVMLogs -ExitCode $global:ExitCode
    if ($global:ExitCode -ne 0) {
        # $JsonString = "ExitCode: |{0}|, Output: |{1}|, Error: |{2}|"
        # Max length of the full error message returned by Windows CSE is ~256. We use 240 to be safe.
        $errorMessageLength = "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: ||".Length
        $turncatedErrorMessage = $global:ErrorMessage.Substring(0, [Math]::Min(240 - $errorMessageLength, $global:ErrorMessage.Length))
        throw "ExitCode: |$global:ExitCode|, Output: |$($global:ErrorCodeNames[$global:ExitCode])|, Error: |$turncatedErrorMessage|"
    }
}
