<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.6"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "kubernetes.azure.com/role=agent,agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,storageprofile=managed,storagetier=Premium_LRS,kubernetes.azure.com/storageprofile=managed,kubernetes.azure.com/storagetier=Premium_LRS,kubernetes.azure.com/cluster=resourceGroupName,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--image-pull-progress-deadline=20m", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--non-masquerade-cidr=0.0.0.0/0", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

$global:ProvisioningScriptsPackageUrl = "https://acs-mirror.azureedge.net/aks-engine/windows/provisioning/signedscripts-v0.0.4.zip";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Base64 representation of ZIP archive
$zippedFiles = ""

# Extract ZIP from script
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source scripts with functions that are called in this script
. c:\AzureData\windows\kuberneteswindowsfunctions.ps1
. c:\AzureData\windows\windowsconfigfunc.ps1
. c:\AzureData\windows\windowskubeletfunc.ps1
. c:\AzureData\windows\windowscnifunc.ps1
. c:\AzureData\windows\windowsazurecnifunc.ps1
. c:\AzureData\windows\windowscsiproxyfunc.ps1
. c:\AzureData\windows\windowsinstallopensshfunc.ps1
. c:\AzureData\windows\windowscontainerdfunc.ps1
. c:\AzureData\windows\windowshostsconfigagentfunc.ps1
. c:\AzureData\windows\windowscalicofunc.ps1
. c:\AzureData\windows\windowscsehelper.ps1

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")
$windowsSecureTlsEnabled = [System.Convert]::ToBoolean("false");

try
{
        # Exit early if the script has been executed
        if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
            Write-Log "The script has been executed before, will exit without doing anything."
            return
        }

        Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

        # Install OpenSSH if SSH enabled
        $sshEnabled = [System.Convert]::ToBoolean("true")

        if ( $sshEnabled ) {
            Write-Log "Install OpenSSH"
            Install-OpenSSH -SSHKeys $SSHKeys
        }

        Write-Log "Apply telemetry data setting"
        Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

        Write-Log "Resize os drive if possible"
        Resize-OSDrive

        Write-Log "Initialize data disks"
        Initialize-DataDisks

        Write-Log "Create required data directories as needed"
        Initialize-DataDirectories

        Create-Directory -FullPath "c:\k"
        Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
        icacls.exe "c:\k" /inheritance:r
        icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
        icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
        icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
        Write-Log "c:\k permissions: "
        icacls.exe "c:\k"
        Get-ProvisioningScripts

        Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

        Write-Log "Download kubelet binaries and unzip"
        Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

        # This overwrites the binaries that are downloaded from the custom packge with binaries.
        # The custom package has a few files that are necessary for future steps (nssm.exe)
        # this is a temporary work around to get the binaries until we depreciate
        # custom package and nssm.exe as defined in aks-engine#3851.
        if ($global:WindowsKubeBinariesURL){
            Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
            Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        }

        if ($useContainerD) {
            Write-Log "Installing ContainerD"
            $cniBinPath = $global:AzureCNIBinDir
            $cniConfigPath = $global:AzureCNIConfDir
            if ($global:NetworkPlugin -eq "kubenet") {
                $cniBinPath = $global:CNIPath
                $cniConfigPath = $global:CNIConfigPath
            }
            Install-Containerd -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir
        } else {
            Write-Log "Install docker"
            Install-Docker -DockerVersion $global:DockerVersion
            Set-DockerLogFileOptions
        }

        # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
        Write-Log "Write Azure cloud provider config"
        Write-AzureConfig `
            -KubeDir $global:KubeDir `
            -AADClientId $AADClientId `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -Location $Location `
            -VmType $global:VmType `
            -SubnetName $global:SubnetName `
            -SecurityGroupName $global:SecurityGroupName `
            -VNetName $global:VNetName `
            -RouteTableName $global:RouteTableName `
            -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
            -PrimaryScaleSetName $global:PrimaryScaleSetName `
            -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
            -UserAssignedClientID $UserAssignedClientID `
            -UseInstanceMetadata $global:UseInstanceMetadata `
            -LoadBalancerSku $global:LoadBalancerSku `
            -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
            -TargetEnvironment $TargetEnvironment 

        # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
        # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
        

        Write-Log "Write ca root"
        Write-CACert -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir

        if ($global:EnableCsiProxy) {
            New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Write TLS bootstrap kubeconfig"
            Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
                -KubeDir $global:KubeDir `
                -MasterFQDNPrefix $MasterFQDNPrefix `
                -MasterIP $MasterIP `
                -TLSBootstrapToken $global:TLSBootstrapToken

            # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
            #       This kubeconfig will deleted after calico installation.
            # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
            Write-Log "Write temporary kube config"
        } else {
            Write-Log "Write kube config"
        }

        Write-KubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -AgentKey $AgentKey `
            -AgentCertificate $global:AgentCertificate

        if ($global:EnableHostsConfigAgent) {
             Write-Log "Starting hosts config agent"
             New-HostsConfigService
         }

        Write-Log "Create the Pause Container kubletwin/pause"
        New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime

        if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
            Write-Log "Could not find container with name kubletwin/pause"
            if ($useContainerD) {
                $o = ctr -n k8s.io image list
                Write-Log $o
            } else {
                $o = docker image list
                Write-Log $o
            }
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
        }

        Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

        # Configure network policy.
        Get-HnsPsm1 -HNSModule $global:HNSModule
        Import-Module $global:HNSModule

        Write-Log "Installing Azure VNet plugins"
        Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
            -AzureCNIBinDir $global:AzureCNIBinDir `
            -VNetCNIPluginsURL $global:VNetCNIPluginsURL

        Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
            -KubeDnsSearchPath $global:KubeDnsSearchPath `
            -KubeClusterCIDR $global:KubeClusterCIDR `
            -KubeServiceCIDR $global:KubeServiceCIDR `
            -VNetCIDR $global:VNetCIDR `
            -IsDualStackEnabled $global:IsDualStackEnabled

        if ($TargetEnvironment -ieq "AzureStackCloud") {
            GenerateAzureStackCNIConfig `
                -TenantId $global:TenantId `
                -SubscriptionId $global:SubscriptionId `
                -ResourceGroup $global:ResourceGroup `
                -AADClientId $AADClientId `
                -KubeDir $global:KubeDir `
                -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
                -NetworkAPIVersion $NetworkAPIVersion `
                -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
                -IdentitySystem "azure_ad"
        }

        New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

        Install-KubernetesServices `
            -KubeDir $global:KubeDir `
            -ContainerRuntime $global:ContainerRuntime

        Get-LogCollectionScripts

        Write-Log "Disable Internet Explorer compat mode and set homepage"
        Set-Explorer

        Write-Log "Adjust pagefile size"
        Adjust-PageFileSize

        Write-Log "Start preProvisioning script"
        

        Write-Log "Update service failure actions"
        Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
        Adjust-DynamicPortRange
        Register-LogsCleanupScriptTask
        Register-NodeResetScriptTask
        Update-DefenderPreferences

        if ($windowsSecureTlsEnabled) {
            Write-Host "Enable secure TLS protocols"
            try {
                . C:\k\windowssecuretls.ps1
                Enable-SecureTls
            }
            catch {
                Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
            }
        }

        Enable-FIPSMode -FipsEnabled $fipsEnabled
        if ($global:WindowsGmsaPackageUrl) {
            Write-Log "Start to install Windows gmsa package"
            Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
        }

        Check-APIServerConnectivity -MasterIP $MasterIP

        if ($global:WindowsCalicoPackageURL) {
            Write-Log "Start calico installation"
            Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        }

        if (Test-Path $CacheDir)
        {
            Write-Log "Removing aks-engine bits cache directory"
            Remove-Item $CacheDir -Recurse -Force
        }

        if ($global:TLSBootstrapToken) {
            Write-Log "Removing temporary kube config"
            $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
            Remove-Item $kubeConfigFile
        }

        # Postpone restart-computer so we can generate CSE response before restarting computer
        Write-Log "Setup Complete, reboot computer"
        Postpone-RestartComputer
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8
}

