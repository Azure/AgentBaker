<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:ContainerRuntime = "docker"
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=kubletwin/pause", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"


# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrapping
$global:EnableSecureTLSBootstrapping = [System.Convert]::ToBoolean("false")
$global:SecureTLSBootstrapExecPluginURL = "https://kubernetesreleases.blob.core.windows.net/aks-tls-bootstrap-client/main/windows/amd64/tls-bootstrap-client.exe"
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$useContainerD = ($global:ContainerRuntime -eq "containerd")
$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

if ($useContainerD) {
    $global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")
}

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }
   
    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-secure-tls-bootstrap-v0.0.cameissner0.zip" # change to custom package for testing
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }
    # Download CSE function scripts
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
    }

    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID

    Write-Log "Resize os drive if possible"
    Resize-OSDrive

    Write-Log "Initialize data disks"
    Initialize-DataDisks

    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories

    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts

    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp

    Write-Log "Download kubelet binaries and unzip"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
    }

    if ($useContainerD) {
        Write-Log "Installing ContainerD"
        $cniBinPath = $global:AzureCNIBinDir
        $cniConfigPath = $global:AzureCNIConfDir
        if ($global:NetworkPlugin -eq "kubenet") {
            $cniBinPath = $global:CNIPath
            $cniConfigPath = $global:CNIConfigPath
        }
        Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    } else {
        Write-Log "Install docker"
        Install-Docker -DockerVersion $global:DockerVersion
        Set-DockerLogFileOptions
    }

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir

    if ($global:EnableCsiProxy) {
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
    }

    # Setup bootstrap-kubeconfig 
    if ($global:EnableSecureTLSBootstrapping) {
        Write-Log "Secure TLS bootstrapping enabled, checking existence of cached kubelet exec plugin..."
        # Check to see if the plugin has already been cached on the VHD,
        # if not then go download it from upstream before creating the bootstrap-kubeconfig
        $pluginPath = "c:\aks-cache\kubelet-plugins\tls-bootstrap-client.exe"
        if (!(Test-Path $pluginPath)) {
            Write-Log "Kubelet exec plugin is not cached, downloading..."
            Get-SecureTLSBootstrapExecPlugin -ExecPluginURL $global:SecureTLSBootstrapExecPluginURL
            $pluginPath = "c:\tls-bootstrap-client.exe"
        } else {
            Write-Log "Kubelet exec plugin is already cached"
        }

        Write-Log "Write secure TLS bootstrap kubeconfig"
        Write-SecureTLSBootstrapKubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -PluginPath $pluginPath

        Write-Log "Write temporary secure TLS bootstrap kubeconfig"
    } elseif ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig with pre-generated bootstrap token"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate

    if ($global:EnableHostsConfigAgent) {
            Write-Log "Starting hosts config agent"
            New-HostsConfigService
        }

    Write-Log "Create the Pause Container kubletwin/pause"
    New-InfraContainer -KubeDir $global:KubeDir -ContainerRuntime $global:ContainerRuntime

    if (-not (Test-ContainerImageExists -Image "kubletwin/pause" -ContainerRuntime $global:ContainerRuntime)) {
        Write-Log "Could not find container with name kubletwin/pause"
        if ($useContainerD) {
            $o = ctr -n k8s.io image list
            Write-Log $o
        } else {
            $o = docker image list
            Write-Log $o
        }
        Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_PAUSE_IMAGE_NOT_EXIST -ErrorMessage "kubletwin/pause container does not exist!"
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule

    Write-Log "Installing Azure VNet plugins"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL

    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
    }

    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled

    Install-KubernetesServices `
        -KubeDir $global:KubeDir `
        -ContainerRuntime $global:ContainerRuntime

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Set-Explorer

    Write-Log "Adjust pagefile size"
    Adjust-PageFileSize

    Write-Log "Start preProvisioning script"
    

    Write-Log "Update service failure actions"
    Update-ServiceFailureActions -ContainerRuntime $global:ContainerRuntime
    Adjust-DynamicPortRange
    Register-LogsCleanupScriptTask
    Register-NodeResetScriptTask
    Update-DefenderPreferences


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
    }

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
