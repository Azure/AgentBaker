// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: aksnodeconfig/v1/kubelet_config.proto

package aksnodeconfigv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubeletDisk int32

const (
	KubeletDisk_KUBELET_DISK_UNSPECIFIED KubeletDisk = 0
	KubeletDisk_KUBELET_DISK_OS_DISK     KubeletDisk = 1
	KubeletDisk_KUBELET_DISK_TEMP_DISK   KubeletDisk = 2
)

// Enum value maps for KubeletDisk.
var (
	KubeletDisk_name = map[int32]string{
		0: "KUBELET_DISK_UNSPECIFIED",
		1: "KUBELET_DISK_OS_DISK",
		2: "KUBELET_DISK_TEMP_DISK",
	}
	KubeletDisk_value = map[string]int32{
		"KUBELET_DISK_UNSPECIFIED": 0,
		"KUBELET_DISK_OS_DISK":     1,
		"KUBELET_DISK_TEMP_DISK":   2,
	}
)

func (x KubeletDisk) Enum() *KubeletDisk {
	p := new(KubeletDisk)
	*p = x
	return p
}

func (x KubeletDisk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeletDisk) Descriptor() protoreflect.EnumDescriptor {
	return file_aksnodeconfig_v1_kubelet_config_proto_enumTypes[0].Descriptor()
}

func (KubeletDisk) Type() protoreflect.EnumType {
	return &file_aksnodeconfig_v1_kubelet_config_proto_enumTypes[0]
}

func (x KubeletDisk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeletDisk.Descriptor instead.
func (KubeletDisk) EnumDescriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{0}
}

type KubeletConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of kubelet flags to their values. The map is sorted by key.
	KubeletFlags map[string]string `protobuf:"bytes,1,rep,name=kubelet_flags,json=kubeletFlags,proto3" json:"kubelet_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of node labels to their values.
	KubeletNodeLabels map[string]string `protobuf:"bytes,2,rep,name=kubelet_node_labels,json=kubeletNodeLabels,proto3" json:"kubelet_node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The type of disk to use for the kubelet.
	KubeletDiskType KubeletDisk `protobuf:"varint,3,opt,name=kubelet_disk_type,json=kubeletDiskType,proto3,enum=aksnodeconfig.v1.KubeletDisk" json:"kubelet_disk_type,omitempty"`
	// Whether kubelet config should be enabled.
	EnableKubeletConfigFile bool `protobuf:"varint,4,opt,name=enable_kubelet_config_file,json=enableKubeletConfigFile,proto3" json:"enable_kubelet_config_file,omitempty"`
	// content of the kubelet config file.
	KubeletConfigFileConfig *KubeletConfigFileConfig `protobuf:"bytes,5,opt,name=kubelet_config_file_config,json=kubeletConfigFileConfig,proto3" json:"kubelet_config_file_config,omitempty"`
	// Kubelet client private key
	KubeletClientKey string `protobuf:"bytes,6,opt,name=kubelet_client_key,json=kubeletClientKey,proto3" json:"kubelet_client_key,omitempty"`
	// The content of the kubelet client certificate file.
	KubeletClientCertContent string `protobuf:"bytes,7,opt,name=kubelet_client_cert_content,json=kubeletClientCertContent,proto3" json:"kubelet_client_cert_content,omitempty"`
	// The path used to mount docker images, emptyDir volumes, and kubelet data.
	ContainerDataDir string `protobuf:"bytes,8,opt,name=container_data_dir,json=containerDataDir,proto3" json:"container_data_dir,omitempty"`
}

func (x *KubeletConfig) Reset() {
	*x = KubeletConfig{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletConfig) ProtoMessage() {}

func (x *KubeletConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletConfig.ProtoReflect.Descriptor instead.
func (*KubeletConfig) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{0}
}

func (x *KubeletConfig) GetKubeletFlags() map[string]string {
	if x != nil {
		return x.KubeletFlags
	}
	return nil
}

func (x *KubeletConfig) GetKubeletNodeLabels() map[string]string {
	if x != nil {
		return x.KubeletNodeLabels
	}
	return nil
}

func (x *KubeletConfig) GetKubeletDiskType() KubeletDisk {
	if x != nil {
		return x.KubeletDiskType
	}
	return KubeletDisk_KUBELET_DISK_UNSPECIFIED
}

func (x *KubeletConfig) GetEnableKubeletConfigFile() bool {
	if x != nil {
		return x.EnableKubeletConfigFile
	}
	return false
}

func (x *KubeletConfig) GetKubeletConfigFileConfig() *KubeletConfigFileConfig {
	if x != nil {
		return x.KubeletConfigFileConfig
	}
	return nil
}

func (x *KubeletConfig) GetKubeletClientKey() string {
	if x != nil {
		return x.KubeletClientKey
	}
	return ""
}

func (x *KubeletConfig) GetKubeletClientCertContent() string {
	if x != nil {
		return x.KubeletClientCertContent
	}
	return ""
}

func (x *KubeletConfig) GetContainerDataDir() string {
	if x != nil {
		return x.ContainerDataDir
	}
	return ""
}

type KubeletConfigFileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	// +optional.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// staticPodPath is the path to the directory containing local (static) pods to
	// run, or the path to a single static pod file.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// the set of static pods specified at the new path may be different than the
	// ones the Kubelet initially started with, and this may disrupt your node.
	// Default: ""
	// +optional.
	StaticPodPath string `protobuf:"bytes,3,opt,name=static_pod_path,json=staticPodPath,proto3" json:"static_pod_path,omitempty"`
	// address is the IP address for the Kubelet to serve on (set to 0.0.0.0
	// for all interfaces).
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Default: "0.0.0.0"
	// +optional.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// readOnlyPort is the read-only port for the Kubelet to serve on with
	// no authentication/authorization.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Default: 0 (disabled)
	// +optional.
	ReadOnlyPort int32 `protobuf:"varint,5,opt,name=read_only_port,json=readOnlyPort,proto3" json:"read_only_port,omitempty"`
	// tlsCertFile is the file containing x509 Certificate for HTTPS. (CA cert,
	// if any, concatenated after server cert). If tlsCertFile and
	// tlsPrivateKeyFile are not provided, a self-signed certificate
	// and key are generated for the public address and saved to the directory
	// passed to the Kubelet's --cert-dir flag.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Default: ""
	// +optional.
	TlsCertFile string `protobuf:"bytes,6,opt,name=tls_cert_file,json=tlsCertFile,proto3" json:"tls_cert_file,omitempty"`
	// tlsPrivateKeyFile is the file containing x509 private key matching tlsCertFile
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Default: ""
	// +optional.
	TlsPrivateKeyFile string `protobuf:"bytes,7,opt,name=tls_private_key_file,json=tlsPrivateKeyFile,proto3" json:"tls_private_key_file,omitempty"`
	// TLSCipherSuites is the list of allowed cipher suites for the server.
	// Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants).
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Default: nil
	// +optional.
	TlsCipherSuites []string `protobuf:"bytes,8,rep,name=tls_cipher_suites,json=tlsCipherSuites,proto3" json:"tls_cipher_suites,omitempty"`
	// rotateCertificates enables client certificate rotation. The Kubelet will request a
	// new certificate from the certificates.k8s.io API. This requires an approver to approve the
	// certificate signing requests.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// disabling it may disrupt the Kubelet's ability to authenticate with the API server
	// after the current certificate expires.
	// Default: false
	// +optional.
	RotateCertificates bool `protobuf:"varint,9,opt,name=rotate_certificates,json=rotateCertificates,proto3" json:"rotate_certificates,omitempty"`
	// serverTLSBootstrap enables server certificate bootstrap. Instead of self
	// signing a serving certificate, the Kubelet will request a certificate from
	// the 'certificates.k8s.io' API. This requires an approver to approve the
	// certificate signing requests (CSR). The RotateKubeletServerCertificate feature
	// must be enabled when setting this field.
	// Default: false
	// +optional
	ServerTlsBootstrap bool `protobuf:"varint,10,opt,name=server_tls_bootstrap,json=serverTLSBootstrap,proto3" json:"server_tls_bootstrap,omitempty"`
	// authentication specifies how requests to the Kubelet's server are authenticated
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Defaults:
	// anonymous:
	// enabled: false
	// webhook:
	// enabled: true
	// cacheTTL: "2m"
	// +optional.
	Authentication *KubeletAuthentication `protobuf:"bytes,11,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// authorization specifies how requests to the Kubelet's server are authorized
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may disrupt components that interact with the Kubelet server.
	// Defaults:
	// mode: Webhook
	// webhook:
	// cacheAuthorizedTTL: "5m"
	// cacheUnauthorizedTTL: "30s"
	// +optional.
	Authorization *KubeletAuthorization `protobuf:"bytes,12,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// eventRecordQPS is the maximum event creations per second. If 0, there
	// is no limit enforced.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may impact scalability by changing the amount of traffic produced by
	// event creations.
	// Default: 5
	// +optional.
	EventRecordQps *int32 `protobuf:"varint,13,opt,name=event_record_qps,json=eventRecordQPS,proto3,oneof" json:"event_record_qps,omitempty"`
	// clusterDomain is the DNS domain for this cluster. If set, kubelet will
	// configure all containers to search this domain in addition to the
	// host's search domains.
	// Dynamic Kubelet Config (beta): Dynamically updating this field is not recommended,
	// as it should be kept in sync with the rest of the cluster.
	// Default: ""
	// +optional.
	ClusterDomain string `protobuf:"bytes,14,opt,name=cluster_domain,json=clusterDomain,proto3" json:"cluster_domain,omitempty"`
	// clusterDNS is a list of IP addresses for the cluster DNS server. If set,
	// kubelet will configure all containers to use this for DNS resolution
	// instead of the host's DNS servers.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// changes will only take effect on Pods created after the update. Draining
	// the node is recommended before changing this field.
	// Default: nil
	// +optional.
	ClusterDns []string `protobuf:"bytes,15,rep,name=cluster_dns,json=clusterDNS,proto3" json:"cluster_dns,omitempty"`
	// streamingConnectionIdleTimeout is the maximum time a streaming connection
	// can be idle before the connection is automatically closed.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may impact components that rely on infrequent updates over streaming
	// connections to the Kubelet server.
	// Default: "4h"
	// +optional.
	StreamingConnectionIdleTimeout string `protobuf:"bytes,16,opt,name=streaming_connection_idle_timeout,json=streamingConnectionIdleTimeout,proto3" json:"streaming_connection_idle_timeout,omitempty"`
	// nodeStatusUpdateFrequency is the frequency that kubelet computes node
	// status. If node lease feature is not enabled, it is also the frequency that
	// kubelet posts node status to master.
	// Note: When node lease feature is not enabled, be cautious when changing the
	// constant, it must work with nodeMonitorGracePeriod in nodecontroller.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may impact node scalability, and also that the node controller's
	// nodeMonitorGracePeriod must be set to N*NodeStatusUpdateFrequency,
	// where N is the number of retries before the node controller marks
	// the node unhealthy.
	// Default: "10s"
	// +optional.
	NodeStatusUpdateFrequency string `protobuf:"bytes,17,opt,name=node_status_update_frequency,json=nodeStatusUpdateFrequency,proto3" json:"node_status_update_frequency,omitempty"`
	// nodeStatusReportFrequency is the frequency that kubelet posts node
	// status to master if node status does not change. Kubelet will ignore this
	// frequency and post node status immediately if any change is detected. It is
	// only used when node lease feature is enabled. nodeStatusReportFrequency's
	// default value is 5m. But if nodeStatusUpdateFrequency is set explicitly,
	// nodeStatusReportFrequency's default value will be set to
	// nodeStatusUpdateFrequency for backward compatibility.
	// Default: "5m"
	// +optional.
	NodeStatusReportFrequency string `protobuf:"bytes,18,opt,name=node_status_report_frequency,json=nodeStatusReportFrequency,proto3" json:"node_status_report_frequency,omitempty"`
	// imageGCHighThresholdPercent is the percent of disk usage after which
	// image garbage collection is always run. The percent is calculated as
	// this field value out of 100.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may trigger or delay garbage collection, and may change the image overhead
	// on the node.
	// Default: 85
	// +optional.
	ImageGcHighThresholdPercent *int32 `protobuf:"varint,19,opt,name=image_gc_high_threshold_percent,json=imageGCHighThresholdPercent,proto3,oneof" json:"image_gc_high_threshold_percent,omitempty"`
	// imageGCLowThresholdPercent is the percent of disk usage before which
	// image garbage collection is never run. Lowest disk usage to garbage
	// collect to. The percent is calculated as this field value out of 100.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may trigger or delay garbage collection, and may change the image overhead
	// on the node.
	// Default: 80
	// +optional.
	ImageGcLowThresholdPercent *int32 `protobuf:"varint,20,opt,name=image_gc_low_threshold_percent,json=imageGCLowThresholdPercent,proto3,oneof" json:"image_gc_low_threshold_percent,omitempty"`
	// Enable QoS based Cgroup hierarchy: top level cgroups for QoS Classes
	// And all Burstable and BestEffort pods are brought up under their
	// specific top level QoS cgroup.
	// Dynamic Kubelet Config (beta): This field should not be updated without a full node
	// reboot. It is safest to keep this value the same as the local config.
	// Default: true
	// +optional.
	CgroupsPerQos *bool `protobuf:"varint,21,opt,name=cgroups_per_qos,json=cgroupsPerQOS,proto3,oneof" json:"cgroups_per_qos,omitempty"`
	// CPUManagerPolicy is the name of the policy to use.
	// Requires the CPUManager feature gate to be enabled.
	// Dynamic Kubelet Config (beta): This field should not be updated without a full node
	// reboot. It is safest to keep this value the same as the local config.
	// Default: "none"
	// +optional.
	CpuManagerPolicy string `protobuf:"bytes,22,opt,name=cpu_manager_policy,json=cpuManagerPolicy,proto3" json:"cpu_manager_policy,omitempty"`
	// TopologyManagerPolicy is the name of the policy to use.
	// Policies other than "none" require the TopologyManager feature gate to be enabled.
	// Dynamic Kubelet Config (beta): This field should not be updated without a full node
	// reboot. It is safest to keep this value the same as the local config.
	// Default: "none"
	// +optional.
	TopologyManagerPolicy string `protobuf:"bytes,23,opt,name=topology_manager_policy,json=topologyManagerPolicy,proto3" json:"topology_manager_policy,omitempty"`
	// maxPods is the number of pods that can run on this Kubelet.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// changes may cause Pods to fail admission on Kubelet restart, and may change
	// the value reported in Node.Status.Capacity[v1.ResourcePods], thus affecting
	// future scheduling decisions. Increasing this value may also decrease performance,
	// as more Pods can be packed into a single node.
	// Default: 110
	// +optional.
	MaxPods *int32 `protobuf:"varint,24,opt,name=max_pods,json=maxPods,proto3,oneof" json:"max_pods,omitempty"`
	// PodPidsLimit is the maximum number of pids in any pod.
	// Requires the SupportPodPidsLimit feature gate to be enabled.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// lowering it may prevent container processes from forking after the change.
	// Default: -1
	// +optional.
	PodPidsLimit *int32 `protobuf:"varint,25,opt,name=pod_pids_limit,json=podPidsLimit,proto3,oneof" json:"pod_pids_limit,omitempty"`
	// ResolvConf is the resolver configuration file used as the basis
	// for the container DNS resolution configuration.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// changes will only take effect on Pods created after the update. Draining
	// the node is recommended before changing this field.
	// Default: "/etc/resolv.conf"
	// +optional.
	ResolvConf string `protobuf:"bytes,26,opt,name=resolv_conf,json=resolvConf,proto3" json:"resolv_conf,omitempty"`
	// cpuCFSQuota enables CPU CFS quota enforcement for containers that
	// specify CPU limits.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// disabling it may reduce node stability.
	// Default: true
	// +optional.
	CpuCfsQuota *bool `protobuf:"varint,27,opt,name=cpu_cfs_quota,json=cpuCFSQuota,proto3,oneof" json:"cpu_cfs_quota,omitempty"`
	// CPUCFSQuotaPeriod is the CPU CFS quota period value, cpu.cfs_period_us.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// limits set for containers will result in different cpu.cfs_quota settings. This
	// will trigger container restarts on the node being reconfigured.
	// Default: "100ms"
	// +optional.
	CpuCfsQuotaPeriod string `protobuf:"bytes,28,opt,name=cpu_cfs_quota_period,json=cpuCFSQuotaPeriod,proto3" json:"cpu_cfs_quota_period,omitempty"`
	// Map of signal names to quantities that defines hard eviction thresholds. For example: {"memory.available": "300Mi"}.
	// To explicitly disable, pass a 0% or 100% threshold on an arbitrary resource.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may trigger or delay Pod evictions.
	// Default:
	// memory.available:  "100Mi"
	// nodefs.available:  "10%"
	// nodefs.inodesFree: "5%"
	// imagefs.available: "15%"
	// +optional.
	EvictionHard map[string]string `protobuf:"bytes,29,rep,name=eviction_hard,json=evictionHard,proto3" json:"eviction_hard,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// protectKernelDefaults, if true, causes the Kubelet to error if kernel
	// flags are not as it expects. Otherwise the Kubelet will attempt to modify
	// kernel flags to match its expectation.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// enabling it may cause the Kubelet to crash-loop if the Kernel is not configured as
	// Kubelet expects.
	// Default: false
	// +optional.
	ProtectKernelDefaults bool `protobuf:"varint,30,opt,name=protect_kernel_defaults,json=protectKernelDefaults,proto3" json:"protect_kernel_defaults,omitempty"`
	// featureGates is a map of feature names to bools that enable or disable alpha/experimental
	// features. This field modifies piecemeal the built-in default values from
	// "k8s.io/kubernetes/pkg/features/kube_features.go".
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider the
	// documentation for the features you are enabling or disabling. While we
	// encourage feature developers to make it possible to dynamically enable
	// and disable features, some changes may require node reboots, and some
	// features may require careful coordination to retroactively disable.
	// Default: nil
	// +optional.
	FeatureGates map[string]bool `protobuf:"bytes,31,rep,name=feature_gates,json=featureGates,proto3" json:"feature_gates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// failSwapOn tells the Kubelet to fail to start if swap is enabled on the node.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// setting it to true will cause the Kubelet to crash-loop if swap is enabled.
	// Default: true
	// +optional.
	FailSwapOn *bool `protobuf:"varint,32,opt,name=fail_swap_on,json=failSwapOn,proto3,oneof" json:"fail_swap_on,omitempty"`
	// A quantity defines the maximum size of the container log file before it is rotated.
	// For example: "5Mi" or "256Ki".
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may trigger log rotation.
	// Default: "10Mi"
	// +optional.
	ContainerLogMaxSize string `protobuf:"bytes,33,opt,name=container_log_max_size,json=containerLogMaxSize,proto3" json:"container_log_max_size,omitempty"`
	// Maximum number of container log files that can be present for a container.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// lowering it may cause log files to be deleted.
	// Default: 5
	// +optional.
	ContainerLogMaxFiles *int32 `protobuf:"varint,34,opt,name=container_log_max_files,json=containerLogMaxFiles,proto3,oneof" json:"container_log_max_files,omitempty"`
	// systemReserved is a set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G)
	// pairs that describe resources reserved for non-kubernetes components.
	// Currently only cpu and memory are supported.
	// See http://kubernetes.io/docs/user-guide/compute-resources for more detail.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may not be possible to increase the reserved resources, because this
	// requires resizing cgroups. Always look for a NodeAllocatableEnforced event
	// after updating this field to ensure that the update was successful.
	// Default: nil
	// +optional.
	SystemReserved map[string]string `protobuf:"bytes,35,rep,name=system_reserved,json=systemReserved,proto3" json:"system_reserved,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A set of ResourceName=ResourceQuantity (e.g. cpu=200m,memory=150G) pairs
	// that describe resources reserved for kubernetes system components.
	// Currently cpu, memory and local storage for root file system are supported.
	// See http://kubernetes.io/docs/user-guide/compute-resources for more detail.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// it may not be possible to increase the reserved resources, because this
	// requires resizing cgroups. Always look for a NodeAllocatableEnforced event
	// after updating this field to ensure that the update was successful.
	// Default: nil
	// +optional.
	KubeReserved map[string]string `protobuf:"bytes,36,rep,name=kube_reserved,json=kubeReserved,proto3" json:"kube_reserved,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This flag specifies the various Node Allocatable enforcements that Kubelet needs to perform.
	// This flag accepts a list of options. Acceptable options are `none`, `pods`, `system-reserved` &
	// `kube-reserved`. If `none` is specified, no other options may be specified.
	// Refer to
	// [Node Allocatable](https://git.k8s.io/community/contributors/design-proposals/node/node-allocatable.md)
	// doc for more information.
	// Dynamic Kubelet Config (beta): If dynamically updating this field, consider that
	// removing enforcements may reduce the stability of the node. Alternatively, adding
	// enforcements may reduce the stability of components which were using more than
	// the reserved amount of resources; for example, enforcing kube-reserved may cause
	// Kubelets to OOM if it uses more than the reserved resources, and enforcing system-reserved
	// may cause system daemons to OOM if they use more than the reserved resources.
	// Default: ["pods"]
	// +optional.
	EnforceNodeAllocatable []string `protobuf:"bytes,37,rep,name=enforce_node_allocatable,json=enforceNodeAllocatable,proto3" json:"enforce_node_allocatable,omitempty"`
	// A comma separated whitelist of unsafe sysctls or sysctl patterns (ending in *).
	// Unsafe sysctl groups are kernel.shm*, kernel.msg*, kernel.sem, fs.mqueue.*, and net.*.
	// These sysctls are namespaced but not allowed by default.
	// For example: "kernel.msg*,net.ipv4.route.min_pmtu"
	// Default: []
	// +optional.
	AllowedUnsafeSysctls []string `protobuf:"bytes,38,rep,name=allowed_unsafe_sysctls,json=allowedUnsafeSysctls,proto3" json:"allowed_unsafe_sysctls,omitempty"`
	// serializeImagePulls when enabled, tells the Kubelet to pull images one
	// at a time. We recommend *not* changing the default value on nodes that
	// run docker daemon with version  < 1.9 or an Aufs storage backend.
	// Issue #10959 has more details.
	// Default: true
	// +optional
	SerializeImagePulls *bool `protobuf:"varint,39,opt,name=serialize_image_pulls,json=serializeImagePulls,proto3,oneof" json:"serialize_image_pulls,omitempty"`
	// SeccompDefault enables the use of `RuntimeDefault` as the default seccomp profile for all workloads.
	// Default: false
	// +optional
	SeccompDefault bool `protobuf:"varint,40,opt,name=seccomp_default,json=seccompDefault,proto3" json:"seccomp_default,omitempty"`
}

func (x *KubeletConfigFileConfig) Reset() {
	*x = KubeletConfigFileConfig{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletConfigFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletConfigFileConfig) ProtoMessage() {}

func (x *KubeletConfigFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletConfigFileConfig.ProtoReflect.Descriptor instead.
func (*KubeletConfigFileConfig) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{1}
}

func (x *KubeletConfigFileConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetStaticPodPath() string {
	if x != nil {
		return x.StaticPodPath
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetReadOnlyPort() int32 {
	if x != nil {
		return x.ReadOnlyPort
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetTlsCertFile() string {
	if x != nil {
		return x.TlsCertFile
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetTlsPrivateKeyFile() string {
	if x != nil {
		return x.TlsPrivateKeyFile
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetTlsCipherSuites() []string {
	if x != nil {
		return x.TlsCipherSuites
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetRotateCertificates() bool {
	if x != nil {
		return x.RotateCertificates
	}
	return false
}

func (x *KubeletConfigFileConfig) GetServerTlsBootstrap() bool {
	if x != nil {
		return x.ServerTlsBootstrap
	}
	return false
}

func (x *KubeletConfigFileConfig) GetAuthentication() *KubeletAuthentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetAuthorization() *KubeletAuthorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetEventRecordQps() int32 {
	if x != nil && x.EventRecordQps != nil {
		return *x.EventRecordQps
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetClusterDns() []string {
	if x != nil {
		return x.ClusterDns
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetStreamingConnectionIdleTimeout() string {
	if x != nil {
		return x.StreamingConnectionIdleTimeout
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetNodeStatusUpdateFrequency() string {
	if x != nil {
		return x.NodeStatusUpdateFrequency
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetNodeStatusReportFrequency() string {
	if x != nil {
		return x.NodeStatusReportFrequency
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetImageGcHighThresholdPercent() int32 {
	if x != nil && x.ImageGcHighThresholdPercent != nil {
		return *x.ImageGcHighThresholdPercent
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetImageGcLowThresholdPercent() int32 {
	if x != nil && x.ImageGcLowThresholdPercent != nil {
		return *x.ImageGcLowThresholdPercent
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetCgroupsPerQos() bool {
	if x != nil && x.CgroupsPerQos != nil {
		return *x.CgroupsPerQos
	}
	return false
}

func (x *KubeletConfigFileConfig) GetCpuManagerPolicy() string {
	if x != nil {
		return x.CpuManagerPolicy
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetTopologyManagerPolicy() string {
	if x != nil {
		return x.TopologyManagerPolicy
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetMaxPods() int32 {
	if x != nil && x.MaxPods != nil {
		return *x.MaxPods
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetPodPidsLimit() int32 {
	if x != nil && x.PodPidsLimit != nil {
		return *x.PodPidsLimit
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetResolvConf() string {
	if x != nil {
		return x.ResolvConf
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetCpuCfsQuota() bool {
	if x != nil && x.CpuCfsQuota != nil {
		return *x.CpuCfsQuota
	}
	return false
}

func (x *KubeletConfigFileConfig) GetCpuCfsQuotaPeriod() string {
	if x != nil {
		return x.CpuCfsQuotaPeriod
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetEvictionHard() map[string]string {
	if x != nil {
		return x.EvictionHard
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetProtectKernelDefaults() bool {
	if x != nil {
		return x.ProtectKernelDefaults
	}
	return false
}

func (x *KubeletConfigFileConfig) GetFeatureGates() map[string]bool {
	if x != nil {
		return x.FeatureGates
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetFailSwapOn() bool {
	if x != nil && x.FailSwapOn != nil {
		return *x.FailSwapOn
	}
	return false
}

func (x *KubeletConfigFileConfig) GetContainerLogMaxSize() string {
	if x != nil {
		return x.ContainerLogMaxSize
	}
	return ""
}

func (x *KubeletConfigFileConfig) GetContainerLogMaxFiles() int32 {
	if x != nil && x.ContainerLogMaxFiles != nil {
		return *x.ContainerLogMaxFiles
	}
	return 0
}

func (x *KubeletConfigFileConfig) GetSystemReserved() map[string]string {
	if x != nil {
		return x.SystemReserved
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetKubeReserved() map[string]string {
	if x != nil {
		return x.KubeReserved
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetEnforceNodeAllocatable() []string {
	if x != nil {
		return x.EnforceNodeAllocatable
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetAllowedUnsafeSysctls() []string {
	if x != nil {
		return x.AllowedUnsafeSysctls
	}
	return nil
}

func (x *KubeletConfigFileConfig) GetSerializeImagePulls() bool {
	if x != nil && x.SerializeImagePulls != nil {
		return *x.SerializeImagePulls
	}
	return false
}

func (x *KubeletConfigFileConfig) GetSeccompDefault() bool {
	if x != nil {
		return x.SeccompDefault
	}
	return false
}

type KubeletAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// x509 contains settings related to x509 client certificate authentication.
	// +optional.
	X509 *KubeletX509Authentication `protobuf:"bytes,1,opt,name=x509,proto3" json:"x509,omitempty"`
	// webhook contains settings related to webhook bearer token authentication.
	// +optional.
	Webhook *KubeletWebhookAuthentication `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// anonymous contains settings related to anonymous authentication.
	// +optional.
	Anonymous *KubeletAnonymousAuthentication `protobuf:"bytes,3,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (x *KubeletAuthentication) Reset() {
	*x = KubeletAuthentication{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletAuthentication) ProtoMessage() {}

func (x *KubeletAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletAuthentication.ProtoReflect.Descriptor instead.
func (*KubeletAuthentication) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{2}
}

func (x *KubeletAuthentication) GetX509() *KubeletX509Authentication {
	if x != nil {
		return x.X509
	}
	return nil
}

func (x *KubeletAuthentication) GetWebhook() *KubeletWebhookAuthentication {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *KubeletAuthentication) GetAnonymous() *KubeletAnonymousAuthentication {
	if x != nil {
		return x.Anonymous
	}
	return nil
}

type KubeletX509Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clientCAFile is the path to a PEM-encoded certificate bundle. If set, any request presenting a client certificate
	// signed by one of the authorities in the bundle is authenticated with a username corresponding to the CommonName,
	// and groups corresponding to the Organization in the client certificate.
	// +optional.
	ClientCaFile string `protobuf:"bytes,1,opt,name=client_ca_file,json=clientCAFile,proto3" json:"client_ca_file,omitempty"`
}

func (x *KubeletX509Authentication) Reset() {
	*x = KubeletX509Authentication{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletX509Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletX509Authentication) ProtoMessage() {}

func (x *KubeletX509Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletX509Authentication.ProtoReflect.Descriptor instead.
func (*KubeletX509Authentication) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{3}
}

func (x *KubeletX509Authentication) GetClientCaFile() string {
	if x != nil {
		return x.ClientCaFile
	}
	return ""
}

type KubeletWebhookAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled allows bearer token authentication backed by the tokenreviews.authentication.k8s.io API.
	// +optional.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// cacheTTL enables caching of authentication results.
	// +optional.
	CacheTtl string `protobuf:"bytes,2,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty"`
}

func (x *KubeletWebhookAuthentication) Reset() {
	*x = KubeletWebhookAuthentication{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletWebhookAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletWebhookAuthentication) ProtoMessage() {}

func (x *KubeletWebhookAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletWebhookAuthentication.ProtoReflect.Descriptor instead.
func (*KubeletWebhookAuthentication) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{4}
}

func (x *KubeletWebhookAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *KubeletWebhookAuthentication) GetCacheTtl() string {
	if x != nil {
		return x.CacheTtl
	}
	return ""
}

type KubeletAnonymousAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled allows anonymous requests to the kubelet server.
	// Requests that are not rejected by another authentication method are treated as anonymous requests.
	// Anonymous requests have a username of system:anonymous, and a group name of system:unauthenticated.
	// +optional.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *KubeletAnonymousAuthentication) Reset() {
	*x = KubeletAnonymousAuthentication{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletAnonymousAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletAnonymousAuthentication) ProtoMessage() {}

func (x *KubeletAnonymousAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletAnonymousAuthentication.ProtoReflect.Descriptor instead.
func (*KubeletAnonymousAuthentication) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{5}
}

func (x *KubeletAnonymousAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type KubeletAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mode is the authorization mode to apply to requests to the kubelet server.
	// Valid values are AlwaysAllow and Webhook.
	// Webhook mode uses the SubjectAccessReview API to determine authorization.
	// +optional.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// webhook contains settings related to Webhook authorization.
	// +optional.
	Webhook *KubeletWebhookAuthorization `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
}

func (x *KubeletAuthorization) Reset() {
	*x = KubeletAuthorization{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletAuthorization) ProtoMessage() {}

func (x *KubeletAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletAuthorization.ProtoReflect.Descriptor instead.
func (*KubeletAuthorization) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{6}
}

func (x *KubeletAuthorization) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *KubeletAuthorization) GetWebhook() *KubeletWebhookAuthorization {
	if x != nil {
		return x.Webhook
	}
	return nil
}

type KubeletWebhookAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cacheAuthorizedTTL is the duration to cache 'authorized' responses from the webhook authorizer.
	// +optional.
	CacheAuthorizedTtl string `protobuf:"bytes,1,opt,name=cache_authorized_ttl,json=cacheAuthorizedTtl,proto3" json:"cache_authorized_ttl,omitempty"`
	// cacheUnauthorizedTTL is the duration to cache 'unauthorized' responses from the webhook authorizer.
	// +optional.
	CacheUnauthorizedTtl string `protobuf:"bytes,2,opt,name=cache_unauthorized_ttl,json=cacheUnauthorizedTtl,proto3" json:"cache_unauthorized_ttl,omitempty"`
}

func (x *KubeletWebhookAuthorization) Reset() {
	*x = KubeletWebhookAuthorization{}
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeletWebhookAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletWebhookAuthorization) ProtoMessage() {}

func (x *KubeletWebhookAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletWebhookAuthorization.ProtoReflect.Descriptor instead.
func (*KubeletWebhookAuthorization) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP(), []int{7}
}

func (x *KubeletWebhookAuthorization) GetCacheAuthorizedTtl() string {
	if x != nil {
		return x.CacheAuthorizedTtl
	}
	return ""
}

func (x *KubeletWebhookAuthorization) GetCacheUnauthorizedTtl() string {
	if x != nil {
		return x.CacheUnauthorizedTtl
	}
	return ""
}

var File_aksnodeconfig_v1_kubelet_config_proto protoreflect.FileDescriptor

var file_aksnodeconfig_v1_kubelet_config_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22, 0xe1, 0x05, 0x0a, 0x0d, 0x4b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0d, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x6b, 0x75, 0x62,
	0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x1a, 0x3f, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x15,
	0x0a, 0x17, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x6f, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6c,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6c, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6c, 0x73, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c,
	0x53, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x50, 0x53, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x4e, 0x53,
	0x12, 0x49, 0x0a, 0x21, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x49, 0x0a,
	0x1f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x63, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x47,
	0x43, 0x48, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x63, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x1a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x43, 0x4c, 0x6f, 0x77, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x71, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x50, 0x65, 0x72, 0x51, 0x4f, 0x53, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x70, 0x75, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x64, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c,
	0x70, 0x6f, 0x64, 0x50, 0x69, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x27, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x66, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x43, 0x46,
	0x53, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x70, 0x75,
	0x5f, 0x63, 0x66, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x70, 0x75, 0x43, 0x46, 0x53, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x65, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x6b,
	0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a,
	0x66, 0x61, 0x69, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x66,
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
	0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x71, 0x70, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x63, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x63, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x6f, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x66, 0x73, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x4b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x78, 0x35, 0x30, 0x39, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x58, 0x35, 0x30, 0x39,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x78, 0x35, 0x30, 0x39, 0x12, 0x48, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x4e,
	0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x41,
	0x0a, 0x19, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x58, 0x35, 0x30, 0x39, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x41, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x55, 0x0a, 0x1c, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x74, 0x6c, 0x22, 0x3a, 0x0a, 0x1e, 0x4b, 0x75, 0x62, 0x65,
	0x6c, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x73, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x4b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x74, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x74,
	0x6c, 0x2a, 0x61, 0x0a, 0x0b, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4f,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x55, 0x42, 0x45,
	0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x10, 0x02, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x2f, 0x61, 0x6b, 0x73, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x3b, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aksnodeconfig_v1_kubelet_config_proto_rawDescOnce sync.Once
	file_aksnodeconfig_v1_kubelet_config_proto_rawDescData = file_aksnodeconfig_v1_kubelet_config_proto_rawDesc
)

func file_aksnodeconfig_v1_kubelet_config_proto_rawDescGZIP() []byte {
	file_aksnodeconfig_v1_kubelet_config_proto_rawDescOnce.Do(func() {
		file_aksnodeconfig_v1_kubelet_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_aksnodeconfig_v1_kubelet_config_proto_rawDescData)
	})
	return file_aksnodeconfig_v1_kubelet_config_proto_rawDescData
}

var file_aksnodeconfig_v1_kubelet_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aksnodeconfig_v1_kubelet_config_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_aksnodeconfig_v1_kubelet_config_proto_goTypes = []any{
	(KubeletDisk)(0),                       // 0: aksnodeconfig.v1.KubeletDisk
	(*KubeletConfig)(nil),                  // 1: aksnodeconfig.v1.KubeletConfig
	(*KubeletConfigFileConfig)(nil),        // 2: aksnodeconfig.v1.KubeletConfigFileConfig
	(*KubeletAuthentication)(nil),          // 3: aksnodeconfig.v1.KubeletAuthentication
	(*KubeletX509Authentication)(nil),      // 4: aksnodeconfig.v1.KubeletX509Authentication
	(*KubeletWebhookAuthentication)(nil),   // 5: aksnodeconfig.v1.KubeletWebhookAuthentication
	(*KubeletAnonymousAuthentication)(nil), // 6: aksnodeconfig.v1.KubeletAnonymousAuthentication
	(*KubeletAuthorization)(nil),           // 7: aksnodeconfig.v1.KubeletAuthorization
	(*KubeletWebhookAuthorization)(nil),    // 8: aksnodeconfig.v1.KubeletWebhookAuthorization
	nil,                                    // 9: aksnodeconfig.v1.KubeletConfig.KubeletFlagsEntry
	nil,                                    // 10: aksnodeconfig.v1.KubeletConfig.KubeletNodeLabelsEntry
	nil,                                    // 11: aksnodeconfig.v1.KubeletConfigFileConfig.EvictionHardEntry
	nil,                                    // 12: aksnodeconfig.v1.KubeletConfigFileConfig.FeatureGatesEntry
	nil,                                    // 13: aksnodeconfig.v1.KubeletConfigFileConfig.SystemReservedEntry
	nil,                                    // 14: aksnodeconfig.v1.KubeletConfigFileConfig.KubeReservedEntry
}
var file_aksnodeconfig_v1_kubelet_config_proto_depIdxs = []int32{
	9,  // 0: aksnodeconfig.v1.KubeletConfig.kubelet_flags:type_name -> aksnodeconfig.v1.KubeletConfig.KubeletFlagsEntry
	10, // 1: aksnodeconfig.v1.KubeletConfig.kubelet_node_labels:type_name -> aksnodeconfig.v1.KubeletConfig.KubeletNodeLabelsEntry
	0,  // 2: aksnodeconfig.v1.KubeletConfig.kubelet_disk_type:type_name -> aksnodeconfig.v1.KubeletDisk
	2,  // 3: aksnodeconfig.v1.KubeletConfig.kubelet_config_file_config:type_name -> aksnodeconfig.v1.KubeletConfigFileConfig
	3,  // 4: aksnodeconfig.v1.KubeletConfigFileConfig.authentication:type_name -> aksnodeconfig.v1.KubeletAuthentication
	7,  // 5: aksnodeconfig.v1.KubeletConfigFileConfig.authorization:type_name -> aksnodeconfig.v1.KubeletAuthorization
	11, // 6: aksnodeconfig.v1.KubeletConfigFileConfig.eviction_hard:type_name -> aksnodeconfig.v1.KubeletConfigFileConfig.EvictionHardEntry
	12, // 7: aksnodeconfig.v1.KubeletConfigFileConfig.feature_gates:type_name -> aksnodeconfig.v1.KubeletConfigFileConfig.FeatureGatesEntry
	13, // 8: aksnodeconfig.v1.KubeletConfigFileConfig.system_reserved:type_name -> aksnodeconfig.v1.KubeletConfigFileConfig.SystemReservedEntry
	14, // 9: aksnodeconfig.v1.KubeletConfigFileConfig.kube_reserved:type_name -> aksnodeconfig.v1.KubeletConfigFileConfig.KubeReservedEntry
	4,  // 10: aksnodeconfig.v1.KubeletAuthentication.x509:type_name -> aksnodeconfig.v1.KubeletX509Authentication
	5,  // 11: aksnodeconfig.v1.KubeletAuthentication.webhook:type_name -> aksnodeconfig.v1.KubeletWebhookAuthentication
	6,  // 12: aksnodeconfig.v1.KubeletAuthentication.anonymous:type_name -> aksnodeconfig.v1.KubeletAnonymousAuthentication
	8,  // 13: aksnodeconfig.v1.KubeletAuthorization.webhook:type_name -> aksnodeconfig.v1.KubeletWebhookAuthorization
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_aksnodeconfig_v1_kubelet_config_proto_init() }
func file_aksnodeconfig_v1_kubelet_config_proto_init() {
	if File_aksnodeconfig_v1_kubelet_config_proto != nil {
		return
	}
	file_aksnodeconfig_v1_kubelet_config_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aksnodeconfig_v1_kubelet_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aksnodeconfig_v1_kubelet_config_proto_goTypes,
		DependencyIndexes: file_aksnodeconfig_v1_kubelet_config_proto_depIdxs,
		EnumInfos:         file_aksnodeconfig_v1_kubelet_config_proto_enumTypes,
		MessageInfos:      file_aksnodeconfig_v1_kubelet_config_proto_msgTypes,
	}.Build()
	File_aksnodeconfig_v1_kubelet_config_proto = out.File
	file_aksnodeconfig_v1_kubelet_config_proto_rawDesc = nil
	file_aksnodeconfig_v1_kubelet_config_proto_goTypes = nil
	file_aksnodeconfig_v1_kubelet_config_proto_depIdxs = nil
}
