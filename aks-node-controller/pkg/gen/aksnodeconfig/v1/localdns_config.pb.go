// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: aksnodeconfig/v1/localdns_config.proto

package aksnodeconfigv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents localdns configuration for agentpool nodes.
type LocalDNSProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLocalDNS       bool                          `protobuf:"varint,1,opt,name=enable_local_d_n_s,json=enableLocalDNS,proto3" json:"enable_local_d_n_s,omitempty"`
	CPULimitInMilliCores *int32                        `protobuf:"varint,2,opt,name=c_p_u_limit_in_milli_cores,json=cPULimitInMilliCores,proto3,oneof" json:"c_p_u_limit_in_milli_cores,omitempty"`
	MemoryLimitInMB      *int32                        `protobuf:"varint,3,opt,name=memory_limit_in_m_b,json=memoryLimitInMB,proto3,oneof" json:"memory_limit_in_m_b,omitempty"`
	VnetDNSOverrides     map[string]*LocalDNSOverrides `protobuf:"bytes,4,rep,name=vnet_d_n_s_overrides,json=vnetDNSOverrides,proto3" json:"vnet_d_n_s_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KubeDNSOverrides     map[string]*LocalDNSOverrides `protobuf:"bytes,5,rep,name=kube_d_n_s_overrides,json=kubeDNSOverrides,proto3" json:"kube_d_n_s_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LocalDNSProfile) Reset() {
	*x = LocalDNSProfile{}
	mi := &file_aksnodeconfig_v1_localdns_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDNSProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDNSProfile) ProtoMessage() {}

func (x *LocalDNSProfile) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_localdns_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDNSProfile.ProtoReflect.Descriptor instead.
func (*LocalDNSProfile) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_localdns_config_proto_rawDescGZIP(), []int{0}
}

func (x *LocalDNSProfile) GetEnableLocalDNS() bool {
	if x != nil {
		return x.EnableLocalDNS
	}
	return false
}

func (x *LocalDNSProfile) GetCPULimitInMilliCores() int32 {
	if x != nil && x.CPULimitInMilliCores != nil {
		return *x.CPULimitInMilliCores
	}
	return 0
}

func (x *LocalDNSProfile) GetMemoryLimitInMB() int32 {
	if x != nil && x.MemoryLimitInMB != nil {
		return *x.MemoryLimitInMB
	}
	return 0
}

func (x *LocalDNSProfile) GetVnetDNSOverrides() map[string]*LocalDNSOverrides {
	if x != nil {
		return x.VnetDNSOverrides
	}
	return nil
}

func (x *LocalDNSProfile) GetKubeDNSOverrides() map[string]*LocalDNSOverrides {
	if x != nil {
		return x.KubeDNSOverrides
	}
	return nil
}

// Represents DNS override settings for both VnetDNS and KubeDNS traffic.
// VnetDNS overrides apply to DNS traffic from pods with dnsPolicy:default or kubelet.
// KubeDNS overrides apply to DNS traffic from pods with dnsPolicy:ClusterFirst.
type LocalDNSOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryLogging                string `protobuf:"bytes,1,opt,name=query_logging,json=queryLogging,proto3" json:"query_logging,omitempty"`
	Protocol                    string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ForwardDestination          string `protobuf:"bytes,3,opt,name=forward_destination,json=forwardDestination,proto3" json:"forward_destination,omitempty"`
	ForwardPolicy               string `protobuf:"bytes,4,opt,name=forward_policy,json=forwardPolicy,proto3" json:"forward_policy,omitempty"`
	MaxConcurrent               *int32 `protobuf:"varint,5,opt,name=max_concurrent,json=maxConcurrent,proto3,oneof" json:"max_concurrent,omitempty"`
	CacheDurationInSeconds      *int32 `protobuf:"varint,6,opt,name=cache_duration_in_seconds,json=cacheDurationInSeconds,proto3,oneof" json:"cache_duration_in_seconds,omitempty"`
	ServeStaleDurationInSeconds *int32 `protobuf:"varint,7,opt,name=serve_stale_duration_in_seconds,json=serveStaleDurationInSeconds,proto3,oneof" json:"serve_stale_duration_in_seconds,omitempty"`
	ServeStale                  string `protobuf:"bytes,8,opt,name=serve_stale,json=serveStale,proto3" json:"serve_stale,omitempty"`
}

func (x *LocalDNSOverrides) Reset() {
	*x = LocalDNSOverrides{}
	mi := &file_aksnodeconfig_v1_localdns_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDNSOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDNSOverrides) ProtoMessage() {}

func (x *LocalDNSOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_localdns_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDNSOverrides.ProtoReflect.Descriptor instead.
func (*LocalDNSOverrides) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_localdns_config_proto_rawDescGZIP(), []int{1}
}

func (x *LocalDNSOverrides) GetQueryLogging() string {
	if x != nil {
		return x.QueryLogging
	}
	return ""
}

func (x *LocalDNSOverrides) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *LocalDNSOverrides) GetForwardDestination() string {
	if x != nil {
		return x.ForwardDestination
	}
	return ""
}

func (x *LocalDNSOverrides) GetForwardPolicy() string {
	if x != nil {
		return x.ForwardPolicy
	}
	return ""
}

func (x *LocalDNSOverrides) GetMaxConcurrent() int32 {
	if x != nil && x.MaxConcurrent != nil {
		return *x.MaxConcurrent
	}
	return 0
}

func (x *LocalDNSOverrides) GetCacheDurationInSeconds() int32 {
	if x != nil && x.CacheDurationInSeconds != nil {
		return *x.CacheDurationInSeconds
	}
	return 0
}

func (x *LocalDNSOverrides) GetServeStaleDurationInSeconds() int32 {
	if x != nil && x.ServeStaleDurationInSeconds != nil {
		return *x.ServeStaleDurationInSeconds
	}
	return 0
}

func (x *LocalDNSOverrides) GetServeStale() string {
	if x != nil {
		return x.ServeStale
	}
	return ""
}

var File_aksnodeconfig_v1_localdns_config_proto protoreflect.FileDescriptor

var file_aksnodeconfig_v1_localdns_config_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22, 0x8c, 0x05, 0x0a, 0x0f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x5f, 0x6e, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x12, 0x3d, 0x0a, 0x1a, 0x63, 0x5f,
	0x70, 0x5f, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x14, 0x63, 0x50, 0x55, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x13, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x5f, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x4d, 0x42, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x14,
	0x76, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x5f, 0x6e, 0x5f, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x73,
	0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x6e,
	0x65, 0x74, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x76, 0x6e, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x64, 0x5f,
	0x6e, 0x5f, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x44, 0x4e, 0x53, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x68,
	0x0a, 0x15, 0x56, 0x6e, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f,
	0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65,
	0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x5f, 0x70, 0x5f, 0x75, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x5f, 0x62, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x2f, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x6b, 0x73, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aksnodeconfig_v1_localdns_config_proto_rawDescOnce sync.Once
	file_aksnodeconfig_v1_localdns_config_proto_rawDescData = file_aksnodeconfig_v1_localdns_config_proto_rawDesc
)

func file_aksnodeconfig_v1_localdns_config_proto_rawDescGZIP() []byte {
	file_aksnodeconfig_v1_localdns_config_proto_rawDescOnce.Do(func() {
		file_aksnodeconfig_v1_localdns_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_aksnodeconfig_v1_localdns_config_proto_rawDescData)
	})
	return file_aksnodeconfig_v1_localdns_config_proto_rawDescData
}

var file_aksnodeconfig_v1_localdns_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_aksnodeconfig_v1_localdns_config_proto_goTypes = []any{
	(*LocalDNSProfile)(nil),   // 0: aksnodeconfig.v1.LocalDNSProfile
	(*LocalDNSOverrides)(nil), // 1: aksnodeconfig.v1.LocalDNSOverrides
	nil,                       // 2: aksnodeconfig.v1.LocalDNSProfile.VnetDNSOverridesEntry
	nil,                       // 3: aksnodeconfig.v1.LocalDNSProfile.KubeDNSOverridesEntry
}
var file_aksnodeconfig_v1_localdns_config_proto_depIdxs = []int32{
	2, // 0: aksnodeconfig.v1.LocalDNSProfile.vnet_d_n_s_overrides:type_name -> aksnodeconfig.v1.LocalDNSProfile.VnetDNSOverridesEntry
	3, // 1: aksnodeconfig.v1.LocalDNSProfile.kube_d_n_s_overrides:type_name -> aksnodeconfig.v1.LocalDNSProfile.KubeDNSOverridesEntry
	1, // 2: aksnodeconfig.v1.LocalDNSProfile.VnetDNSOverridesEntry.value:type_name -> aksnodeconfig.v1.LocalDNSOverrides
	1, // 3: aksnodeconfig.v1.LocalDNSProfile.KubeDNSOverridesEntry.value:type_name -> aksnodeconfig.v1.LocalDNSOverrides
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_aksnodeconfig_v1_localdns_config_proto_init() }
func file_aksnodeconfig_v1_localdns_config_proto_init() {
	if File_aksnodeconfig_v1_localdns_config_proto != nil {
		return
	}
	file_aksnodeconfig_v1_localdns_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_aksnodeconfig_v1_localdns_config_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aksnodeconfig_v1_localdns_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aksnodeconfig_v1_localdns_config_proto_goTypes,
		DependencyIndexes: file_aksnodeconfig_v1_localdns_config_proto_depIdxs,
		MessageInfos:      file_aksnodeconfig_v1_localdns_config_proto_msgTypes,
	}.Build()
	File_aksnodeconfig_v1_localdns_config_proto = out.File
	file_aksnodeconfig_v1_localdns_config_proto_rawDesc = nil
	file_aksnodeconfig_v1_localdns_config_proto_goTypes = nil
	file_aksnodeconfig_v1_localdns_config_proto_depIdxs = nil
}
