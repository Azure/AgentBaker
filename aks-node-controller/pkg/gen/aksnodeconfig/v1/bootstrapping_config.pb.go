// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: aksnodeconfig/v1/bootstrapping_config.proto

package aksnodeconfigv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BootstrappingAuthMethod int32

const (
	BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_UNSPECIFIED BootstrappingAuthMethod = 0
	// This is the default K8s bootstrap authentication method - a time limited bootstrap token. It's stored as a secret
	// with a particular type in the API server.
	//
	//nolint:gosec // this is a const string to use in switch statements, not hardcoded credentials
	BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_BOOTSTRAP_TOKEN BootstrappingAuthMethod = 1
	// Secure TLS bootstrapping is a process where the node can use signed metadata from the Azure IMDS service to authenticate
	// against the api server
	BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_SECURE_TLS_BOOTSTRAPPING BootstrappingAuthMethod = 2
	// Nodes running outside Azure can use the Azure Arc MSI to authenticate to an API server. This only works when the cluster is
	//
	//	using AAD authentication.
	BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_ARC_MSI BootstrappingAuthMethod = 3
	// Nodes running inside Azure can use the Azure Arc MSI to authenticate to an API server. This only works when the cluster is
	// using AAD authentication.
	BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_AZURE_MSI BootstrappingAuthMethod = 4
)

// Enum value maps for BootstrappingAuthMethod.
var (
	BootstrappingAuthMethod_name = map[int32]string{
		0: "BOOTSTRAPPING_AUTH_METHOD_UNSPECIFIED",
		1: "BOOTSTRAPPING_AUTH_METHOD_BOOTSTRAP_TOKEN",
		2: "BOOTSTRAPPING_AUTH_METHOD_SECURE_TLS_BOOTSTRAPPING",
		3: "BOOTSTRAPPING_AUTH_METHOD_ARC_MSI",
		4: "BOOTSTRAPPING_AUTH_METHOD_AZURE_MSI",
	}
	BootstrappingAuthMethod_value = map[string]int32{
		"BOOTSTRAPPING_AUTH_METHOD_UNSPECIFIED":              0,
		"BOOTSTRAPPING_AUTH_METHOD_BOOTSTRAP_TOKEN":          1,
		"BOOTSTRAPPING_AUTH_METHOD_SECURE_TLS_BOOTSTRAPPING": 2,
		"BOOTSTRAPPING_AUTH_METHOD_ARC_MSI":                  3,
		"BOOTSTRAPPING_AUTH_METHOD_AZURE_MSI":                4,
	}
)

func (x BootstrappingAuthMethod) Enum() *BootstrappingAuthMethod {
	p := new(BootstrappingAuthMethod)
	*p = x
	return p
}

func (x BootstrappingAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BootstrappingAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes[0].Descriptor()
}

func (BootstrappingAuthMethod) Type() protoreflect.EnumType {
	return &file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes[0]
}

func (x BootstrappingAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BootstrappingAuthMethod.Descriptor instead.
func (BootstrappingAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescGZIP(), []int{0}
}

type ClusterJoinMethod int32

const (
	ClusterJoinMethod_CLUSTER_JOIN_METHOD_UNSPECIFIED ClusterJoinMethod = 0
	// The default behaviour is for the node to make a certificate signing request (CSR) and then
	// use that CSR for ongoing communication.
	ClusterJoinMethod_CLUSTER_JOIN_METHOD_GENERATE_CSR ClusterJoinMethod = 1
	// In some cases, the node will use the bootstrapping auth to register itself as a node and for ongoing communications.
	ClusterJoinMethod_CLUSTER_JOIN_METHOD_USE_BOOTSTRAPPING_AUTH ClusterJoinMethod = 2
)

// Enum value maps for ClusterJoinMethod.
var (
	ClusterJoinMethod_name = map[int32]string{
		0: "CLUSTER_JOIN_METHOD_UNSPECIFIED",
		1: "CLUSTER_JOIN_METHOD_GENERATE_CSR",
		2: "CLUSTER_JOIN_METHOD_USE_BOOTSTRAPPING_AUTH",
	}
	ClusterJoinMethod_value = map[string]int32{
		"CLUSTER_JOIN_METHOD_UNSPECIFIED":            0,
		"CLUSTER_JOIN_METHOD_GENERATE_CSR":           1,
		"CLUSTER_JOIN_METHOD_USE_BOOTSTRAPPING_AUTH": 2,
	}
)

func (x ClusterJoinMethod) Enum() *ClusterJoinMethod {
	p := new(ClusterJoinMethod)
	*p = x
	return p
}

func (x ClusterJoinMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterJoinMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes[1].Descriptor()
}

func (ClusterJoinMethod) Type() protoreflect.EnumType {
	return &file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes[1]
}

func (x ClusterJoinMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterJoinMethod.Descriptor instead.
func (ClusterJoinMethod) EnumDescriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescGZIP(), []int{1}
}

type BootstrappingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method to authenticate the node to the API server
	BootstrappingAuthMethod BootstrappingAuthMethod `protobuf:"varint,1,opt,name=bootstrapping_auth_method,json=bootstrappingAuthMethod,proto3,enum=aksnodeconfig.v1.BootstrappingAuthMethod" json:"bootstrapping_auth_method,omitempty"`
	// how the node should join and communicate with the API server after authentication
	ClusterJoinMethod ClusterJoinMethod `protobuf:"varint,2,opt,name=cluster_join_method,json=clusterJoinMethod,proto3,enum=aksnodeconfig.v1.ClusterJoinMethod" json:"cluster_join_method,omitempty"`
	// Only required until Secure TLS bootstrapping in place. Would use kubelet identity after that.
	TlsBootstrappingToken *string `protobuf:"bytes,3,opt,name=tls_bootstrapping_token,json=tlsBootstrappingToken,proto3,oneof" json:"tls_bootstrapping_token,omitempty"`
	// Only used when secure TLS bootstrapping is enabled or one of the Azure/Arc methods. This is the appserver appid that the node will use to bootstrap.
	CustomAadResource *string `protobuf:"bytes,4,opt,name=custom_aad_resource,json=customAadResource,proto3,oneof" json:"custom_aad_resource,omitempty"`
	// Only used when one of the Azure/Arc methods is enabled. This is the client ID of the MSI that the node will use to bootstrap.
	CustomAadClientId *string `protobuf:"bytes,5,opt,name=custom_aad_client_id,json=customAadClientId,proto3,oneof" json:"custom_aad_client_id,omitempty"`
}

func (x *BootstrappingConfig) Reset() {
	*x = BootstrappingConfig{}
	mi := &file_aksnodeconfig_v1_bootstrapping_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrappingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrappingConfig) ProtoMessage() {}

func (x *BootstrappingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aksnodeconfig_v1_bootstrapping_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrappingConfig.ProtoReflect.Descriptor instead.
func (*BootstrappingConfig) Descriptor() ([]byte, []int) {
	return file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescGZIP(), []int{0}
}

func (x *BootstrappingConfig) GetBootstrappingAuthMethod() BootstrappingAuthMethod {
	if x != nil {
		return x.BootstrappingAuthMethod
	}
	return BootstrappingAuthMethod_BOOTSTRAPPING_AUTH_METHOD_UNSPECIFIED
}

func (x *BootstrappingConfig) GetClusterJoinMethod() ClusterJoinMethod {
	if x != nil {
		return x.ClusterJoinMethod
	}
	return ClusterJoinMethod_CLUSTER_JOIN_METHOD_UNSPECIFIED
}

func (x *BootstrappingConfig) GetTlsBootstrappingToken() string {
	if x != nil && x.TlsBootstrappingToken != nil {
		return *x.TlsBootstrappingToken
	}
	return ""
}

func (x *BootstrappingConfig) GetCustomAadResource() string {
	if x != nil && x.CustomAadResource != nil {
		return *x.CustomAadResource
	}
	return ""
}

func (x *BootstrappingConfig) GetCustomAadClientId() string {
	if x != nil && x.CustomAadClientId != nil {
		return *x.CustomAadClientId
	}
	return ""
}

var File_aksnodeconfig_v1_bootstrapping_config_proto protoreflect.FileDescriptor

var file_aksnodeconfig_v1_bootstrapping_config_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61,
	0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22,
	0xc6, 0x03, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x19, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x6b, 0x73,
	0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x17, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x53,
	0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6b,
	0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x17, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x61, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x61, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x61, 0x64, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x2a, 0xfb, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x29, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x4f, 0x4f,
	0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x36,
	0x0a, 0x32, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54,
	0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x41, 0x52, 0x43, 0x5f, 0x4d, 0x53, 0x49, 0x10, 0x03, 0x12, 0x27, 0x0a,
	0x23, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45,
	0x5f, 0x4d, 0x53, 0x49, 0x10, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x53, 0x52, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x6b, 0x73, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6b, 0x73, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescOnce sync.Once
	file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescData = file_aksnodeconfig_v1_bootstrapping_config_proto_rawDesc
)

func file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescGZIP() []byte {
	file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescOnce.Do(func() {
		file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescData)
	})
	return file_aksnodeconfig_v1_bootstrapping_config_proto_rawDescData
}

var file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aksnodeconfig_v1_bootstrapping_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aksnodeconfig_v1_bootstrapping_config_proto_goTypes = []any{
	(BootstrappingAuthMethod)(0), // 0: aksnodeconfig.v1.BootstrappingAuthMethod
	(ClusterJoinMethod)(0),       // 1: aksnodeconfig.v1.ClusterJoinMethod
	(*BootstrappingConfig)(nil),  // 2: aksnodeconfig.v1.BootstrappingConfig
}
var file_aksnodeconfig_v1_bootstrapping_config_proto_depIdxs = []int32{
	0, // 0: aksnodeconfig.v1.BootstrappingConfig.bootstrapping_auth_method:type_name -> aksnodeconfig.v1.BootstrappingAuthMethod
	1, // 1: aksnodeconfig.v1.BootstrappingConfig.cluster_join_method:type_name -> aksnodeconfig.v1.ClusterJoinMethod
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_aksnodeconfig_v1_bootstrapping_config_proto_init() }
func file_aksnodeconfig_v1_bootstrapping_config_proto_init() {
	if File_aksnodeconfig_v1_bootstrapping_config_proto != nil {
		return
	}
	file_aksnodeconfig_v1_bootstrapping_config_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aksnodeconfig_v1_bootstrapping_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aksnodeconfig_v1_bootstrapping_config_proto_goTypes,
		DependencyIndexes: file_aksnodeconfig_v1_bootstrapping_config_proto_depIdxs,
		EnumInfos:         file_aksnodeconfig_v1_bootstrapping_config_proto_enumTypes,
		MessageInfos:      file_aksnodeconfig_v1_bootstrapping_config_proto_msgTypes,
	}.Build()
	File_aksnodeconfig_v1_bootstrapping_config_proto = out.File
	file_aksnodeconfig_v1_bootstrapping_config_proto_rawDesc = nil
	file_aksnodeconfig_v1_bootstrapping_config_proto_goTypes = nil
	file_aksnodeconfig_v1_bootstrapping_config_proto_depIdxs = nil
}
