// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: agentbaker/v1/config.proto

package agentbakerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureState int32

const (
	FeatureState_FEATURE_STATE_UNSPECIFIED FeatureState = 0
	FeatureState_FEATURE_STATE_ENABLED     FeatureState = 1
	FeatureState_FEATURE_STATE_DISABLED    FeatureState = 2
)

// Enum value maps for FeatureState.
var (
	FeatureState_name = map[int32]string{
		0: "FEATURE_STATE_UNSPECIFIED",
		1: "FEATURE_STATE_ENABLED",
		2: "FEATURE_STATE_DISABLED",
	}
	FeatureState_value = map[string]int32{
		"FEATURE_STATE_UNSPECIFIED": 0,
		"FEATURE_STATE_ENABLED":     1,
		"FEATURE_STATE_DISABLED":    2,
	}
)

func (x FeatureState) Enum() *FeatureState {
	p := new(FeatureState)
	*p = x
	return p
}

func (x FeatureState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureState) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[0].Descriptor()
}

func (FeatureState) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[0]
}

func (x FeatureState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureState.Descriptor instead.
func (FeatureState) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{0}
}

type IdentityType int32

const (
	IdentityType_IDENTITY_TYPE_UNSPECIFIED       IdentityType = 0
	IdentityType_IDENTITY_TYPE_SERVICE_PRINCIPAL IdentityType = 1
	IdentityType_IDENTITY_TYPE_SYSTEM_IDENTITY   IdentityType = 2
	IdentityType_IDENTITY_TYPE_USER_IDENTITY     IdentityType = 3
)

// Enum value maps for IdentityType.
var (
	IdentityType_name = map[int32]string{
		0: "IDENTITY_TYPE_UNSPECIFIED",
		1: "IDENTITY_TYPE_SERVICE_PRINCIPAL",
		2: "IDENTITY_TYPE_SYSTEM_IDENTITY",
		3: "IDENTITY_TYPE_USER_IDENTITY",
	}
	IdentityType_value = map[string]int32{
		"IDENTITY_TYPE_UNSPECIFIED":       0,
		"IDENTITY_TYPE_SERVICE_PRINCIPAL": 1,
		"IDENTITY_TYPE_SYSTEM_IDENTITY":   2,
		"IDENTITY_TYPE_USER_IDENTITY":     3,
	}
)

func (x IdentityType) Enum() *IdentityType {
	p := new(IdentityType)
	*p = x
	return p
}

func (x IdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[1].Descriptor()
}

func (IdentityType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[1]
}

func (x IdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityType.Descriptor instead.
func (IdentityType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{1}
}

type NetworkPluginType int32

const (
	NetworkPluginType_NETWORK_PLUGIN_TYPE_UNSPECIFIED NetworkPluginType = 0
	NetworkPluginType_NETWORK_PLUGIN_TYPE_NONE        NetworkPluginType = 1
	NetworkPluginType_NETWORK_PLUGIN_TYPE_AZURE       NetworkPluginType = 2
	NetworkPluginType_NETWORK_PLUGIN_TYPE_KUBENET     NetworkPluginType = 3
)

// Enum value maps for NetworkPluginType.
var (
	NetworkPluginType_name = map[int32]string{
		0: "NETWORK_PLUGIN_TYPE_UNSPECIFIED",
		1: "NETWORK_PLUGIN_TYPE_NONE",
		2: "NETWORK_PLUGIN_TYPE_AZURE",
		3: "NETWORK_PLUGIN_TYPE_KUBENET",
	}
	NetworkPluginType_value = map[string]int32{
		"NETWORK_PLUGIN_TYPE_UNSPECIFIED": 0,
		"NETWORK_PLUGIN_TYPE_NONE":        1,
		"NETWORK_PLUGIN_TYPE_AZURE":       2,
		"NETWORK_PLUGIN_TYPE_KUBENET":     3,
	}
)

func (x NetworkPluginType) Enum() *NetworkPluginType {
	p := new(NetworkPluginType)
	*p = x
	return p
}

func (x NetworkPluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkPluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[2].Descriptor()
}

func (NetworkPluginType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[2]
}

func (x NetworkPluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkPluginType.Descriptor instead.
func (NetworkPluginType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{2}
}

type NetworkPolicyType int32

const (
	NetworkPolicyType_NETWORK_POLICY_TYPE_UNSPECIFIED NetworkPolicyType = 0
	NetworkPolicyType_NETWORK_POLICY_TYPE_NONE        NetworkPolicyType = 1
	NetworkPolicyType_NETWORK_POLICY_TYPE_AZURE       NetworkPolicyType = 2
	NetworkPolicyType_NETWORK_POLICY_TYPE_CALICO      NetworkPolicyType = 3
)

// Enum value maps for NetworkPolicyType.
var (
	NetworkPolicyType_name = map[int32]string{
		0: "NETWORK_POLICY_TYPE_UNSPECIFIED",
		1: "NETWORK_POLICY_TYPE_NONE",
		2: "NETWORK_POLICY_TYPE_AZURE",
		3: "NETWORK_POLICY_TYPE_CALICO",
	}
	NetworkPolicyType_value = map[string]int32{
		"NETWORK_POLICY_TYPE_UNSPECIFIED": 0,
		"NETWORK_POLICY_TYPE_NONE":        1,
		"NETWORK_POLICY_TYPE_AZURE":       2,
		"NETWORK_POLICY_TYPE_CALICO":      3,
	}
)

func (x NetworkPolicyType) Enum() *NetworkPolicyType {
	p := new(NetworkPolicyType)
	*p = x
	return p
}

func (x NetworkPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[3].Descriptor()
}

func (NetworkPolicyType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[3]
}

func (x NetworkPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkPolicyType.Descriptor instead.
func (NetworkPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{3}
}

type KubeletDiskType int32

const (
	KubeletDiskType_KUBELET_DISK_TYPE_UNSPECIFIED KubeletDiskType = 0
	KubeletDiskType_KUBELET_DISK_TYPE_OS_DISK     KubeletDiskType = 1
	KubeletDiskType_KUBELET_DISK_TYPE_TEMP_DISK   KubeletDiskType = 2
)

// Enum value maps for KubeletDiskType.
var (
	KubeletDiskType_name = map[int32]string{
		0: "KUBELET_DISK_TYPE_UNSPECIFIED",
		1: "KUBELET_DISK_TYPE_OS_DISK",
		2: "KUBELET_DISK_TYPE_TEMP_DISK",
	}
	KubeletDiskType_value = map[string]int32{
		"KUBELET_DISK_TYPE_UNSPECIFIED": 0,
		"KUBELET_DISK_TYPE_OS_DISK":     1,
		"KUBELET_DISK_TYPE_TEMP_DISK":   2,
	}
)

func (x KubeletDiskType) Enum() *KubeletDiskType {
	p := new(KubeletDiskType)
	*p = x
	return p
}

func (x KubeletDiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeletDiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_agentbaker_v1_config_proto_enumTypes[4].Descriptor()
}

func (KubeletDiskType) Type() protoreflect.EnumType {
	return &file_agentbaker_v1_config_proto_enumTypes[4]
}

func (x KubeletDiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeletDiskType.Descriptor instead.
func (KubeletDiskType) EnumDescriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{4}
}

// illustrative division only
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System Configuration
	ApiServerEndpoint           string `protobuf:"bytes,1,opt,name=api_server_endpoint,json=apiServerEndpoint,proto3" json:"api_server_endpoint,omitempty"`
	ClusterCertificateAuthority string `protobuf:"bytes,2,opt,name=cluster_certificate_authority,json=clusterCertificateAuthority,proto3" json:"cluster_certificate_authority,omitempty"`
	// only required until Secure TLS bootstrapping in place
	// would use kubelet identity after that.
	TlsBootstrapToken string `protobuf:"bytes,3,opt,name=tls_bootstrap_token,json=tlsBootstrapToken,proto3" json:"tls_bootstrap_token,omitempty"`
	// cluster/user config
	KubernetesVersion     string                 `protobuf:"bytes,4,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"` // Q: can this be auto-detected? Or is this part of specifying the desired node version?
	IdentityConfiguration *IdentityConfiguration `protobuf:"bytes,5,opt,name=identity_configuration,json=identityConfiguration,proto3" json:"identity_configuration,omitempty"`
	NetworkPlugin         NetworkPluginType      `protobuf:"varint,6,opt,name=network_plugin,json=networkPlugin,proto3,enum=agentbaker.v1.NetworkPluginType" json:"network_plugin,omitempty"`
	NetworkPolicy         NetworkPolicyType      `protobuf:"varint,7,opt,name=network_policy,json=networkPolicy,proto3,enum=agentbaker.v1.NetworkPolicyType" json:"network_policy,omitempty"`
	// ... and a bunch of user-specified config
	HttpProxyConfiguration        *HTTPProxyConfig      `protobuf:"bytes,8,opt,name=http_proxy_configuration,json=httpProxyConfiguration,proto3" json:"http_proxy_configuration,omitempty"`
	TrustedCertificateAuthorities []string              `protobuf:"bytes,9,rep,name=trusted_certificate_authorities,json=trustedCertificateAuthorities,proto3" json:"trusted_certificate_authorities,omitempty"`
	SshStatus                     FeatureState          `protobuf:"varint,10,opt,name=ssh_status,json=sshStatus,proto3,enum=agentbaker.v1.FeatureState" json:"ssh_status,omitempty"`
	UnattededUpgradeStatus        FeatureState          `protobuf:"varint,11,opt,name=unatteded_upgrade_status,json=unattededUpgradeStatus,proto3,enum=agentbaker.v1.FeatureState" json:"unatteded_upgrade_status,omitempty"`
	MessageOfTheDay               string                `protobuf:"bytes,12,opt,name=message_of_the_day,json=messageOfTheDay,proto3" json:"message_of_the_day,omitempty"`
	SwapFileSizeMb                string                `protobuf:"bytes,13,opt,name=swap_file_size_mb,json=swapFileSizeMb,proto3" json:"swap_file_size_mb,omitempty"`
	Sysctls                       *SysctlConfig         `protobuf:"bytes,14,opt,name=sysctls,proto3" json:"sysctls,omitempty"`
	KubeletConfiguration          *KubeletConfiguration `protobuf:"bytes,15,opt,name=kubelet_configuration,json=kubeletConfiguration,proto3" json:"kubelet_configuration,omitempty"`
	GpuInstanceProfile            *string               `protobuf:"bytes,16,opt,name=gpu_instance_profile,json=gpuInstanceProfile,proto3,oneof" json:"gpu_instance_profile,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetApiServerEndpoint() string {
	if x != nil {
		return x.ApiServerEndpoint
	}
	return ""
}

func (x *Configuration) GetClusterCertificateAuthority() string {
	if x != nil {
		return x.ClusterCertificateAuthority
	}
	return ""
}

func (x *Configuration) GetTlsBootstrapToken() string {
	if x != nil {
		return x.TlsBootstrapToken
	}
	return ""
}

func (x *Configuration) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *Configuration) GetIdentityConfiguration() *IdentityConfiguration {
	if x != nil {
		return x.IdentityConfiguration
	}
	return nil
}

func (x *Configuration) GetNetworkPlugin() NetworkPluginType {
	if x != nil {
		return x.NetworkPlugin
	}
	return NetworkPluginType_NETWORK_PLUGIN_TYPE_UNSPECIFIED
}

func (x *Configuration) GetNetworkPolicy() NetworkPolicyType {
	if x != nil {
		return x.NetworkPolicy
	}
	return NetworkPolicyType_NETWORK_POLICY_TYPE_UNSPECIFIED
}

func (x *Configuration) GetHttpProxyConfiguration() *HTTPProxyConfig {
	if x != nil {
		return x.HttpProxyConfiguration
	}
	return nil
}

func (x *Configuration) GetTrustedCertificateAuthorities() []string {
	if x != nil {
		return x.TrustedCertificateAuthorities
	}
	return nil
}

func (x *Configuration) GetSshStatus() FeatureState {
	if x != nil {
		return x.SshStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetUnattededUpgradeStatus() FeatureState {
	if x != nil {
		return x.UnattededUpgradeStatus
	}
	return FeatureState_FEATURE_STATE_UNSPECIFIED
}

func (x *Configuration) GetMessageOfTheDay() string {
	if x != nil {
		return x.MessageOfTheDay
	}
	return ""
}

func (x *Configuration) GetSwapFileSizeMb() string {
	if x != nil {
		return x.SwapFileSizeMb
	}
	return ""
}

func (x *Configuration) GetSysctls() *SysctlConfig {
	if x != nil {
		return x.Sysctls
	}
	return nil
}

func (x *Configuration) GetKubeletConfiguration() *KubeletConfiguration {
	if x != nil {
		return x.KubeletConfiguration
	}
	return nil
}

func (x *Configuration) GetGpuInstanceProfile() string {
	if x != nil && x.GpuInstanceProfile != nil {
		return *x.GpuInstanceProfile
	}
	return ""
}

type KubeletConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(ace): remove these/make api defensible
	KubeletFlags      []string          `protobuf:"bytes,1,rep,name=kubelet_flags,json=kubeletFlags,proto3" json:"kubelet_flags,omitempty"`
	KubeletNodeLabels map[string]string `protobuf:"bytes,2,rep,name=kubelet_node_labels,json=kubeletNodeLabels,proto3" json:"kubelet_node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Taints            []*Taint          `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
	StartupTaints     []*Taint          `protobuf:"bytes,4,rep,name=startup_taints,json=startupTaints,proto3" json:"startup_taints,omitempty"`
	KubeletDiskType   KubeletDiskType   `protobuf:"varint,5,opt,name=kubelet_disk_type,json=kubeletDiskType,proto3,enum=agentbaker.v1.KubeletDiskType" json:"kubelet_disk_type,omitempty"`
}

func (x *KubeletConfiguration) Reset() {
	*x = KubeletConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeletConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeletConfiguration) ProtoMessage() {}

func (x *KubeletConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeletConfiguration.ProtoReflect.Descriptor instead.
func (*KubeletConfiguration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *KubeletConfiguration) GetKubeletFlags() []string {
	if x != nil {
		return x.KubeletFlags
	}
	return nil
}

func (x *KubeletConfiguration) GetKubeletNodeLabels() map[string]string {
	if x != nil {
		return x.KubeletNodeLabels
	}
	return nil
}

func (x *KubeletConfiguration) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KubeletConfiguration) GetStartupTaints() []*Taint {
	if x != nil {
		return x.StartupTaints
	}
	return nil
}

func (x *KubeletConfiguration) GetKubeletDiskType() KubeletDiskType {
	if x != nil {
		return x.KubeletDiskType
	}
	return KubeletDiskType_KUBELET_DISK_TYPE_UNSPECIFIED
}

type SysctlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sysctls []*Sysctl `protobuf:"bytes,1,rep,name=sysctls,proto3" json:"sysctls,omitempty"`
}

func (x *SysctlConfig) Reset() {
	*x = SysctlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysctlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysctlConfig) ProtoMessage() {}

func (x *SysctlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysctlConfig.ProtoReflect.Descriptor instead.
func (*SysctlConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *SysctlConfig) GetSysctls() []*Sysctl {
	if x != nil {
		return x.Sysctls
	}
	return nil
}

type IdentityConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityType           IdentityType `protobuf:"varint,1,opt,name=identity_type,json=identityType,proto3,enum=agentbaker.v1.IdentityType" json:"identity_type,omitempty"` // Q: I am assuming this is a better pattern than Oneof?
	ServicePrincipalId     string       `protobuf:"bytes,2,opt,name=service_principal_id,json=servicePrincipalId,proto3" json:"service_principal_id,omitempty"`
	ServicePrincipalSecret string       `protobuf:"bytes,3,opt,name=service_principal_secret,json=servicePrincipalSecret,proto3" json:"service_principal_secret,omitempty"`
	UserIdentityId         string       `protobuf:"bytes,4,opt,name=user_identity_id,json=userIdentityId,proto3" json:"user_identity_id,omitempty"`
}

func (x *IdentityConfiguration) Reset() {
	*x = IdentityConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityConfiguration) ProtoMessage() {}

func (x *IdentityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityConfiguration.ProtoReflect.Descriptor instead.
func (*IdentityConfiguration) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *IdentityConfiguration) GetIdentityType() IdentityType {
	if x != nil {
		return x.IdentityType
	}
	return IdentityType_IDENTITY_TYPE_UNSPECIFIED
}

func (x *IdentityConfiguration) GetServicePrincipalId() string {
	if x != nil {
		return x.ServicePrincipalId
	}
	return ""
}

func (x *IdentityConfiguration) GetServicePrincipalSecret() string {
	if x != nil {
		return x.ServicePrincipalSecret
	}
	return ""
}

func (x *IdentityConfiguration) GetUserIdentityId() string {
	if x != nil {
		return x.UserIdentityId
	}
	return ""
}

type HTTPProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy                   *string  `protobuf:"bytes,1,opt,name=http_proxy,json=httpProxy,proto3,oneof" json:"http_proxy,omitempty"`
	HttpsProxy                  *string  `protobuf:"bytes,2,opt,name=https_proxy,json=httpsProxy,proto3,oneof" json:"https_proxy,omitempty"`
	NoProxy                     []string `protobuf:"bytes,3,rep,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty"`
	TrustedCertificateAuthority *string  `protobuf:"bytes,4,opt,name=trusted_certificate_authority,json=trustedCertificateAuthority,proto3,oneof" json:"trusted_certificate_authority,omitempty"`
}

func (x *HTTPProxyConfig) Reset() {
	*x = HTTPProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPProxyConfig) ProtoMessage() {}

func (x *HTTPProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPProxyConfig.ProtoReflect.Descriptor instead.
func (*HTTPProxyConfig) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *HTTPProxyConfig) GetHttpProxy() string {
	if x != nil && x.HttpProxy != nil {
		return *x.HttpProxy
	}
	return ""
}

func (x *HTTPProxyConfig) GetHttpsProxy() string {
	if x != nil && x.HttpsProxy != nil {
		return *x.HttpsProxy
	}
	return ""
}

func (x *HTTPProxyConfig) GetNoProxy() []string {
	if x != nil {
		return x.NoProxy
	}
	return nil
}

func (x *HTTPProxyConfig) GetTrustedCertificateAuthority() string {
	if x != nil && x.TrustedCertificateAuthority != nil {
		return *x.TrustedCertificateAuthority
	}
	return ""
}

type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Effect string `protobuf:"bytes,2,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type Sysctl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sysctl) Reset() {
	*x = Sysctl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agentbaker_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sysctl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sysctl) ProtoMessage() {}

func (x *Sysctl) ProtoReflect() protoreflect.Message {
	mi := &file_agentbaker_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sysctl.ProtoReflect.Descriptor instead.
func (*Sysctl) Descriptor() ([]byte, []int) {
	return file_agentbaker_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *Sysctl) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Sysctl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_agentbaker_v1_config_proto protoreflect.FileDescriptor

var file_agentbaker_v1_config_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xbf, 0x08, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6c, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x58, 0x0a, 0x18, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x73, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a,
	0x18, 0x75, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x75, 0x6e,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61,
	0x79, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x79, 0x73, 0x63,
	0x74, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x14, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x70, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa4, 0x03,
	0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x13, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x44,
	0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x63, 0x74, 0x6c, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x47, 0x0a, 0x1d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x1b, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x31, 0x0a, 0x05, 0x54, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x34, 0x0a,
	0x06, 0x53, 0x79, 0x73, 0x63, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x64, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x03, 0x2a, 0x96, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x95, 0x01, 0x0a, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x43,
	0x4f, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x55, 0x42, 0x45, 0x4c, 0x45,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42,
	0x45, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42, 0x45,
	0x4c, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x42, 0xad, 0x01, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x2f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x62,
	0x61, 0x6b, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x62, 0x61, 0x6b, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_agentbaker_v1_config_proto_rawDescOnce sync.Once
	file_agentbaker_v1_config_proto_rawDescData = file_agentbaker_v1_config_proto_rawDesc
)

func file_agentbaker_v1_config_proto_rawDescGZIP() []byte {
	file_agentbaker_v1_config_proto_rawDescOnce.Do(func() {
		file_agentbaker_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_agentbaker_v1_config_proto_rawDescData)
	})
	return file_agentbaker_v1_config_proto_rawDescData
}

var file_agentbaker_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_agentbaker_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_agentbaker_v1_config_proto_goTypes = []interface{}{
	(FeatureState)(0),             // 0: agentbaker.v1.FeatureState
	(IdentityType)(0),             // 1: agentbaker.v1.IdentityType
	(NetworkPluginType)(0),        // 2: agentbaker.v1.NetworkPluginType
	(NetworkPolicyType)(0),        // 3: agentbaker.v1.NetworkPolicyType
	(KubeletDiskType)(0),          // 4: agentbaker.v1.KubeletDiskType
	(*Configuration)(nil),         // 5: agentbaker.v1.Configuration
	(*KubeletConfiguration)(nil),  // 6: agentbaker.v1.KubeletConfiguration
	(*SysctlConfig)(nil),          // 7: agentbaker.v1.SysctlConfig
	(*IdentityConfiguration)(nil), // 8: agentbaker.v1.IdentityConfiguration
	(*HTTPProxyConfig)(nil),       // 9: agentbaker.v1.HTTPProxyConfig
	(*Taint)(nil),                 // 10: agentbaker.v1.Taint
	(*Sysctl)(nil),                // 11: agentbaker.v1.Sysctl
	nil,                           // 12: agentbaker.v1.KubeletConfiguration.KubeletNodeLabelsEntry
}
var file_agentbaker_v1_config_proto_depIdxs = []int32{
	8,  // 0: agentbaker.v1.Configuration.identity_configuration:type_name -> agentbaker.v1.IdentityConfiguration
	2,  // 1: agentbaker.v1.Configuration.network_plugin:type_name -> agentbaker.v1.NetworkPluginType
	3,  // 2: agentbaker.v1.Configuration.network_policy:type_name -> agentbaker.v1.NetworkPolicyType
	9,  // 3: agentbaker.v1.Configuration.http_proxy_configuration:type_name -> agentbaker.v1.HTTPProxyConfig
	0,  // 4: agentbaker.v1.Configuration.ssh_status:type_name -> agentbaker.v1.FeatureState
	0,  // 5: agentbaker.v1.Configuration.unatteded_upgrade_status:type_name -> agentbaker.v1.FeatureState
	7,  // 6: agentbaker.v1.Configuration.sysctls:type_name -> agentbaker.v1.SysctlConfig
	6,  // 7: agentbaker.v1.Configuration.kubelet_configuration:type_name -> agentbaker.v1.KubeletConfiguration
	12, // 8: agentbaker.v1.KubeletConfiguration.kubelet_node_labels:type_name -> agentbaker.v1.KubeletConfiguration.KubeletNodeLabelsEntry
	10, // 9: agentbaker.v1.KubeletConfiguration.taints:type_name -> agentbaker.v1.Taint
	10, // 10: agentbaker.v1.KubeletConfiguration.startup_taints:type_name -> agentbaker.v1.Taint
	4,  // 11: agentbaker.v1.KubeletConfiguration.kubelet_disk_type:type_name -> agentbaker.v1.KubeletDiskType
	11, // 12: agentbaker.v1.SysctlConfig.sysctls:type_name -> agentbaker.v1.Sysctl
	1,  // 13: agentbaker.v1.IdentityConfiguration.identity_type:type_name -> agentbaker.v1.IdentityType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_agentbaker_v1_config_proto_init() }
func file_agentbaker_v1_config_proto_init() {
	if File_agentbaker_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agentbaker_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeletConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysctlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agentbaker_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sysctl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agentbaker_v1_config_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_agentbaker_v1_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agentbaker_v1_config_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agentbaker_v1_config_proto_goTypes,
		DependencyIndexes: file_agentbaker_v1_config_proto_depIdxs,
		EnumInfos:         file_agentbaker_v1_config_proto_enumTypes,
		MessageInfos:      file_agentbaker_v1_config_proto_msgTypes,
	}.Build()
	File_agentbaker_v1_config_proto = out.File
	file_agentbaker_v1_config_proto_rawDesc = nil
	file_agentbaker_v1_config_proto_goTypes = nil
	file_agentbaker_v1_config_proto_depIdxs = nil
}
