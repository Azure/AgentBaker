package main

import (
	"context"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/Azure/agentbaker/vulnerability-reporting-vms/config"
)

type VMDate struct {
	Name string
	Date time.Time
}

func determineVMsToDelete(ctx context.Context) ([]string, error) {
	log.Printf("Determining which VMs need to be deleted\n")

	vmCreationDates, err := listAllVms(ctx)
	if err != nil {
		return nil, err
	}

	vmsToDelete := []string{}
	oldestDate := GetOldestVMDate(vmCreationDates)
	for _, vm := range vmCreationDates {
		if vm.Date == oldestDate {
			vmsToDelete = append(vmsToDelete, vm.Name)
		}
	}
	fmt.Printf("VMs to delete: %v\n", vmsToDelete)

	return vmsToDelete, nil
}

func GetOldestVMDate(vms []VMDate) time.Time {
	sort.Slice(vms, func(i, j int) bool {
		return vms[i].Date.Before(vms[j].Date)
	})
	oldest := vms[0]
	fmt.Printf("The oldest VM is %s, created on %s\n", oldest.Name, oldest.Date)
	return oldest.Date
}

func listAllVms(ctx context.Context) ([]VMDate, error) {
	log.Printf("Gathering all VMs in resource group %s\n", config.ResourceGroupName)

	vmsWithDate := []VMDate{}
	pager := config.Azure.VirtualMachinesClient.NewListPager(config.ResourceGroupName, nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, vm := range page.Value {
			creationDate := *vm.Tags["CreationDate"]
			parsedDate, err := time.Parse("2006-01-02", creationDate)
			log.Printf("VM: %s, Date: %s\n", *vm.Name, parsedDate)
			if err != nil {
				return nil, err
			}
			vmsWithDate = append(vmsWithDate, VMDate{Name: *vm.Name, Date: parsedDate})
		}
	}
	return vmsWithDate, nil
}
