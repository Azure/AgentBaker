package main

import (
	"context"
	"log"
	"sort"
	"time"

	"github.com/Azure/agentbaker/vulnerability-reporting-vms/config"
)

type VMDate struct {
	Name string
	Date time.Time
}

// Only n-2 VMs should be running. The oldest VMs will be deleted.
func deleteOldVulnerabilityReportingVms(ctx context.Context) error {
	vmsToDelete, err := determineVMsToDelete(ctx)
	if err != nil {
		return err
	}
	if err = deleteVms(ctx, vmsToDelete); err != nil {
		return err
	}
	log.Printf("Finished deleting old vulnerability VMs\n")
	return nil
}

func deleteVms(ctx context.Context, vms []string) error {
	for _, vmName := range vms {
		log.Printf("VM to delete: %s\n", vmName)
		if err := deleteVM(ctx, vmName); err != nil {
			return err
		}
		if err := deleteNetworkInterface(ctx, vmName); err != nil {
			return err
		}
		if err := deleteDisk(ctx, vmName); err != nil {
			return err
		}
	}
	return nil
}

func determineVMsToDelete(ctx context.Context) ([]string, error) {
	log.Printf("Determining which VMs need to be deleted\n")
	vmCreationDates, err := listAllVMsWithCreationDate(ctx)
	if err != nil {
		return nil, err
	}

	vmsToDelete := []string{}
	oldestDate := getOldestVMDate(vmCreationDates)
	uniqueDates := make(map[time.Time]bool)
	for _, vm := range vmCreationDates {
		uniqueDates[vm.Date] = true
		if vm.Date == oldestDate {
			vmsToDelete = append(vmsToDelete, vm.Name)
		}
	}
	if len(uniqueDates) <= config.Config.UniqueVersions {
		log.Printf("%d unique dates found is not greater than minimum %d, not deleting any VMs\n", len(uniqueDates), config.Config.UniqueVersions)
		return nil, nil
	}

	log.Printf("VMs to delete: %v\n", vmsToDelete)
	return vmsToDelete, nil
}

func getOldestVMDate(vms []VMDate) time.Time {
	sort.Slice(vms, func(i, j int) bool {
		return vms[i].Date.Before(vms[j].Date)
	})
	oldest := vms[0]
	log.Printf("The oldest VM is %s, created on %s\n", oldest.Name, oldest.Date)
	return oldest.Date
}
