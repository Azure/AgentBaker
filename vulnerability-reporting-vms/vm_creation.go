package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/Azure/agentbaker/vulnerability-reporting-vms/config"
)

func createVulnerabilityReportingVms(ctx context.Context, vhdData []*VHD) error {
	subnetID, err := setUpAzureResources(ctx)
	if err != nil {
		return err
	}

	// check if VMs already exist within the timeframe
	vmsToDelete, err := existingVMs(ctx)
	if err != nil {
		return err
	}
	if vmsToDelete != nil {
		log.Printf("This run is recreating VMs that were created within the last %d days\n", config.Config.UselatestImageWithin)
		log.Printf("Deleting stale VMS: %s\n", vmsToDelete)
		err = deleteVms(ctx, vmsToDelete)
	}

	for _, vhd := range vhdData {
		err := createVM(ctx, vhd, subnetID)
		if err != nil {
			return err
		}
	}
	return nil
}

func setUpAzureResources(ctx context.Context) (string, error) {
	if err := createResourceGroup(ctx, config.ResourceGroupName); err != nil {
		return "", fmt.Errorf("failed to create resource group: %v", err)
	}

	vnetName := "alison-test-vnet"
	if err := createVnet(ctx, vnetName); err != nil {
		return "", fmt.Errorf("failed to create virtual network: %v", err)
	}

	subnetName := "alison-test-subnet"
	subNetID, err := createSubnet(ctx, vnetName, subnetName)
	if err != nil {
		return "", fmt.Errorf("failed to create subnet: %v", err)
	}
	return subNetID, nil
}

func existingVMs(ctx context.Context) ([]string, error) {
	vmsDate, err := listAllVMsWithCreationDate(ctx)
	if err != nil {
		return nil, err
	}
	currentDate, err := time.Parse("2006-01-02", config.CurrentDate)
	overwritePeriod := time.Now().AddDate(0, 0, -1*config.Config.UselatestImageWithin)
	fmt.Printf("Checking for VMs created between %s and %s\n", overwritePeriod, currentDate)

	vmsToDelete := []string{}
	for _, vm := range vmsDate {
		vmDate := vm.Date
		if !vmDate.Before(overwritePeriod) && !vmDate.After(currentDate) { // !vmDate makes it inclusive
			vmsToDelete = append(vmsToDelete, vm.Name)
		}
	}
	return vmsToDelete, nil
}
